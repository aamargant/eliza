This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.github/
  ISSUE_TEMPLATE/
    bug_report.md
    feature_request.md
  workflows/
    docs/
      release-checklist.md
    ci.yaml
    publish.yaml
  FUNDING.yml
  PULL_REQUEST_TEMPLATE.md
supabase_mcp/
  api_manager/
    specs/
      api_spec.json
    api_manager.py
    api_safety_config.py
    api_spec_manager.py
  db_client/
    db_client.py
    db_safety_config.py
  sdk_client/
    auth_admin_models.py
    auth_admin_sdk_spec.py
    python_client.py
  __init__.py
  exceptions.py
  logger.py
  main.py
  queries.py
  settings.py
  validators.py
tests/
  api_manager/
    test_api_manager.py
    test_safety_config.py
    test_spec_manager.py
  sdk_client/
    test_auth_admin_models.py
    test_python_client.py
    test_sdk_client_integration.py
  conftest.py
  test_main.py
  test_settings.py
.dockerignore
.env.example
.env.test
.gitignore
.pre-commit-config.yaml
CHANGELOG.MD
CONTRIBUTING.MD
Dockerfile
LICENSE
llms-full.txt
pyproject.toml
README.md
smithery.yaml
uv.lock

================================================================
Files
================================================================

================
File: .github/ISSUE_TEMPLATE/bug_report.md
================
---
name: Bug report
about: Report an issuewith the ser
title: "An issue with doing X when Y under conditions Z"
labels: bug
assignees: alexander-zuev

---

**Describe the bug**
A clear and concise description of what the bug is.

**Steps to Reproduce**

1.
2.
3.

**Connection Details**
<!-- How are you connecting to Supabase? -->
- Connection type: <!-- Local or Remote -->
- Using password with special characters? <!-- Yes/No -->


**Screenshots**
If applicable, add screenshots to help explain your problem.

** Logs**
<!--
HIGHLY USEFUL: Attach server logs from:
- macOS/Linux: ~/.local/share/supabase-mcp/mcp_server.log
- Windows: %USERPROFILE%\.local\share\supabase-mcp\mcp_server.log

You can get the last 50 lines with:
tail -n 50 ~/.local/share/supabase-mcp/mcp_server.log
-->

**Additional context**
Add any other context about the problem here.

**Checklist**
<!-- Please check all that apply -->
- [ ] I've included the server logs
- [ ] I've checked the README troubleshooting section
- [ ] I've verified my connection settings are correct

================
File: .github/ISSUE_TEMPLATE/feature_request.md
================
---
name: Feature request
about: Suggest an idea to improve this MCP server
title: "I want X so that I can do Y and gain Z"
labels: ''
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.

================
File: .github/workflows/docs/release-checklist.md
================
# Release Checklist

Pre-release
1. Tests pass
2. CI passes
3. Build succeeds
4. Clean install succeeds
5. Documentation is up to date
6. Changelog is up to date
7. Tag and release on GitHub
8. Release is published to PyPI
9. Update dockerfile
10. Update .env.example (if necessary)

Post-release
- Clean install from PyPi works



## v0.3.0 - 2025-02-22

1. Tests pass - [X]
2. CI passes - [X]
3. Build succeeds - [X]
4. Clean install succeeds - [X]
5. Documentation is up to date - [X]
6. Changelog is up to date - [X]
7. Tag and release on GitHub - [X]
8. Release is published to PyPI - [X]
9. Clean install from PyPI works - [X]

================
File: .github/workflows/ci.yaml
================
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


env:
  UV_VERSION: "0.6.1" # Pin uv version to avoid breaking changes

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}

      - name: Create venv and install dependencies
        run: |
          # Create venv and install dependencies
          uv venv
          source .venv/bin/activate
          uv sync --group dev --frozen

      - name: Run tests
        run: |
          source .venv/bin/activate # necessary for pytest
          pytest

      - name: Build distribution packages
        run: |
          uv build --no-sources
          # Verify dist contains both wheel and tar.gz
          test -f dist/*.whl
          test -f dist/*.tar.gz

================
File: .github/workflows/publish.yaml
================
name: Publish to PyPI

on:
  release:
    types: [published]
    branches: [main]  # Only trigger for releases from main

env:
  UV_VERSION: "0.6.0" # Pin uv version to avoid breaking changes

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/supabase-mcp-server/
    permissions:
      id-token: write  # Required for trusted publishing
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for proper version detection

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Build package
        run: uv build --no-sources

      - name: Verify package installation and entry points
        env:
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          # Create a new venv for testing
          uv venv
          source .venv/bin/activate

          # Install the built wheel
          uv pip install dist/*.whl

          echo "Testing supabase-mcp-server entry point..."
          # Run with --help to test basic functionality without needing actual connection
          if ! uv run supabase-mcp-server --help; then
            echo "❌ supabase-mcp-server --help failed"
            exit 1
          fi
          echo "✅ supabase-mcp-server --help succeeded"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

================
File: .github/FUNDING.yml
================
github: alexander-zuev

================
File: .github/PULL_REQUEST_TEMPLATE.md
================
# Description

<!-- Provide a clear and concise description of what this PR accomplishes -->

## Type of Change

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] Documentation update
- [ ] Performance improvement
- [ ] Code refactoring (no functional changes)
- [ ] Test updates
- [ ] CI/CD or build process changes
- [ ] Other (please describe):

## Checklist
- [ ] I have performed a self-review of my own code
- [ ] I have made corresponding changes to the documentation
- [ ] New and existing unit tests pass locally with my changes

================
File: supabase_mcp/api_manager/specs/api_spec.json
================
{
    "openapi": "3.0.0",
    "paths": {
      "/v1/branches/{branch_id}": {
        "get": {
          "operationId": "v1-get-a-branch-config",
          "summary": "Get database branch config",
          "description": "Fetches configurations of the specified database branch",
          "parameters": [
            {
              "name": "branch_id",
              "required": true,
              "in": "path",
              "description": "Branch ID",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BranchDetailResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Failed to retrieve database branch"
            }
          },
          "tags": [
            "Environments"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "patch": {
          "operationId": "v1-update-a-branch-config",
          "summary": "Update database branch config",
          "description": "Updates the configuration of the specified database branch",
          "parameters": [
            {
              "name": "branch_id",
              "required": true,
              "in": "path",
              "description": "Branch ID",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBranchBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BranchResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Failed to update database branch"
            }
          },
          "tags": [
            "Environments"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "delete": {
          "operationId": "v1-delete-a-branch",
          "summary": "Delete a database branch",
          "description": "Deletes the specified database branch",
          "parameters": [
            {
              "name": "branch_id",
              "required": true,
              "in": "path",
              "description": "Branch ID",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BranchDeleteResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Failed to delete database branch"
            }
          },
          "tags": [
            "Environments"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/branches/{branch_id}/push": {
        "post": {
          "operationId": "v1-push-a-branch",
          "summary": "Pushes a database branch",
          "description": "Pushes the specified database branch",
          "parameters": [
            {
              "name": "branch_id",
              "required": true,
              "in": "path",
              "description": "Branch ID",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BranchUpdateResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Failed to push database branch"
            }
          },
          "tags": [
            "Environments"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/branches/{branch_id}/reset": {
        "post": {
          "operationId": "v1-reset-a-branch",
          "summary": "Resets a database branch",
          "description": "Resets the specified database branch",
          "parameters": [
            {
              "name": "branch_id",
              "required": true,
              "in": "path",
              "description": "Branch ID",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BranchUpdateResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Failed to reset database branch"
            }
          },
          "tags": [
            "Environments"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects": {
        "get": {
          "operationId": "v1-list-all-projects",
          "summary": "List all projects",
          "description": "Returns a list of all projects you've previously created.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/V1ProjectWithDatabaseResponse"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Projects"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "post": {
          "operationId": "v1-create-a-project",
          "summary": "Create a project",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V1CreateProjectBodyDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/V1ProjectResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "Projects"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/organizations": {
        "get": {
          "operationId": "v1-list-all-organizations",
          "summary": "List all organizations",
          "description": "Returns a list of organizations that you currently belong to.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/OrganizationResponseV1"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected error listing organizations"
            }
          },
          "tags": [
            "Organizations"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "post": {
          "operationId": "v1-create-an-organization",
          "summary": "Create an organization",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrganizationV1Dto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationResponseV1"
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected error creating an organization"
            }
          },
          "tags": [
            "Organizations"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/oauth/authorize": {
        "get": {
          "operationId": "v1-authorize-user",
          "summary": "[Beta] Authorize user through oauth",
          "parameters": [
            {
              "name": "client_id",
              "required": true,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "response_type",
              "required": true,
              "in": "query",
              "schema": {
                "enum": [
                  "code",
                  "token",
                  "id_token token"
                ],
                "type": "string"
              }
            },
            {
              "name": "redirect_uri",
              "required": true,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "scope",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "state",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "response_mode",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "code_challenge",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "code_challenge_method",
              "required": false,
              "in": "query",
              "schema": {
                "enum": [
                  "plain",
                  "sha256",
                  "S256"
                ],
                "type": "string"
              }
            }
          ],
          "responses": {
            "303": {
              "description": ""
            }
          },
          "tags": [
            "OAuth"
          ],
          "security": [
            {
              "oauth2": [
                "read"
              ]
            }
          ]
        }
      },
      "/v1/oauth/token": {
        "post": {
          "operationId": "v1-exchange-oauth-token",
          "summary": "[Beta] Exchange auth code for user's access and refresh token",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthTokenBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OAuthTokenResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "OAuth"
          ],
          "security": [
            {
              "oauth2": [
                "write"
              ]
            }
          ]
        }
      },
      "/v1/oauth/revoke": {
        "post": {
          "operationId": "v1-revoke-token",
          "summary": "[Beta] Revoke oauth app authorization and it's corresponding tokens",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthRevokeTokenBodyDto"
                }
              }
            }
          },
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "OAuth"
          ],
          "security": [
            {
              "oauth2": [
                "write"
              ]
            }
          ]
        }
      },
      "/v1/snippets": {
        "get": {
          "operationId": "v1-list-all-snippets",
          "summary": "Lists SQL snippets for the logged in user",
          "parameters": [
            {
              "name": "cursor",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string",
                "minimum": 1,
                "maximum": 100
              }
            },
            {
              "name": "sort_by",
              "required": false,
              "in": "query",
              "schema": {
                "enum": [
                  "name",
                  "inserted_at"
                ],
                "type": "string"
              }
            },
            {
              "name": "sort_order",
              "required": false,
              "in": "query",
              "schema": {
                "enum": [
                  "asc",
                  "desc"
                ],
                "type": "string"
              }
            },
            {
              "name": "project_ref",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SnippetList"
                  }
                }
              }
            },
            "500": {
              "description": "Failed to list user's SQL snippets"
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/snippets/{id}": {
        "get": {
          "operationId": "v1-get-a-snippet",
          "summary": "Gets a specific SQL snippet",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SnippetResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Failed to retrieve SQL snippet"
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/api-keys": {
        "get": {
          "operationId": "v1-get-project-api-keys",
          "summary": "Get project api keys",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "reveal",
              "required": true,
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ApiKeyResponse"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Secrets"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "post": {
          "operationId": "createApiKey",
          "summary": "[Alpha] Creates a new API key for the project",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "reveal",
              "required": true,
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateApiKeyBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiKeyResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "Secrets"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/api-keys/{id}": {
        "patch": {
          "operationId": "updateApiKey",
          "summary": "[Alpha] Updates an API key for the project",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "id",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "reveal",
              "required": true,
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateApiKeyBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiKeyResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "Secrets"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "get": {
          "operationId": "getApiKey",
          "summary": "[Alpha] Get API key",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "id",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "reveal",
              "required": true,
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiKeyResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "Secrets"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "delete": {
          "operationId": "deleteApiKey",
          "summary": "[Alpha] Deletes an API key for the project",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "id",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "reveal",
              "required": true,
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiKeyResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            }
          },
          "tags": [
            "Secrets"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/branches": {
        "get": {
          "operationId": "v1-list-all-branches",
          "summary": "List all database branches",
          "description": "Returns all database branches of the specified project.",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/BranchResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Failed to retrieve database branches"
            }
          },
          "tags": [
            "Environments"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "post": {
          "operationId": "v1-create-a-branch",
          "summary": "Create a database branch",
          "description": "Creates a database branch from the specified project.",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBranchBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BranchResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Failed to create database branch"
            }
          },
          "tags": [
            "Environments"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "delete": {
          "operationId": "v1-disable-preview-branching",
          "summary": "Disables preview branching",
          "description": "Disables preview branching for the specified project",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": ""
            },
            "500": {
              "description": "Failed to disable preview branching"
            }
          },
          "tags": [
            "Environments"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/custom-hostname": {
        "get": {
          "operationId": "v1-get-hostname-config",
          "summary": "[Beta] Gets project's custom hostname config",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateCustomHostnameResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to retrieve project's custom hostname config"
            }
          },
          "tags": [
            "Domains"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "delete": {
          "operationId": "v1-Delete hostname config",
          "summary": "[Beta] Deletes a project's custom hostname configuration",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": ""
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to delete project custom hostname configuration"
            }
          },
          "tags": [
            "Domains"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/custom-hostname/initialize": {
        "post": {
          "operationId": "v1-update-hostname-config",
          "summary": "[Beta] Updates project's custom hostname configuration",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCustomHostnameBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateCustomHostnameResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to update project custom hostname configuration"
            }
          },
          "tags": [
            "Domains"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/custom-hostname/reverify": {
        "post": {
          "operationId": "v1-verify-dns-config",
          "summary": "[Beta] Attempts to verify the DNS configuration for project's custom hostname configuration",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateCustomHostnameResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to verify project custom hostname configuration"
            }
          },
          "tags": [
            "Domains"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/custom-hostname/activate": {
        "post": {
          "operationId": "v1-activate-custom-hostname",
          "summary": "[Beta] Activates a custom hostname for a project.",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateCustomHostnameResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to activate project custom hostname configuration"
            }
          },
          "tags": [
            "Domains"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/network-bans/retrieve": {
        "post": {
          "operationId": "v1-list-all-network-bans",
          "summary": "[Beta] Gets project's network bans",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NetworkBanResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to retrieve project's network bans"
            }
          },
          "tags": [
            "Projects"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/network-bans": {
        "delete": {
          "operationId": "v1-delete-network-bans",
          "summary": "[Beta] Remove network bans.",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveNetworkBanRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": ""
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to remove network bans."
            }
          },
          "tags": [
            "Projects"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/network-restrictions": {
        "get": {
          "operationId": "v1-get-network-restrictions",
          "summary": "[Beta] Gets project's network restrictions",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NetworkRestrictionsResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to retrieve project's network restrictions"
            }
          },
          "tags": [
            "Projects"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/network-restrictions/apply": {
        "post": {
          "operationId": "v1-update-network-restrictions",
          "summary": "[Beta] Updates project's network restrictions",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkRestrictionsRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NetworkRestrictionsResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to update project network restrictions"
            }
          },
          "tags": [
            "Projects"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/pgsodium": {
        "get": {
          "operationId": "v1-get-pgsodium-config",
          "summary": "[Beta] Gets project's pgsodium config",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PgsodiumConfigResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to retrieve project's pgsodium config"
            }
          },
          "tags": [
            "Secrets"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "put": {
          "operationId": "v1-update-pgsodium-config",
          "summary": "[Beta] Updates project's pgsodium config. Updating the root_key can cause all data encrypted with the older key to become inaccessible.",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePgsodiumConfigBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PgsodiumConfigResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to update project's pgsodium config"
            }
          },
          "tags": [
            "Secrets"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/postgrest": {
        "get": {
          "operationId": "v1-get-postgrest-service-config",
          "summary": "Gets project's postgrest config",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PostgrestConfigWithJWTSecretResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to retrieve project's postgrest config"
            }
          },
          "tags": [
            "Rest"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "patch": {
          "operationId": "v1-update-postgrest-service-config",
          "summary": "Updates project's postgrest config",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePostgrestConfigBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/V1PostgrestConfigResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to update project's postgrest config"
            }
          },
          "tags": [
            "Rest"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}": {
        "get": {
          "operationId": "v1-get-project",
          "summary": "Gets a specific project that belongs to the authenticated user",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/V1ProjectWithDatabaseResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Failed to retrieve project"
            }
          },
          "tags": [
            "Projects"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "delete": {
          "operationId": "v1-delete-a-project",
          "summary": "Deletes the given project",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/V1ProjectRefResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            }
          },
          "tags": [
            "Projects"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/secrets": {
        "get": {
          "operationId": "v1-list-all-secrets",
          "summary": "List all secrets",
          "description": "Returns all secrets you've previously added to the specified project.",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SecretResponse"
                    }
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to retrieve project's secrets"
            }
          },
          "tags": [
            "Secrets"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "post": {
          "operationId": "v1-bulk-create-secrets",
          "summary": "Bulk create secrets",
          "description": "Creates multiple secrets and adds them to the specified project.",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateSecretBody"
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": ""
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to create project's secrets"
            }
          },
          "tags": [
            "Secrets"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "delete": {
          "operationId": "v1-bulk-delete-secrets",
          "summary": "Bulk delete secrets",
          "description": "Deletes all secrets with the given names from the specified project",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to delete secrets with given names"
            }
          },
          "tags": [
            "Secrets"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/ssl-enforcement": {
        "get": {
          "operationId": "v1-get-ssl-enforcement-config",
          "summary": "[Beta] Get project's SSL enforcement configuration.",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SslEnforcementResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to retrieve project's SSL enforcement config"
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "put": {
          "operationId": "v1-update-ssl-enforcement-config",
          "summary": "[Beta] Update project's SSL enforcement configuration.",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SslEnforcementRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SslEnforcementResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to update project's SSL enforcement configuration."
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/types/typescript": {
        "get": {
          "operationId": "v1-generate-typescript-types",
          "summary": "Generate TypeScript types",
          "description": "Returns the TypeScript types of your schema for use with supabase-js.",
          "parameters": [
            {
              "name": "included_schemas",
              "required": false,
              "in": "query",
              "schema": {
                "default": "public",
                "type": "string"
              }
            },
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TypescriptResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to generate TypeScript types"
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/vanity-subdomain": {
        "get": {
          "operationId": "v1-get-vanity-subdomain-config",
          "summary": "[Beta] Gets current vanity subdomain config",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VanitySubdomainConfigResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to get project vanity subdomain configuration"
            }
          },
          "tags": [
            "Domains"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "delete": {
          "operationId": "v1-deactivate-vanity-subdomain-config",
          "summary": "[Beta] Deletes a project's vanity subdomain configuration",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": ""
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to delete project vanity subdomain configuration"
            }
          },
          "tags": [
            "Domains"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/vanity-subdomain/check-availability": {
        "post": {
          "operationId": "v1-check-vanity-subdomain-availability",
          "summary": "[Beta] Checks vanity subdomain availability",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VanitySubdomainBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SubdomainAvailabilityResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to check project vanity subdomain configuration"
            }
          },
          "tags": [
            "Domains"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/vanity-subdomain/activate": {
        "post": {
          "operationId": "v1-activate-vanity-subdomain-config",
          "summary": "[Beta] Activates a vanity subdomain for a project.",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VanitySubdomainBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ActivateVanitySubdomainResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to activate project vanity subdomain configuration"
            }
          },
          "tags": [
            "Domains"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/upgrade": {
        "post": {
          "operationId": "v1-upgrade-postgres-version",
          "summary": "[Beta] Upgrades the project's Postgres version",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeDatabaseBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectUpgradeInitiateResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to initiate project upgrade"
            }
          },
          "tags": [
            "Projects"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/upgrade/eligibility": {
        "get": {
          "operationId": "v1-get-postgres-upgrade-eligibility",
          "summary": "[Beta] Returns the project's eligibility for upgrades",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectUpgradeEligibilityResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to determine project upgrade eligibility"
            }
          },
          "tags": [
            "Projects"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/upgrade/status": {
        "get": {
          "operationId": "v1-get-postgres-upgrade-status",
          "summary": "[Beta] Gets the latest status of the project's upgrade",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "tracking_id",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatabaseUpgradeStatusResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to retrieve project upgrade status"
            }
          },
          "tags": [
            "Projects"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/readonly": {
        "get": {
          "operationId": "v1-get-readonly-mode-status",
          "summary": "Returns project's readonly mode status",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ReadOnlyStatusResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Failed to get project readonly mode status"
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/readonly/temporary-disable": {
        "post": {
          "operationId": "v1-disable-readonly-mode-temporarily",
          "summary": "Disables project's readonly mode for the next 15 minutes",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "201": {
              "description": ""
            },
            "500": {
              "description": "Failed to disable project's readonly mode"
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/read-replicas/setup": {
        "post": {
          "operationId": "v1-setup-a-read-replica",
          "summary": "[Beta] Set up a read replica",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetUpReadReplicaBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": ""
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to set up read replica"
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/read-replicas/remove": {
        "post": {
          "operationId": "v1-remove-a-read-replica",
          "summary": "[Beta] Remove a read replica",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveReadReplicaBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": ""
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to remove read replica"
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/health": {
        "get": {
          "operationId": "v1-get-services-health",
          "summary": "Gets project's service health status",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "timeout_ms",
              "required": false,
              "in": "query",
              "schema": {
                "minimum": 0,
                "maximum": 10000,
                "type": "integer"
              }
            },
            {
              "name": "services",
              "required": true,
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "auth",
                    "db",
                    "pooler",
                    "realtime",
                    "rest",
                    "storage"
                  ]
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/V1ServiceHealthResponse"
                    }
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to retrieve project's service health status"
            }
          },
          "tags": [
            "Projects"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/config/storage": {
        "get": {
          "operationId": "v1-get-storage-config",
          "summary": "Gets project's storage config",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StorageConfigResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to retrieve project's storage config"
            }
          },
          "tags": [
            "Storage"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "patch": {
          "operationId": "v1-update-storage-config",
          "summary": "Updates project's storage config",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateStorageConfigBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": ""
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to update project's storage config"
            }
          },
          "tags": [
            "Storage"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/config/database/postgres": {
        "get": {
          "operationId": "v1-get-postgres-config",
          "summary": "Gets project's Postgres config",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PostgresConfigResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Failed to retrieve project's Postgres config"
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "put": {
          "operationId": "v1-update-postgres-config",
          "summary": "Updates project's Postgres config",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePostgresConfigBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PostgresConfigResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to update project's Postgres config"
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/config/database/pgbouncer": {
        "get": {
          "operationId": "v1-get-project-pgbouncer-config",
          "summary": "Get project's pgbouncer config",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/V1PgbouncerConfigResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Failed to retrieve project's pgbouncer config"
            }
          },
          "tags": [
            "Database"
          ]
        }
      },
      "/v1/projects/{ref}/config/database/pooler": {
        "get": {
          "operationId": "v1-get-supavisor-config",
          "summary": "Gets project's supavisor config",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SupavisorConfigResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Failed to retrieve project's supavisor config"
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "patch": {
          "operationId": "v1-update-supavisor-config",
          "summary": "Updates project's supavisor config",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSupavisorConfigBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateSupavisorConfigResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to update project's supavisor config"
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/config/auth": {
        "get": {
          "operationId": "v1-get-auth-service-config",
          "summary": "Gets project's auth config",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthConfigResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to retrieve project's auth config"
            }
          },
          "tags": [
            "Auth"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "patch": {
          "operationId": "v1-update-auth-service-config",
          "summary": "Updates a project's auth config",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAuthConfigBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthConfigResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to update project's auth config"
            }
          },
          "tags": [
            "Auth"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/config/auth/third-party-auth": {
        "post": {
          "operationId": "createTPAForProject",
          "summary": "Creates a new third-party auth integration",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateThirdPartyAuthBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ThirdPartyAuth"
                  }
                }
              }
            },
            "403": {
              "description": ""
            }
          },
          "tags": [
            "Auth"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "get": {
          "operationId": "listTPAForProject",
          "summary": "[Alpha] Lists all third-party auth integrations",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ThirdPartyAuth"
                    }
                  }
                }
              }
            },
            "403": {
              "description": ""
            }
          },
          "tags": [
            "Auth"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/config/auth/third-party-auth/{tpa_id}": {
        "delete": {
          "operationId": "deleteTPAForProject",
          "summary": "[Alpha] Removes a third-party auth integration",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "tpa_id",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ThirdPartyAuth"
                  }
                }
              }
            },
            "403": {
              "description": ""
            }
          },
          "tags": [
            "Auth"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "get": {
          "operationId": "getTPAForProject",
          "summary": "[Alpha] Get a third-party integration",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "tpa_id",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ThirdPartyAuth"
                  }
                }
              }
            },
            "403": {
              "description": ""
            }
          },
          "tags": [
            "Auth"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/pause": {
        "post": {
          "operationId": "v1-pause-a-project",
          "summary": "Pauses the given project",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": ""
            },
            "403": {
              "description": ""
            }
          },
          "tags": [
            "Projects"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/restore": {
        "get": {
          "operationId": "v1-list-available-restore-versions",
          "summary": "Lists available restore versions for the given project",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetProjectAvailableRestoreVersionsResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            }
          },
          "tags": [
            "Projects"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "post": {
          "operationId": "v1-restore-a-project",
          "summary": "Restores the given project",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestoreProjectBodyDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": ""
            },
            "403": {
              "description": ""
            }
          },
          "tags": [
            "Projects"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/restore/cancel": {
        "post": {
          "operationId": "v1-cancel-a-project-restoration",
          "summary": "Cancels the given project restoration",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": ""
            },
            "403": {
              "description": ""
            }
          },
          "tags": [
            "Projects"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/analytics/endpoints/logs.all": {
        "get": {
          "operationId": "getLogs",
          "summary": "Gets project's logs",
          "parameters": [
            {
              "name": "iso_timestamp_end",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "iso_timestamp_start",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sql",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/V1AnalyticsResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            }
          },
          "tags": [
            "Analytics"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/database/query": {
        "post": {
          "operationId": "v1-run-a-query",
          "summary": "[Beta] Run sql query",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V1RunQueryBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to run sql query"
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/database/webhooks/enable": {
        "post": {
          "operationId": "v1-enable-database-webhook",
          "summary": "[Beta] Enables Database Webhooks on the project",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "201": {
              "description": ""
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to enable Database Webhooks on the project"
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/database/context": {
        "get": {
          "operationId": "getDatabaseMetadata",
          "summary": "Gets database metadata for the given project.",
          "description": "This is an **experimental** endpoint. It is subject to change or removal in future versions. Use it with caution, as it may not remain supported or stable.",
          "deprecated": true,
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetProjectDbMetadataResponseDto"
                  }
                }
              }
            },
            "403": {
              "description": ""
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/functions": {
        "get": {
          "operationId": "v1-list-all-functions",
          "summary": "List all functions",
          "description": "Returns all functions you've previously added to the specified project.",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FunctionResponse"
                    }
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to retrieve project's functions"
            }
          },
          "tags": [
            "Edge Functions"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "post": {
          "operationId": "v1-create-a-function",
          "summary": "Create a function",
          "description": "This endpoint is deprecated - use the deploy endpoint. Creates a function and adds it to the specified project.",
          "deprecated": true,
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "slug",
              "required": false,
              "in": "query",
              "schema": {
                "pattern": "/^[A-Za-z0-9_-]+$/",
                "type": "string"
              }
            },
            {
              "name": "name",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "verify_jwt",
              "required": false,
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "import_map",
              "required": false,
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "entrypoint_path",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "import_map_path",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V1CreateFunctionBody"
                }
              },
              "application/vnd.denoland.eszip": {
                "schema": {
                  "$ref": "#/components/schemas/V1CreateFunctionBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FunctionResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to create project's function"
            }
          },
          "tags": [
            "Edge Functions"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "put": {
          "operationId": "v1-bulk-update-functions",
          "summary": "Bulk update functions",
          "description": "Bulk update functions. It will create a new function or replace existing. The operation is idempotent. NOTE: You will need to manually bump the version.",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BulkUpdateFunctionBody"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkUpdateFunctionResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to update functions"
            }
          },
          "tags": [
            "Edge Functions"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/functions/deploy": {
        "post": {
          "operationId": "v1-deploy-a-function",
          "summary": "Deploy a function",
          "description": "A new endpoint to deploy functions. It will create if function does not exist.",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "slug",
              "required": false,
              "in": "query",
              "schema": {
                "pattern": "/^[A-Za-z0-9_-]+$/",
                "type": "string"
              }
            },
            {
              "name": "bundleOnly",
              "required": false,
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionDeployBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeployFunctionResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to deploy function"
            }
          },
          "tags": [
            "Edge Functions"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/functions/{function_slug}": {
        "get": {
          "operationId": "v1-get-a-function",
          "summary": "Retrieve a function",
          "description": "Retrieves a function with the specified slug and project.",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "function_slug",
              "required": true,
              "in": "path",
              "description": "Function slug",
              "schema": {
                "pattern": "/^[A-Za-z0-9_-]+$/",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FunctionSlugResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to retrieve function with given slug"
            }
          },
          "tags": [
            "Edge Functions"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "patch": {
          "operationId": "v1-update-a-function",
          "summary": "Update a function",
          "description": "Updates a function with the specified slug and project.",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "function_slug",
              "required": true,
              "in": "path",
              "description": "Function slug",
              "schema": {
                "pattern": "/^[A-Za-z0-9_-]+$/",
                "type": "string"
              }
            },
            {
              "name": "slug",
              "required": false,
              "in": "query",
              "schema": {
                "pattern": "/^[A-Za-z0-9_-]+$/",
                "type": "string"
              }
            },
            {
              "name": "name",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "verify_jwt",
              "required": false,
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "import_map",
              "required": false,
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "entrypoint_path",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "import_map_path",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V1UpdateFunctionBody"
                }
              },
              "application/vnd.denoland.eszip": {
                "schema": {
                  "$ref": "#/components/schemas/V1UpdateFunctionBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FunctionResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to update function with given slug"
            }
          },
          "tags": [
            "Edge Functions"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "delete": {
          "operationId": "v1-delete-a-function",
          "summary": "Delete a function",
          "description": "Deletes a function with the specified slug from the specified project.",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "function_slug",
              "required": true,
              "in": "path",
              "description": "Function slug",
              "schema": {
                "pattern": "/^[A-Za-z0-9_-]+$/",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": ""
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to delete function with given slug"
            }
          },
          "tags": [
            "Edge Functions"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/functions/{function_slug}/body": {
        "get": {
          "operationId": "v1-get-a-function-body",
          "summary": "Retrieve a function body",
          "description": "Retrieves a function body for the specified slug and project.",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "function_slug",
              "required": true,
              "in": "path",
              "description": "Function slug",
              "schema": {
                "pattern": "/^[A-Za-z0-9_-]+$/",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": ""
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to retrieve function body with given slug"
            }
          },
          "tags": [
            "Edge Functions"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/storage/buckets": {
        "get": {
          "operationId": "v1-list-all-buckets",
          "summary": "Lists all buckets",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/V1StorageBucketResponse"
                    }
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "500": {
              "description": "Failed to get list of buckets"
            }
          },
          "tags": [
            "Storage"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/config/auth/sso/providers": {
        "post": {
          "operationId": "v1-create-a-sso-provider",
          "summary": "Creates a new SSO provider",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProviderBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateProviderResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "404": {
              "description": "SAML 2.0 support is not enabled for this project"
            }
          },
          "tags": [
            "Auth"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "get": {
          "operationId": "v1-list-all-sso-provider",
          "summary": "Lists all SSO providers",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListProvidersResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "404": {
              "description": "SAML 2.0 support is not enabled for this project"
            }
          },
          "tags": [
            "Auth"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/config/auth/sso/providers/{provider_id}": {
        "get": {
          "operationId": "v1-get-a-sso-provider",
          "summary": "Gets a SSO provider by its UUID",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "provider_id",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetProviderResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "404": {
              "description": "Either SAML 2.0 was not enabled for this project, or the provider does not exist"
            }
          },
          "tags": [
            "Auth"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "put": {
          "operationId": "v1-update-a-sso-provider",
          "summary": "Updates a SSO provider by its UUID",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "provider_id",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProviderBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateProviderResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "404": {
              "description": "Either SAML 2.0 was not enabled for this project, or the provider does not exist"
            }
          },
          "tags": [
            "Auth"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "delete": {
          "operationId": "v1-delete-a-sso-provider",
          "summary": "Removes a SSO provider by its UUID",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            },
            {
              "name": "provider_id",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeleteProviderResponse"
                  }
                }
              }
            },
            "403": {
              "description": ""
            },
            "404": {
              "description": "Either SAML 2.0 was not enabled for this project, or the provider does not exist"
            }
          },
          "tags": [
            "Auth"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/database/backups": {
        "get": {
          "operationId": "v1-list-all-backups",
          "summary": "Lists all backups",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/V1BackupsResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Failed to get backups"
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/projects/{ref}/database/backups/restore-pitr": {
        "post": {
          "operationId": "v1-restore-pitr-backup",
          "summary": "Restores a PITR backup for a database",
          "parameters": [
            {
              "name": "ref",
              "required": true,
              "in": "path",
              "description": "Project ref",
              "schema": {
                "minLength": 20,
                "maxLength": 20,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V1RestorePitrBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": ""
            }
          },
          "tags": [
            "Database"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/organizations/{slug}/members": {
        "get": {
          "operationId": "v1-list-organization-members",
          "summary": "List members of an organization",
          "parameters": [
            {
              "name": "slug",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/V1OrganizationMemberResponse"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Organizations"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/v1/organizations/{slug}": {
        "get": {
          "operationId": "v1-get-an-organization",
          "summary": "Gets information about the organization",
          "parameters": [
            {
              "name": "slug",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/V1OrganizationSlugResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "Organizations"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      }
    },
    "info": {
      "title": "Supabase API (v1)",
      "description": "Supabase API generated from the OpenAPI specification.\u003Cbr\u003EVisit [https://supabase.com/docs](https://supabase.com/docs) for a complete documentation.",
      "version": "1.0.0",
      "contact": {

      }
    },
    "tags": [
      {
        "name": "Auth",
        "description": "Auth related endpoints"
      },
      {
        "name": "Database",
        "description": "Database related endpoints"
      },
      {
        "name": "Domains",
        "description": "Domains related endpoints"
      },
      {
        "name": "Edge Functions",
        "description": "Edge related endpoints"
      },
      {
        "name": "Environments",
        "description": "Environments related endpoints"
      },
      {
        "name": "OAuth",
        "description": "OAuth related endpoints"
      },
      {
        "name": "Organizations",
        "description": "Organizations related endpoints"
      },
      {
        "name": "Projects",
        "description": "Projects related endpoints"
      },
      {
        "name": "Rest",
        "description": "Rest related endpoints"
      },
      {
        "name": "Secrets",
        "description": "Secrets related endpoints"
      },
      {
        "name": "Storage",
        "description": "Storage related endpoints"
      }
    ],
    "servers": [],
    "components": {
      "securitySchemes": {
        "bearer": {
          "scheme": "bearer",
          "bearerFormat": "JWT",
          "type": "http"
        }
      },
      "schemas": {
        "BranchDetailResponse": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "INACTIVE",
                "ACTIVE_HEALTHY",
                "ACTIVE_UNHEALTHY",
                "COMING_UP",
                "UNKNOWN",
                "GOING_DOWN",
                "INIT_FAILED",
                "REMOVED",
                "RESTORING",
                "UPGRADING",
                "PAUSING",
                "RESTORE_FAILED",
                "RESTARTING",
                "PAUSE_FAILED",
                "RESIZING"
              ]
            },
            "db_port": {
              "type": "integer"
            },
            "ref": {
              "type": "string"
            },
            "postgres_version": {
              "type": "string"
            },
            "postgres_engine": {
              "type": "string"
            },
            "release_channel": {
              "type": "string"
            },
            "db_host": {
              "type": "string"
            },
            "db_user": {
              "type": "string"
            },
            "db_pass": {
              "type": "string"
            },
            "jwt_secret": {
              "type": "string"
            }
          },
          "required": [
            "status",
            "db_port",
            "ref",
            "postgres_version",
            "postgres_engine",
            "release_channel",
            "db_host"
          ]
        },
        "UpdateBranchBody": {
          "type": "object",
          "properties": {
            "reset_on_push": {
              "type": "boolean",
              "deprecated": true,
              "description": "This field is deprecated and will be ignored. Use v1-reset-a-branch endpoint directly instead."
            },
            "branch_name": {
              "type": "string"
            },
            "git_branch": {
              "type": "string"
            },
            "persistent": {
              "type": "boolean"
            },
            "status": {
              "type": "string",
              "enum": [
                "CREATING_PROJECT",
                "RUNNING_MIGRATIONS",
                "MIGRATIONS_PASSED",
                "MIGRATIONS_FAILED",
                "FUNCTIONS_DEPLOYED",
                "FUNCTIONS_FAILED"
              ]
            }
          }
        },
        "BranchResponse": {
          "type": "object",
          "properties": {
            "pr_number": {
              "type": "integer",
              "format": "int32"
            },
            "latest_check_run_id": {
              "type": "number",
              "deprecated": true,
              "description": "This field is deprecated and will not be populated."
            },
            "status": {
              "type": "string",
              "enum": [
                "CREATING_PROJECT",
                "RUNNING_MIGRATIONS",
                "MIGRATIONS_PASSED",
                "MIGRATIONS_FAILED",
                "FUNCTIONS_DEPLOYED",
                "FUNCTIONS_FAILED"
              ]
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "project_ref": {
              "type": "string"
            },
            "parent_project_ref": {
              "type": "string"
            },
            "is_default": {
              "type": "boolean"
            },
            "git_branch": {
              "type": "string"
            },
            "persistent": {
              "type": "boolean"
            },
            "created_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            }
          },
          "required": [
            "status",
            "id",
            "name",
            "project_ref",
            "parent_project_ref",
            "is_default",
            "persistent",
            "created_at",
            "updated_at"
          ]
        },
        "BranchDeleteResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            }
          },
          "required": [
            "message"
          ]
        },
        "BranchUpdateResponse": {
          "type": "object",
          "properties": {
            "workflow_run_id": {
              "type": "string"
            },
            "message": {
              "type": "string"
            }
          },
          "required": [
            "workflow_run_id",
            "message"
          ]
        },
        "V1DatabaseResponse": {
          "type": "object",
          "properties": {
            "host": {
              "type": "string",
              "description": "Database host"
            },
            "version": {
              "type": "string",
              "description": "Database version"
            },
            "postgres_engine": {
              "type": "string",
              "description": "Database engine"
            },
            "release_channel": {
              "type": "string",
              "description": "Release channel"
            }
          },
          "required": [
            "host",
            "version",
            "postgres_engine",
            "release_channel"
          ]
        },
        "V1ProjectWithDatabaseResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of your project"
            },
            "organization_id": {
              "type": "string",
              "description": "Slug of your organization"
            },
            "name": {
              "type": "string",
              "description": "Name of your project"
            },
            "region": {
              "type": "string",
              "description": "Region of your project",
              "example": "us-east-1"
            },
            "created_at": {
              "type": "string",
              "description": "Creation timestamp",
              "example": "2023-03-29T16:32:59Z"
            },
            "status": {
              "type": "string",
              "enum": [
                "INACTIVE",
                "ACTIVE_HEALTHY",
                "ACTIVE_UNHEALTHY",
                "COMING_UP",
                "UNKNOWN",
                "GOING_DOWN",
                "INIT_FAILED",
                "REMOVED",
                "RESTORING",
                "UPGRADING",
                "PAUSING",
                "RESTORE_FAILED",
                "RESTARTING",
                "PAUSE_FAILED",
                "RESIZING"
              ]
            },
            "database": {
              "$ref": "#/components/schemas/V1DatabaseResponse"
            }
          },
          "required": [
            "id",
            "organization_id",
            "name",
            "region",
            "created_at",
            "status",
            "database"
          ]
        },
        "V1CreateProjectBodyDto": {
          "type": "object",
          "properties": {
            "db_pass": {
              "type": "string",
              "description": "Database password"
            },
            "name": {
              "type": "string",
              "description": "Name of your project"
            },
            "organization_id": {
              "type": "string",
              "description": "Slug of your organization"
            },
            "plan": {
              "type": "string",
              "enum": [
                "free",
                "pro"
              ],
              "deprecated": true,
              "description": "Subscription Plan is now set on organization level and is ignored in this request"
            },
            "region": {
              "type": "string",
              "description": "Region you want your server to reside in",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ap-east-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-northeast-2",
                "ap-southeast-2",
                "eu-west-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-central-1",
                "eu-central-2",
                "ca-central-1",
                "ap-south-1",
                "sa-east-1"
              ]
            },
            "kps_enabled": {
              "type": "boolean",
              "deprecated": true,
              "description": "This field is deprecated and is ignored in this request"
            },
            "desired_instance_size": {
              "type": "string",
              "enum": [
                "micro",
                "small",
                "medium",
                "large",
                "xlarge",
                "2xlarge",
                "4xlarge",
                "8xlarge",
                "12xlarge",
                "16xlarge"
              ]
            },
            "template_url": {
              "type": "string",
              "format": "uri",
              "description": "Template URL used to create the project from the CLI.",
              "example": "https://github.com/supabase/supabase/tree/master/examples/slack-clone/nextjs-slack-clone"
            }
          },
          "required": [
            "db_pass",
            "name",
            "organization_id",
            "region"
          ],
          "additionalProperties": false,
          "hideDefinitions": [
            "release_channel",
            "postgres_engine"
          ]
        },
        "V1ProjectResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of your project"
            },
            "organization_id": {
              "type": "string",
              "description": "Slug of your organization"
            },
            "name": {
              "type": "string",
              "description": "Name of your project"
            },
            "region": {
              "type": "string",
              "description": "Region of your project",
              "example": "us-east-1"
            },
            "created_at": {
              "type": "string",
              "description": "Creation timestamp",
              "example": "2023-03-29T16:32:59Z"
            },
            "status": {
              "type": "string",
              "enum": [
                "INACTIVE",
                "ACTIVE_HEALTHY",
                "ACTIVE_UNHEALTHY",
                "COMING_UP",
                "UNKNOWN",
                "GOING_DOWN",
                "INIT_FAILED",
                "REMOVED",
                "RESTORING",
                "UPGRADING",
                "PAUSING",
                "RESTORE_FAILED",
                "RESTARTING",
                "PAUSE_FAILED",
                "RESIZING"
              ]
            }
          },
          "required": [
            "id",
            "organization_id",
            "name",
            "region",
            "created_at",
            "status"
          ]
        },
        "OrganizationResponseV1": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ]
        },
        "CreateOrganizationV1Dto": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "additionalProperties": false
        },
        "OAuthTokenBody": {
          "type": "object",
          "properties": {
            "grant_type": {
              "enum": [
                "authorization_code",
                "refresh_token"
              ],
              "type": "string"
            },
            "client_id": {
              "type": "string"
            },
            "client_secret": {
              "type": "string"
            },
            "code": {
              "type": "string"
            },
            "code_verifier": {
              "type": "string"
            },
            "redirect_uri": {
              "type": "string"
            },
            "refresh_token": {
              "type": "string"
            }
          },
          "required": [
            "grant_type",
            "client_id",
            "client_secret"
          ]
        },
        "OAuthTokenResponse": {
          "type": "object",
          "properties": {
            "expires_in": {
              "type": "integer",
              "format": "int64"
            },
            "token_type": {
              "type": "string",
              "enum": [
                "Bearer"
              ]
            },
            "access_token": {
              "type": "string"
            },
            "refresh_token": {
              "type": "string"
            }
          },
          "required": [
            "expires_in",
            "token_type",
            "access_token",
            "refresh_token"
          ]
        },
        "OAuthRevokeTokenBodyDto": {
          "type": "object",
          "properties": {
            "client_id": {
              "type": "string",
              "format": "uuid"
            },
            "client_secret": {
              "type": "string"
            },
            "refresh_token": {
              "type": "string"
            }
          },
          "required": [
            "client_id",
            "client_secret",
            "refresh_token"
          ],
          "additionalProperties": false
        },
        "SnippetProject": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ]
        },
        "SnippetUser": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "username": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "username"
          ]
        },
        "SnippetMeta": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "inserted_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "sql"
              ]
            },
            "visibility": {
              "type": "string",
              "enum": [
                "user",
                "project",
                "org",
                "public"
              ]
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string",
              "nullable": true
            },
            "project": {
              "$ref": "#/components/schemas/SnippetProject"
            },
            "owner": {
              "$ref": "#/components/schemas/SnippetUser"
            },
            "updated_by": {
              "$ref": "#/components/schemas/SnippetUser"
            }
          },
          "required": [
            "id",
            "inserted_at",
            "updated_at",
            "type",
            "visibility",
            "name",
            "description",
            "project",
            "owner",
            "updated_by"
          ]
        },
        "SnippetList": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SnippetMeta"
              }
            },
            "cursor": {
              "type": "string"
            }
          },
          "required": [
            "data"
          ]
        },
        "SnippetContent": {
          "type": "object",
          "properties": {
            "favorite": {
              "type": "boolean"
            },
            "schema_version": {
              "type": "string"
            },
            "sql": {
              "type": "string"
            }
          },
          "required": [
            "favorite",
            "schema_version",
            "sql"
          ]
        },
        "SnippetResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "inserted_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "sql"
              ]
            },
            "visibility": {
              "enum": [
                "user",
                "project",
                "org",
                "public"
              ],
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string",
              "nullable": true
            },
            "project": {
              "$ref": "#/components/schemas/SnippetProject"
            },
            "owner": {
              "$ref": "#/components/schemas/SnippetUser"
            },
            "updated_by": {
              "$ref": "#/components/schemas/SnippetUser"
            },
            "content": {
              "$ref": "#/components/schemas/SnippetContent"
            }
          },
          "required": [
            "id",
            "inserted_at",
            "updated_at",
            "type",
            "visibility",
            "name",
            "description",
            "project",
            "owner",
            "updated_by",
            "content"
          ]
        },
        "ApiKeySecretJWTTemplate": {
          "type": "object",
          "properties": {
            "role": {
              "type": "string"
            }
          },
          "required": [
            "role"
          ]
        },
        "ApiKeyResponse": {
          "type": "object",
          "properties": {
            "type": {
              "nullable": true,
              "type": "string",
              "enum": [
                "publishable",
                "secret",
                "legacy"
              ]
            },
            "name": {
              "type": "string"
            },
            "api_key": {
              "type": "string"
            },
            "id": {
              "type": "string",
              "nullable": true
            },
            "prefix": {
              "type": "string",
              "nullable": true
            },
            "description": {
              "type": "string",
              "nullable": true
            },
            "hash": {
              "type": "string",
              "nullable": true
            },
            "secret_jwt_template": {
              "nullable": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiKeySecretJWTTemplate"
                }
              ]
            },
            "inserted_at": {
              "type": "string",
              "nullable": true
            },
            "updated_at": {
              "type": "string",
              "nullable": true
            }
          },
          "required": [
            "name",
            "api_key"
          ]
        },
        "CreateApiKeyBody": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "publishable",
                "secret"
              ],
              "type": "string"
            },
            "description": {
              "type": "string",
              "nullable": true
            },
            "secret_jwt_template": {
              "nullable": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiKeySecretJWTTemplate"
                }
              ]
            }
          },
          "required": [
            "type"
          ]
        },
        "UpdateApiKeyBody": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "nullable": true
            },
            "secret_jwt_template": {
              "nullable": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiKeySecretJWTTemplate"
                }
              ]
            }
          }
        },
        "DesiredInstanceSize": {
          "type": "string",
          "enum": [
            "micro",
            "small",
            "medium",
            "large",
            "xlarge",
            "2xlarge",
            "4xlarge",
            "8xlarge",
            "12xlarge",
            "16xlarge"
          ]
        },
        "ReleaseChannel": {
          "type": "string",
          "enum": [
            "internal",
            "alpha",
            "beta",
            "ga",
            "withdrawn",
            "preview"
          ]
        },
        "PostgresEngine": {
          "type": "string",
          "description": "Postgres engine version. If not provided, the latest version will be used.",
          "enum": [
            "15",
            "17-oriole"
          ]
        },
        "CreateBranchBody": {
          "type": "object",
          "properties": {
            "desired_instance_size": {
              "$ref": "#/components/schemas/DesiredInstanceSize"
            },
            "release_channel": {
              "$ref": "#/components/schemas/ReleaseChannel"
            },
            "postgres_engine": {
              "$ref": "#/components/schemas/PostgresEngine"
            },
            "branch_name": {
              "type": "string"
            },
            "git_branch": {
              "type": "string"
            },
            "persistent": {
              "type": "boolean"
            },
            "region": {
              "type": "string"
            }
          },
          "required": [
            "branch_name"
          ]
        },
        "ValidationRecord": {
          "type": "object",
          "properties": {
            "txt_name": {
              "type": "string"
            },
            "txt_value": {
              "type": "string"
            }
          },
          "required": [
            "txt_name",
            "txt_value"
          ]
        },
        "ValidationError": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            }
          },
          "required": [
            "message"
          ]
        },
        "SslValidation": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string"
            },
            "validation_records": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationRecord"
              }
            },
            "validation_errors": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "required": [
            "status",
            "validation_records"
          ]
        },
        "OwnershipVerification": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "type",
            "name",
            "value"
          ]
        },
        "CustomHostnameDetails": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "hostname": {
              "type": "string"
            },
            "ssl": {
              "$ref": "#/components/schemas/SslValidation"
            },
            "ownership_verification": {
              "$ref": "#/components/schemas/OwnershipVerification"
            },
            "custom_origin_server": {
              "type": "string"
            },
            "verification_errors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "status": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "hostname",
            "ssl",
            "ownership_verification",
            "custom_origin_server",
            "status"
          ]
        },
        "CfResponse": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "errors": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "messages": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "result": {
              "$ref": "#/components/schemas/CustomHostnameDetails"
            }
          },
          "required": [
            "success",
            "errors",
            "messages",
            "result"
          ]
        },
        "UpdateCustomHostnameResponse": {
          "type": "object",
          "properties": {
            "status": {
              "enum": [
                "1_not_started",
                "2_initiated",
                "3_challenge_verified",
                "4_origin_setup_completed",
                "5_services_reconfigured"
              ],
              "type": "string"
            },
            "custom_hostname": {
              "type": "string"
            },
            "data": {
              "$ref": "#/components/schemas/CfResponse"
            }
          },
          "required": [
            "status",
            "custom_hostname",
            "data"
          ]
        },
        "UpdateCustomHostnameBody": {
          "type": "object",
          "properties": {
            "custom_hostname": {
              "type": "string"
            }
          },
          "required": [
            "custom_hostname"
          ]
        },
        "NetworkBanResponse": {
          "type": "object",
          "properties": {
            "banned_ipv4_addresses": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "banned_ipv4_addresses"
          ]
        },
        "RemoveNetworkBanRequest": {
          "type": "object",
          "properties": {
            "ipv4_addresses": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "ipv4_addresses"
          ]
        },
        "NetworkRestrictionsRequest": {
          "type": "object",
          "properties": {
            "dbAllowedCidrs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "dbAllowedCidrsV6": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "NetworkRestrictionsResponse": {
          "type": "object",
          "properties": {
            "entitlement": {
              "enum": [
                "disallowed",
                "allowed"
              ],
              "type": "string"
            },
            "config": {
              "$ref": "#/components/schemas/NetworkRestrictionsRequest"
            },
            "old_config": {
              "$ref": "#/components/schemas/NetworkRestrictionsRequest"
            },
            "status": {
              "enum": [
                "stored",
                "applied"
              ],
              "type": "string"
            }
          },
          "required": [
            "entitlement",
            "config",
            "status"
          ]
        },
        "PgsodiumConfigResponse": {
          "type": "object",
          "properties": {
            "root_key": {
              "type": "string"
            }
          },
          "required": [
            "root_key"
          ]
        },
        "UpdatePgsodiumConfigBody": {
          "type": "object",
          "properties": {
            "root_key": {
              "type": "string"
            }
          },
          "required": [
            "root_key"
          ]
        },
        "PostgrestConfigWithJWTSecretResponse": {
          "type": "object",
          "properties": {
            "max_rows": {
              "type": "integer"
            },
            "db_pool": {
              "type": "integer",
              "nullable": true,
              "description": "If `null`, the value is automatically configured based on compute size."
            },
            "db_schema": {
              "type": "string"
            },
            "db_extra_search_path": {
              "type": "string"
            },
            "jwt_secret": {
              "type": "string"
            }
          },
          "required": [
            "max_rows",
            "db_pool",
            "db_schema",
            "db_extra_search_path"
          ]
        },
        "UpdatePostgrestConfigBody": {
          "type": "object",
          "properties": {
            "max_rows": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1000000
            },
            "db_pool": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1000
            },
            "db_extra_search_path": {
              "type": "string"
            },
            "db_schema": {
              "type": "string"
            }
          }
        },
        "V1PostgrestConfigResponse": {
          "type": "object",
          "properties": {
            "max_rows": {
              "type": "integer"
            },
            "db_pool": {
              "type": "integer",
              "nullable": true,
              "description": "If `null`, the value is automatically configured based on compute size."
            },
            "db_schema": {
              "type": "string"
            },
            "db_extra_search_path": {
              "type": "string"
            }
          },
          "required": [
            "max_rows",
            "db_pool",
            "db_schema",
            "db_extra_search_path"
          ]
        },
        "V1ProjectRefResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "ref": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "ref",
            "name"
          ]
        },
        "SecretResponse": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "value"
          ]
        },
        "CreateSecretBody": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "maxLength": 256,
              "pattern": "/^(?!SUPABASE_).*/",
              "description": "Secret name must not start with the SUPABASE_ prefix.",
              "example": "string"
            },
            "value": {
              "type": "string",
              "maxLength": 24576
            }
          },
          "required": [
            "name",
            "value"
          ]
        },
        "SslEnforcements": {
          "type": "object",
          "properties": {
            "database": {
              "type": "boolean"
            }
          },
          "required": [
            "database"
          ]
        },
        "SslEnforcementResponse": {
          "type": "object",
          "properties": {
            "currentConfig": {
              "$ref": "#/components/schemas/SslEnforcements"
            },
            "appliedSuccessfully": {
              "type": "boolean"
            }
          },
          "required": [
            "currentConfig",
            "appliedSuccessfully"
          ]
        },
        "SslEnforcementRequest": {
          "type": "object",
          "properties": {
            "requestedConfig": {
              "$ref": "#/components/schemas/SslEnforcements"
            }
          },
          "required": [
            "requestedConfig"
          ]
        },
        "TypescriptResponse": {
          "type": "object",
          "properties": {
            "types": {
              "type": "string"
            }
          },
          "required": [
            "types"
          ]
        },
        "VanitySubdomainConfigResponse": {
          "type": "object",
          "properties": {
            "status": {
              "enum": [
                "not-used",
                "custom-domain-used",
                "active"
              ],
              "type": "string"
            },
            "custom_domain": {
              "type": "string"
            }
          },
          "required": [
            "status"
          ]
        },
        "VanitySubdomainBody": {
          "type": "object",
          "properties": {
            "vanity_subdomain": {
              "type": "string"
            }
          },
          "required": [
            "vanity_subdomain"
          ]
        },
        "SubdomainAvailabilityResponse": {
          "type": "object",
          "properties": {
            "available": {
              "type": "boolean"
            }
          },
          "required": [
            "available"
          ]
        },
        "ActivateVanitySubdomainResponse": {
          "type": "object",
          "properties": {
            "custom_domain": {
              "type": "string"
            }
          },
          "required": [
            "custom_domain"
          ]
        },
        "UpgradeDatabaseBody": {
          "type": "object",
          "properties": {
            "release_channel": {
              "$ref": "#/components/schemas/ReleaseChannel"
            },
            "target_version": {
              "type": "string"
            }
          },
          "required": [
            "release_channel",
            "target_version"
          ]
        },
        "ProjectUpgradeInitiateResponse": {
          "type": "object",
          "properties": {
            "tracking_id": {
              "type": "string"
            }
          },
          "required": [
            "tracking_id"
          ]
        },
        "ProjectVersion": {
          "type": "object",
          "properties": {
            "postgres_version": {
              "$ref": "#/components/schemas/PostgresEngine"
            },
            "release_channel": {
              "$ref": "#/components/schemas/ReleaseChannel"
            },
            "app_version": {
              "type": "string"
            }
          },
          "required": [
            "postgres_version",
            "release_channel",
            "app_version"
          ]
        },
        "ProjectUpgradeEligibilityResponse": {
          "type": "object",
          "properties": {
            "current_app_version_release_channel": {
              "$ref": "#/components/schemas/ReleaseChannel"
            },
            "duration_estimate_hours": {
              "type": "integer"
            },
            "eligible": {
              "type": "boolean"
            },
            "current_app_version": {
              "type": "string"
            },
            "latest_app_version": {
              "type": "string"
            },
            "target_upgrade_versions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ProjectVersion"
              }
            },
            "potential_breaking_changes": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "legacy_auth_custom_roles": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "extension_dependent_objects": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "current_app_version_release_channel",
            "duration_estimate_hours",
            "eligible",
            "current_app_version",
            "latest_app_version",
            "target_upgrade_versions",
            "potential_breaking_changes",
            "legacy_auth_custom_roles",
            "extension_dependent_objects"
          ]
        },
        "DatabaseUpgradeStatus": {
          "type": "object",
          "properties": {
            "target_version": {
              "type": "integer"
            },
            "status": {
              "enum": [0, 1, 2],
              "type": "integer"
            },
            "initiated_at": {
              "type": "string"
            },
            "latest_status_at": {
              "type": "string"
            },
            "error": {
              "type": "string",
              "enum": [
                "1_upgraded_instance_launch_failed",
                "2_volume_detachchment_from_upgraded_instance_failed",
                "3_volume_attachment_to_original_instance_failed",
                "4_data_upgrade_initiation_failed",
                "5_data_upgrade_completion_failed",
                "6_volume_detachchment_from_original_instance_failed",
                "7_volume_attachment_to_upgraded_instance_failed",
                "8_upgrade_completion_failed",
                "9_post_physical_backup_failed"
              ]
            },
            "progress": {
              "type": "string",
              "enum": [
                "0_requested",
                "1_started",
                "2_launched_upgraded_instance",
                "3_detached_volume_from_upgraded_instance",
                "4_attached_volume_to_original_instance",
                "5_initiated_data_upgrade",
                "6_completed_data_upgrade",
                "7_detached_volume_from_original_instance",
                "8_attached_volume_to_upgraded_instance",
                "9_completed_upgrade",
                "10_completed_post_physical_backup"
              ]
            }
          },
          "required": [
            "target_version",
            "status",
            "initiated_at",
            "latest_status_at"
          ]
        },
        "DatabaseUpgradeStatusResponse": {
          "type": "object",
          "properties": {
            "databaseUpgradeStatus": {
              "nullable": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatabaseUpgradeStatus"
                }
              ]
            }
          },
          "required": [
            "databaseUpgradeStatus"
          ]
        },
        "ReadOnlyStatusResponse": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "override_enabled": {
              "type": "boolean"
            },
            "override_active_until": {
              "type": "string"
            }
          },
          "required": [
            "enabled",
            "override_enabled",
            "override_active_until"
          ]
        },
        "SetUpReadReplicaBody": {
          "type": "object",
          "properties": {
            "read_replica_region": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ap-east-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-northeast-2",
                "ap-southeast-2",
                "eu-west-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-central-1",
                "eu-central-2",
                "ca-central-1",
                "ap-south-1",
                "sa-east-1"
              ],
              "description": "Region you want your read replica to reside in",
              "example": "us-east-1"
            }
          },
          "required": [
            "read_replica_region"
          ]
        },
        "RemoveReadReplicaBody": {
          "type": "object",
          "properties": {
            "database_identifier": {
              "type": "string"
            }
          },
          "required": [
            "database_identifier"
          ]
        },
        "AuthHealthResponse": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "enum": [
                "GoTrue"
              ]
            }
          },
          "required": [
            "name"
          ]
        },
        "RealtimeHealthResponse": {
          "type": "object",
          "properties": {
            "connected_cluster": {
              "type": "integer"
            }
          },
          "required": [
            "connected_cluster"
          ]
        },
        "V1ServiceHealthResponse": {
          "type": "object",
          "properties": {
            "info": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AuthHealthResponse"
                },
                {
                  "$ref": "#/components/schemas/RealtimeHealthResponse"
                }
              ]
            },
            "name": {
              "enum": [
                "auth",
                "db",
                "pooler",
                "realtime",
                "rest",
                "storage"
              ],
              "type": "string"
            },
            "healthy": {
              "type": "boolean"
            },
            "status": {
              "enum": [
                "COMING_UP",
                "ACTIVE_HEALTHY",
                "UNHEALTHY"
              ],
              "type": "string"
            },
            "error": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "healthy",
            "status"
          ]
        },
        "StorageFeatureImageTransformation": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "enabled"
          ]
        },
        "StorageFeatureS3Protocol": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "enabled"
          ]
        },
        "StorageFeatures": {
          "type": "object",
          "properties": {
            "imageTransformation": {
              "$ref": "#/components/schemas/StorageFeatureImageTransformation"
            },
            "s3Protocol": {
              "$ref": "#/components/schemas/StorageFeatureS3Protocol"
            }
          },
          "required": [
            "imageTransformation",
            "s3Protocol"
          ]
        },
        "StorageConfigResponse": {
          "type": "object",
          "properties": {
            "fileSizeLimit": {
              "type": "integer",
              "format": "int64"
            },
            "features": {
              "$ref": "#/components/schemas/StorageFeatures"
            }
          },
          "required": [
            "fileSizeLimit",
            "features"
          ]
        },
        "UpdateStorageConfigBody": {
          "type": "object",
          "properties": {
            "fileSizeLimit": {
              "type": "integer",
              "minimum": 0,
              "maximum": 53687091200,
              "format": "int64"
            },
            "features": {
              "$ref": "#/components/schemas/StorageFeatures"
            }
          }
        },
        "PostgresConfigResponse": {
          "type": "object",
          "properties": {
            "effective_cache_size": {
              "type": "string"
            },
            "logical_decoding_work_mem": {
              "type": "string"
            },
            "maintenance_work_mem": {
              "type": "string"
            },
            "track_activity_query_size": {
              "type": "string"
            },
            "max_connections": {
              "type": "integer",
              "minimum": 1,
              "maximum": 262143
            },
            "max_locks_per_transaction": {
              "type": "integer",
              "minimum": 10,
              "maximum": 2147483640
            },
            "max_parallel_maintenance_workers": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1024
            },
            "max_parallel_workers": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1024
            },
            "max_parallel_workers_per_gather": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1024
            },
            "max_replication_slots": {
              "type": "integer"
            },
            "max_slot_wal_keep_size": {
              "type": "string"
            },
            "max_standby_archive_delay": {
              "type": "string"
            },
            "max_standby_streaming_delay": {
              "type": "string"
            },
            "max_wal_size": {
              "type": "string"
            },
            "max_wal_senders": {
              "type": "integer"
            },
            "max_worker_processes": {
              "type": "integer",
              "minimum": 0,
              "maximum": 262143
            },
            "shared_buffers": {
              "type": "string"
            },
            "statement_timeout": {
              "type": "string"
            },
            "track_commit_timestamp": {
              "type": "boolean"
            },
            "wal_keep_size": {
              "type": "string"
            },
            "wal_sender_timeout": {
              "type": "string"
            },
            "work_mem": {
              "type": "string"
            },
            "session_replication_role": {
              "enum": [
                "origin",
                "replica",
                "local"
              ],
              "type": "string"
            }
          }
        },
        "UpdatePostgresConfigBody": {
          "type": "object",
          "properties": {
            "effective_cache_size": {
              "type": "string"
            },
            "logical_decoding_work_mem": {
              "type": "string"
            },
            "maintenance_work_mem": {
              "type": "string"
            },
            "track_activity_query_size": {
              "type": "string"
            },
            "max_connections": {
              "type": "integer",
              "minimum": 1,
              "maximum": 262143
            },
            "max_locks_per_transaction": {
              "type": "integer",
              "minimum": 10,
              "maximum": 2147483640
            },
            "max_parallel_maintenance_workers": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1024
            },
            "max_parallel_workers": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1024
            },
            "max_parallel_workers_per_gather": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1024
            },
            "max_replication_slots": {
              "type": "integer"
            },
            "max_slot_wal_keep_size": {
              "type": "string"
            },
            "max_standby_archive_delay": {
              "type": "string"
            },
            "max_standby_streaming_delay": {
              "type": "string"
            },
            "max_wal_size": {
              "type": "string"
            },
            "max_wal_senders": {
              "type": "integer"
            },
            "max_worker_processes": {
              "type": "integer",
              "minimum": 0,
              "maximum": 262143
            },
            "shared_buffers": {
              "type": "string"
            },
            "statement_timeout": {
              "type": "string"
            },
            "track_commit_timestamp": {
              "type": "boolean"
            },
            "wal_keep_size": {
              "type": "string"
            },
            "wal_sender_timeout": {
              "type": "string"
            },
            "work_mem": {
              "type": "string"
            },
            "restart_database": {
              "type": "boolean"
            },
            "session_replication_role": {
              "enum": [
                "origin",
                "replica",
                "local"
              ],
              "type": "string"
            }
          }
        },
        "V1PgbouncerConfigResponse": {
          "type": "object",
          "properties": {
            "pool_mode": {
              "type": "string",
              "enum": [
                "transaction",
                "session",
                "statement"
              ]
            },
            "default_pool_size": {
              "type": "number"
            },
            "ignore_startup_parameters": {
              "type": "string"
            },
            "max_client_conn": {
              "type": "number"
            },
            "connection_string": {
              "type": "string"
            }
          }
        },
        "SupavisorConfigResponse": {
          "type": "object",
          "properties": {
            "database_type": {
              "type": "string",
              "enum": [
                "PRIMARY",
                "READ_REPLICA"
              ]
            },
            "db_port": {
              "type": "integer"
            },
            "default_pool_size": {
              "type": "integer",
              "nullable": true
            },
            "max_client_conn": {
              "type": "integer",
              "nullable": true
            },
            "identifier": {
              "type": "string"
            },
            "is_using_scram_auth": {
              "type": "boolean"
            },
            "db_user": {
              "type": "string"
            },
            "db_host": {
              "type": "string"
            },
            "db_name": {
              "type": "string"
            },
            "connectionString": {
              "type": "string"
            },
            "pool_mode": {
              "enum": [
                "transaction",
                "session"
              ],
              "type": "string"
            }
          },
          "required": [
            "database_type",
            "db_port",
            "default_pool_size",
            "max_client_conn",
            "identifier",
            "is_using_scram_auth",
            "db_user",
            "db_host",
            "db_name",
            "connectionString",
            "pool_mode"
          ]
        },
        "UpdateSupavisorConfigBody": {
          "type": "object",
          "properties": {
            "default_pool_size": {
              "type": "integer",
              "nullable": true,
              "minimum": 0,
              "maximum": 1000
            },
            "pool_mode": {
              "enum": [
                "transaction",
                "session"
              ],
              "type": "string",
              "deprecated": true,
              "description": "This field is deprecated and is ignored in this request"
            }
          }
        },
        "UpdateSupavisorConfigResponse": {
          "type": "object",
          "properties": {
            "default_pool_size": {
              "type": "integer",
              "nullable": true
            },
            "pool_mode": {
              "enum": [
                "transaction",
                "session"
              ],
              "type": "string"
            }
          },
          "required": [
            "default_pool_size",
            "pool_mode"
          ]
        },
        "AuthConfigResponse": {
          "type": "object",
          "properties": {
            "api_max_request_duration": {
              "type": "integer",
              "nullable": true
            },
            "db_max_pool_size": {
              "type": "integer",
              "nullable": true
            },
            "jwt_exp": {
              "type": "integer",
              "nullable": true
            },
            "mailer_otp_exp": {
              "type": "integer"
            },
            "mailer_otp_length": {
              "type": "integer",
              "nullable": true
            },
            "mfa_max_enrolled_factors": {
              "type": "integer",
              "nullable": true
            },
            "mfa_phone_otp_length": {
              "type": "integer"
            },
            "mfa_phone_max_frequency": {
              "type": "integer",
              "nullable": true
            },
            "password_min_length": {
              "type": "integer",
              "nullable": true
            },
            "rate_limit_anonymous_users": {
              "type": "integer",
              "nullable": true
            },
            "rate_limit_email_sent": {
              "type": "integer",
              "nullable": true
            },
            "rate_limit_sms_sent": {
              "type": "integer",
              "nullable": true
            },
            "rate_limit_token_refresh": {
              "type": "integer",
              "nullable": true
            },
            "rate_limit_verify": {
              "type": "integer",
              "nullable": true
            },
            "rate_limit_otp": {
              "type": "integer",
              "nullable": true
            },
            "security_refresh_token_reuse_interval": {
              "type": "integer",
              "nullable": true
            },
            "sessions_inactivity_timeout": {
              "type": "integer",
              "nullable": true
            },
            "sessions_timebox": {
              "type": "integer",
              "nullable": true
            },
            "sms_max_frequency": {
              "type": "integer",
              "nullable": true
            },
            "sms_otp_exp": {
              "type": "integer",
              "nullable": true
            },
            "sms_otp_length": {
              "type": "integer"
            },
            "smtp_max_frequency": {
              "type": "integer",
              "nullable": true
            },
            "disable_signup": {
              "type": "boolean",
              "nullable": true
            },
            "external_anonymous_users_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_apple_additional_client_ids": {
              "type": "string",
              "nullable": true
            },
            "external_apple_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_apple_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_apple_secret": {
              "type": "string",
              "nullable": true
            },
            "external_azure_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_azure_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_azure_secret": {
              "type": "string",
              "nullable": true
            },
            "external_azure_url": {
              "type": "string",
              "nullable": true
            },
            "external_bitbucket_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_bitbucket_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_bitbucket_secret": {
              "type": "string",
              "nullable": true
            },
            "external_discord_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_discord_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_discord_secret": {
              "type": "string",
              "nullable": true
            },
            "external_email_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_facebook_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_facebook_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_facebook_secret": {
              "type": "string",
              "nullable": true
            },
            "external_figma_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_figma_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_figma_secret": {
              "type": "string",
              "nullable": true
            },
            "external_github_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_github_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_github_secret": {
              "type": "string",
              "nullable": true
            },
            "external_gitlab_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_gitlab_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_gitlab_secret": {
              "type": "string",
              "nullable": true
            },
            "external_gitlab_url": {
              "type": "string",
              "nullable": true
            },
            "external_google_additional_client_ids": {
              "type": "string",
              "nullable": true
            },
            "external_google_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_google_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_google_secret": {
              "type": "string",
              "nullable": true
            },
            "external_google_skip_nonce_check": {
              "type": "boolean",
              "nullable": true
            },
            "external_kakao_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_kakao_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_kakao_secret": {
              "type": "string",
              "nullable": true
            },
            "external_keycloak_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_keycloak_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_keycloak_secret": {
              "type": "string",
              "nullable": true
            },
            "external_keycloak_url": {
              "type": "string",
              "nullable": true
            },
            "external_linkedin_oidc_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_linkedin_oidc_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_linkedin_oidc_secret": {
              "type": "string",
              "nullable": true
            },
            "external_slack_oidc_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_slack_oidc_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_slack_oidc_secret": {
              "type": "string",
              "nullable": true
            },
            "external_notion_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_notion_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_notion_secret": {
              "type": "string",
              "nullable": true
            },
            "external_phone_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_slack_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_slack_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_slack_secret": {
              "type": "string",
              "nullable": true
            },
            "external_spotify_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_spotify_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_spotify_secret": {
              "type": "string",
              "nullable": true
            },
            "external_twitch_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_twitch_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_twitch_secret": {
              "type": "string",
              "nullable": true
            },
            "external_twitter_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_twitter_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_twitter_secret": {
              "type": "string",
              "nullable": true
            },
            "external_workos_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_workos_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_workos_secret": {
              "type": "string",
              "nullable": true
            },
            "external_workos_url": {
              "type": "string",
              "nullable": true
            },
            "external_zoom_client_id": {
              "type": "string",
              "nullable": true
            },
            "external_zoom_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "external_zoom_secret": {
              "type": "string",
              "nullable": true
            },
            "hook_custom_access_token_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "hook_custom_access_token_uri": {
              "type": "string",
              "nullable": true
            },
            "hook_custom_access_token_secrets": {
              "type": "string",
              "nullable": true
            },
            "hook_mfa_verification_attempt_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "hook_mfa_verification_attempt_uri": {
              "type": "string",
              "nullable": true
            },
            "hook_mfa_verification_attempt_secrets": {
              "type": "string",
              "nullable": true
            },
            "hook_password_verification_attempt_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "hook_password_verification_attempt_uri": {
              "type": "string",
              "nullable": true
            },
            "hook_password_verification_attempt_secrets": {
              "type": "string",
              "nullable": true
            },
            "hook_send_sms_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "hook_send_sms_uri": {
              "type": "string",
              "nullable": true
            },
            "hook_send_sms_secrets": {
              "type": "string",
              "nullable": true
            },
            "hook_send_email_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "hook_send_email_uri": {
              "type": "string",
              "nullable": true
            },
            "hook_send_email_secrets": {
              "type": "string",
              "nullable": true
            },
            "mailer_allow_unverified_email_sign_ins": {
              "type": "boolean",
              "nullable": true
            },
            "mailer_autoconfirm": {
              "type": "boolean",
              "nullable": true
            },
            "mailer_secure_email_change_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "mailer_subjects_confirmation": {
              "type": "string",
              "nullable": true
            },
            "mailer_subjects_email_change": {
              "type": "string",
              "nullable": true
            },
            "mailer_subjects_invite": {
              "type": "string",
              "nullable": true
            },
            "mailer_subjects_magic_link": {
              "type": "string",
              "nullable": true
            },
            "mailer_subjects_reauthentication": {
              "type": "string",
              "nullable": true
            },
            "mailer_subjects_recovery": {
              "type": "string",
              "nullable": true
            },
            "mailer_templates_confirmation_content": {
              "type": "string",
              "nullable": true
            },
            "mailer_templates_email_change_content": {
              "type": "string",
              "nullable": true
            },
            "mailer_templates_invite_content": {
              "type": "string",
              "nullable": true
            },
            "mailer_templates_magic_link_content": {
              "type": "string",
              "nullable": true
            },
            "mailer_templates_reauthentication_content": {
              "type": "string",
              "nullable": true
            },
            "mailer_templates_recovery_content": {
              "type": "string",
              "nullable": true
            },
            "mfa_totp_enroll_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "mfa_totp_verify_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "mfa_phone_enroll_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "mfa_phone_verify_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "mfa_web_authn_enroll_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "mfa_web_authn_verify_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "mfa_phone_template": {
              "type": "string",
              "nullable": true
            },
            "password_hibp_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "password_required_characters": {
              "type": "string",
              "nullable": true
            },
            "refresh_token_rotation_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "saml_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "saml_external_url": {
              "type": "string",
              "nullable": true
            },
            "saml_allow_encrypted_assertions": {
              "type": "boolean",
              "nullable": true
            },
            "security_captcha_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "security_captcha_provider": {
              "type": "string",
              "nullable": true
            },
            "security_captcha_secret": {
              "type": "string",
              "nullable": true
            },
            "security_manual_linking_enabled": {
              "type": "boolean",
              "nullable": true
            },
            "security_update_password_require_reauthentication": {
              "type": "boolean",
              "nullable": true
            },
            "sessions_single_per_user": {
              "type": "boolean",
              "nullable": true
            },
            "sessions_tags": {
              "type": "string",
              "nullable": true
            },
            "site_url": {
              "type": "string",
              "nullable": true
            },
            "sms_autoconfirm": {
              "type": "boolean",
              "nullable": true
            },
            "sms_messagebird_access_key": {
              "type": "string",
              "nullable": true
            },
            "sms_messagebird_originator": {
              "type": "string",
              "nullable": true
            },
            "sms_provider": {
              "type": "string",
              "nullable": true
            },
            "sms_template": {
              "type": "string",
              "nullable": true
            },
            "sms_test_otp": {
              "type": "string",
              "nullable": true
            },
            "sms_test_otp_valid_until": {
              "type": "string",
              "nullable": true
            },
            "sms_textlocal_api_key": {
              "type": "string",
              "nullable": true
            },
            "sms_textlocal_sender": {
              "type": "string",
              "nullable": true
            },
            "sms_twilio_account_sid": {
              "type": "string",
              "nullable": true
            },
            "sms_twilio_auth_token": {
              "type": "string",
              "nullable": true
            },
            "sms_twilio_content_sid": {
              "type": "string",
              "nullable": true
            },
            "sms_twilio_message_service_sid": {
              "type": "string",
              "nullable": true
            },
            "sms_twilio_verify_account_sid": {
              "type": "string",
              "nullable": true
            },
            "sms_twilio_verify_auth_token": {
              "type": "string",
              "nullable": true
            },
            "sms_twilio_verify_message_service_sid": {
              "type": "string",
              "nullable": true
            },
            "sms_vonage_api_key": {
              "type": "string",
              "nullable": true
            },
            "sms_vonage_api_secret": {
              "type": "string",
              "nullable": true
            },
            "sms_vonage_from": {
              "type": "string",
              "nullable": true
            },
            "smtp_admin_email": {
              "type": "string",
              "nullable": true
            },
            "smtp_host": {
              "type": "string",
              "nullable": true
            },
            "smtp_pass": {
              "type": "string",
              "nullable": true
            },
            "smtp_port": {
              "type": "string",
              "nullable": true
            },
            "smtp_sender_name": {
              "type": "string",
              "nullable": true
            },
            "smtp_user": {
              "type": "string",
              "nullable": true
            },
            "uri_allow_list": {
              "type": "string",
              "nullable": true
            }
          },
          "required": [
            "api_max_request_duration",
            "db_max_pool_size",
            "jwt_exp",
            "mailer_otp_exp",
            "mailer_otp_length",
            "mfa_max_enrolled_factors",
            "mfa_phone_otp_length",
            "mfa_phone_max_frequency",
            "password_min_length",
            "rate_limit_anonymous_users",
            "rate_limit_email_sent",
            "rate_limit_sms_sent",
            "rate_limit_token_refresh",
            "rate_limit_verify",
            "rate_limit_otp",
            "security_refresh_token_reuse_interval",
            "sessions_inactivity_timeout",
            "sessions_timebox",
            "sms_max_frequency",
            "sms_otp_exp",
            "sms_otp_length",
            "smtp_max_frequency",
            "disable_signup",
            "external_anonymous_users_enabled",
            "external_apple_additional_client_ids",
            "external_apple_client_id",
            "external_apple_enabled",
            "external_apple_secret",
            "external_azure_client_id",
            "external_azure_enabled",
            "external_azure_secret",
            "external_azure_url",
            "external_bitbucket_client_id",
            "external_bitbucket_enabled",
            "external_bitbucket_secret",
            "external_discord_client_id",
            "external_discord_enabled",
            "external_discord_secret",
            "external_email_enabled",
            "external_facebook_client_id",
            "external_facebook_enabled",
            "external_facebook_secret",
            "external_figma_client_id",
            "external_figma_enabled",
            "external_figma_secret",
            "external_github_client_id",
            "external_github_enabled",
            "external_github_secret",
            "external_gitlab_client_id",
            "external_gitlab_enabled",
            "external_gitlab_secret",
            "external_gitlab_url",
            "external_google_additional_client_ids",
            "external_google_client_id",
            "external_google_enabled",
            "external_google_secret",
            "external_google_skip_nonce_check",
            "external_kakao_client_id",
            "external_kakao_enabled",
            "external_kakao_secret",
            "external_keycloak_client_id",
            "external_keycloak_enabled",
            "external_keycloak_secret",
            "external_keycloak_url",
            "external_linkedin_oidc_client_id",
            "external_linkedin_oidc_enabled",
            "external_linkedin_oidc_secret",
            "external_slack_oidc_client_id",
            "external_slack_oidc_enabled",
            "external_slack_oidc_secret",
            "external_notion_client_id",
            "external_notion_enabled",
            "external_notion_secret",
            "external_phone_enabled",
            "external_slack_client_id",
            "external_slack_enabled",
            "external_slack_secret",
            "external_spotify_client_id",
            "external_spotify_enabled",
            "external_spotify_secret",
            "external_twitch_client_id",
            "external_twitch_enabled",
            "external_twitch_secret",
            "external_twitter_client_id",
            "external_twitter_enabled",
            "external_twitter_secret",
            "external_workos_client_id",
            "external_workos_enabled",
            "external_workos_secret",
            "external_workos_url",
            "external_zoom_client_id",
            "external_zoom_enabled",
            "external_zoom_secret",
            "hook_custom_access_token_enabled",
            "hook_custom_access_token_uri",
            "hook_custom_access_token_secrets",
            "hook_mfa_verification_attempt_enabled",
            "hook_mfa_verification_attempt_uri",
            "hook_mfa_verification_attempt_secrets",
            "hook_password_verification_attempt_enabled",
            "hook_password_verification_attempt_uri",
            "hook_password_verification_attempt_secrets",
            "hook_send_sms_enabled",
            "hook_send_sms_uri",
            "hook_send_sms_secrets",
            "hook_send_email_enabled",
            "hook_send_email_uri",
            "hook_send_email_secrets",
            "mailer_allow_unverified_email_sign_ins",
            "mailer_autoconfirm",
            "mailer_secure_email_change_enabled",
            "mailer_subjects_confirmation",
            "mailer_subjects_email_change",
            "mailer_subjects_invite",
            "mailer_subjects_magic_link",
            "mailer_subjects_reauthentication",
            "mailer_subjects_recovery",
            "mailer_templates_confirmation_content",
            "mailer_templates_email_change_content",
            "mailer_templates_invite_content",
            "mailer_templates_magic_link_content",
            "mailer_templates_reauthentication_content",
            "mailer_templates_recovery_content",
            "mfa_totp_enroll_enabled",
            "mfa_totp_verify_enabled",
            "mfa_phone_enroll_enabled",
            "mfa_phone_verify_enabled",
            "mfa_web_authn_enroll_enabled",
            "mfa_web_authn_verify_enabled",
            "mfa_phone_template",
            "password_hibp_enabled",
            "password_required_characters",
            "refresh_token_rotation_enabled",
            "saml_enabled",
            "saml_external_url",
            "saml_allow_encrypted_assertions",
            "security_captcha_enabled",
            "security_captcha_provider",
            "security_captcha_secret",
            "security_manual_linking_enabled",
            "security_update_password_require_reauthentication",
            "sessions_single_per_user",
            "sessions_tags",
            "site_url",
            "sms_autoconfirm",
            "sms_messagebird_access_key",
            "sms_messagebird_originator",
            "sms_provider",
            "sms_template",
            "sms_test_otp",
            "sms_test_otp_valid_until",
            "sms_textlocal_api_key",
            "sms_textlocal_sender",
            "sms_twilio_account_sid",
            "sms_twilio_auth_token",
            "sms_twilio_content_sid",
            "sms_twilio_message_service_sid",
            "sms_twilio_verify_account_sid",
            "sms_twilio_verify_auth_token",
            "sms_twilio_verify_message_service_sid",
            "sms_vonage_api_key",
            "sms_vonage_api_secret",
            "sms_vonage_from",
            "smtp_admin_email",
            "smtp_host",
            "smtp_pass",
            "smtp_port",
            "smtp_sender_name",
            "smtp_user",
            "uri_allow_list"
          ]
        },
        "UpdateAuthConfigBody": {
          "type": "object",
          "properties": {
            "jwt_exp": {
              "type": "integer",
              "minimum": 0,
              "maximum": 604800
            },
            "smtp_max_frequency": {
              "type": "integer",
              "minimum": 0,
              "maximum": 32767
            },
            "mfa_max_enrolled_factors": {
              "type": "integer",
              "minimum": 0,
              "maximum": 2147483647
            },
            "sessions_timebox": {
              "type": "integer",
              "minimum": 0
            },
            "sessions_inactivity_timeout": {
              "type": "integer",
              "minimum": 0
            },
            "rate_limit_anonymous_users": {
              "type": "integer",
              "minimum": 1,
              "maximum": 2147483647
            },
            "rate_limit_email_sent": {
              "type": "integer",
              "minimum": 1,
              "maximum": 2147483647
            },
            "rate_limit_sms_sent": {
              "type": "integer",
              "minimum": 1,
              "maximum": 2147483647
            },
            "rate_limit_verify": {
              "type": "integer",
              "minimum": 1,
              "maximum": 2147483647
            },
            "rate_limit_token_refresh": {
              "type": "integer",
              "minimum": 1,
              "maximum": 2147483647
            },
            "rate_limit_otp": {
              "type": "integer",
              "minimum": 1,
              "maximum": 2147483647
            },
            "password_min_length": {
              "type": "integer",
              "minimum": 6,
              "maximum": 32767
            },
            "security_refresh_token_reuse_interval": {
              "type": "integer",
              "minimum": 0,
              "maximum": 2147483647
            },
            "mailer_otp_exp": {
              "type": "integer",
              "minimum": 0,
              "maximum": 2147483647
            },
            "mailer_otp_length": {
              "type": "integer",
              "minimum": 6,
              "maximum": 10
            },
            "sms_max_frequency": {
              "type": "integer",
              "minimum": 0,
              "maximum": 32767
            },
            "sms_otp_exp": {
              "type": "integer",
              "minimum": 0,
              "maximum": 2147483647
            },
            "sms_otp_length": {
              "type": "integer",
              "minimum": 0,
              "maximum": 32767
            },
            "db_max_pool_size": {
              "type": "integer"
            },
            "api_max_request_duration": {
              "type": "integer"
            },
            "mfa_phone_max_frequency": {
              "type": "integer",
              "minimum": 0,
              "maximum": 32767
            },
            "mfa_phone_otp_length": {
              "type": "integer",
              "minimum": 0,
              "maximum": 32767
            },
            "site_url": {
              "type": "string",
              "pattern": "/^[^,]+$/"
            },
            "disable_signup": {
              "type": "boolean"
            },
            "smtp_admin_email": {
              "type": "string"
            },
            "smtp_host": {
              "type": "string"
            },
            "smtp_port": {
              "type": "string"
            },
            "smtp_user": {
              "type": "string"
            },
            "smtp_pass": {
              "type": "string"
            },
            "smtp_sender_name": {
              "type": "string"
            },
            "mailer_allow_unverified_email_sign_ins": {
              "type": "boolean"
            },
            "mailer_autoconfirm": {
              "type": "boolean"
            },
            "mailer_subjects_invite": {
              "type": "string"
            },
            "mailer_subjects_confirmation": {
              "type": "string"
            },
            "mailer_subjects_recovery": {
              "type": "string"
            },
            "mailer_subjects_email_change": {
              "type": "string"
            },
            "mailer_subjects_magic_link": {
              "type": "string"
            },
            "mailer_subjects_reauthentication": {
              "type": "string"
            },
            "mailer_templates_invite_content": {
              "type": "string"
            },
            "mailer_templates_confirmation_content": {
              "type": "string"
            },
            "mailer_templates_recovery_content": {
              "type": "string"
            },
            "mailer_templates_email_change_content": {
              "type": "string"
            },
            "mailer_templates_magic_link_content": {
              "type": "string"
            },
            "mailer_templates_reauthentication_content": {
              "type": "string"
            },
            "uri_allow_list": {
              "type": "string"
            },
            "external_anonymous_users_enabled": {
              "type": "boolean"
            },
            "external_email_enabled": {
              "type": "boolean"
            },
            "external_phone_enabled": {
              "type": "boolean"
            },
            "saml_enabled": {
              "type": "boolean"
            },
            "saml_external_url": {
              "type": "string",
              "pattern": "/^[^,]+$/"
            },
            "security_captcha_enabled": {
              "type": "boolean"
            },
            "security_captcha_provider": {
              "type": "string"
            },
            "security_captcha_secret": {
              "type": "string"
            },
            "sessions_single_per_user": {
              "type": "boolean"
            },
            "sessions_tags": {
              "type": "string",
              "pattern": "/^\\s*([a-z0-9_-]+(\\s*,+\\s*)?)*\\s*$/i"
            },
            "mailer_secure_email_change_enabled": {
              "type": "boolean"
            },
            "refresh_token_rotation_enabled": {
              "type": "boolean"
            },
            "password_hibp_enabled": {
              "type": "boolean"
            },
            "password_required_characters": {
              "type": "string",
              "enum": [
                "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789",
                "abcdefghijklmnopqrstuvwxyz:ABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789",
                "abcdefghijklmnopqrstuvwxyz:ABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789:!@#$%^&*()_+-=[]{};'\\\\:\"|\u003C\u003E?,./`~",
                ""
              ]
            },
            "security_manual_linking_enabled": {
              "type": "boolean"
            },
            "security_update_password_require_reauthentication": {
              "type": "boolean"
            },
            "sms_autoconfirm": {
              "type": "boolean"
            },
            "sms_provider": {
              "type": "string"
            },
            "sms_messagebird_access_key": {
              "type": "string"
            },
            "sms_messagebird_originator": {
              "type": "string"
            },
            "sms_test_otp": {
              "type": "string",
              "pattern": "/^([0-9]{1,15}=[0-9]+,?)*$/"
            },
            "sms_test_otp_valid_until": {
              "type": "string"
            },
            "sms_textlocal_api_key": {
              "type": "string"
            },
            "sms_textlocal_sender": {
              "type": "string"
            },
            "sms_twilio_account_sid": {
              "type": "string"
            },
            "sms_twilio_auth_token": {
              "type": "string"
            },
            "sms_twilio_content_sid": {
              "type": "string"
            },
            "sms_twilio_message_service_sid": {
              "type": "string"
            },
            "sms_twilio_verify_account_sid": {
              "type": "string"
            },
            "sms_twilio_verify_auth_token": {
              "type": "string"
            },
            "sms_twilio_verify_message_service_sid": {
              "type": "string"
            },
            "sms_vonage_api_key": {
              "type": "string"
            },
            "sms_vonage_api_secret": {
              "type": "string"
            },
            "sms_vonage_from": {
              "type": "string"
            },
            "sms_template": {
              "type": "string"
            },
            "hook_mfa_verification_attempt_enabled": {
              "type": "boolean"
            },
            "hook_mfa_verification_attempt_uri": {
              "type": "string"
            },
            "hook_mfa_verification_attempt_secrets": {
              "type": "string"
            },
            "hook_password_verification_attempt_enabled": {
              "type": "boolean"
            },
            "hook_password_verification_attempt_uri": {
              "type": "string"
            },
            "hook_password_verification_attempt_secrets": {
              "type": "string"
            },
            "hook_custom_access_token_enabled": {
              "type": "boolean"
            },
            "hook_custom_access_token_uri": {
              "type": "string"
            },
            "hook_custom_access_token_secrets": {
              "type": "string"
            },
            "hook_send_sms_enabled": {
              "type": "boolean"
            },
            "hook_send_sms_uri": {
              "type": "string"
            },
            "hook_send_sms_secrets": {
              "type": "string"
            },
            "hook_send_email_enabled": {
              "type": "boolean"
            },
            "hook_send_email_uri": {
              "type": "string"
            },
            "hook_send_email_secrets": {
              "type": "string"
            },
            "external_apple_enabled": {
              "type": "boolean"
            },
            "external_apple_client_id": {
              "type": "string"
            },
            "external_apple_secret": {
              "type": "string"
            },
            "external_apple_additional_client_ids": {
              "type": "string"
            },
            "external_azure_enabled": {
              "type": "boolean"
            },
            "external_azure_client_id": {
              "type": "string"
            },
            "external_azure_secret": {
              "type": "string"
            },
            "external_azure_url": {
              "type": "string"
            },
            "external_bitbucket_enabled": {
              "type": "boolean"
            },
            "external_bitbucket_client_id": {
              "type": "string"
            },
            "external_bitbucket_secret": {
              "type": "string"
            },
            "external_discord_enabled": {
              "type": "boolean"
            },
            "external_discord_client_id": {
              "type": "string"
            },
            "external_discord_secret": {
              "type": "string"
            },
            "external_facebook_enabled": {
              "type": "boolean"
            },
            "external_facebook_client_id": {
              "type": "string"
            },
            "external_facebook_secret": {
              "type": "string"
            },
            "external_figma_enabled": {
              "type": "boolean"
            },
            "external_figma_client_id": {
              "type": "string"
            },
            "external_figma_secret": {
              "type": "string"
            },
            "external_github_enabled": {
              "type": "boolean"
            },
            "external_github_client_id": {
              "type": "string"
            },
            "external_github_secret": {
              "type": "string"
            },
            "external_gitlab_enabled": {
              "type": "boolean"
            },
            "external_gitlab_client_id": {
              "type": "string"
            },
            "external_gitlab_secret": {
              "type": "string"
            },
            "external_gitlab_url": {
              "type": "string"
            },
            "external_google_enabled": {
              "type": "boolean"
            },
            "external_google_client_id": {
              "type": "string"
            },
            "external_google_secret": {
              "type": "string"
            },
            "external_google_additional_client_ids": {
              "type": "string"
            },
            "external_google_skip_nonce_check": {
              "type": "boolean"
            },
            "external_kakao_enabled": {
              "type": "boolean"
            },
            "external_kakao_client_id": {
              "type": "string"
            },
            "external_kakao_secret": {
              "type": "string"
            },
            "external_keycloak_enabled": {
              "type": "boolean"
            },
            "external_keycloak_client_id": {
              "type": "string"
            },
            "external_keycloak_secret": {
              "type": "string"
            },
            "external_keycloak_url": {
              "type": "string"
            },
            "external_linkedin_oidc_enabled": {
              "type": "boolean"
            },
            "external_linkedin_oidc_client_id": {
              "type": "string"
            },
            "external_linkedin_oidc_secret": {
              "type": "string"
            },
            "external_slack_oidc_enabled": {
              "type": "boolean"
            },
            "external_slack_oidc_client_id": {
              "type": "string"
            },
            "external_slack_oidc_secret": {
              "type": "string"
            },
            "external_notion_enabled": {
              "type": "boolean"
            },
            "external_notion_client_id": {
              "type": "string"
            },
            "external_notion_secret": {
              "type": "string"
            },
            "external_slack_enabled": {
              "type": "boolean"
            },
            "external_slack_client_id": {
              "type": "string"
            },
            "external_slack_secret": {
              "type": "string"
            },
            "external_spotify_enabled": {
              "type": "boolean"
            },
            "external_spotify_client_id": {
              "type": "string"
            },
            "external_spotify_secret": {
              "type": "string"
            },
            "external_twitch_enabled": {
              "type": "boolean"
            },
            "external_twitch_client_id": {
              "type": "string"
            },
            "external_twitch_secret": {
              "type": "string"
            },
            "external_twitter_enabled": {
              "type": "boolean"
            },
            "external_twitter_client_id": {
              "type": "string"
            },
            "external_twitter_secret": {
              "type": "string"
            },
            "external_workos_enabled": {
              "type": "boolean"
            },
            "external_workos_client_id": {
              "type": "string"
            },
            "external_workos_secret": {
              "type": "string"
            },
            "external_workos_url": {
              "type": "string"
            },
            "external_zoom_enabled": {
              "type": "boolean"
            },
            "external_zoom_client_id": {
              "type": "string"
            },
            "external_zoom_secret": {
              "type": "string"
            },
            "mfa_totp_enroll_enabled": {
              "type": "boolean"
            },
            "mfa_totp_verify_enabled": {
              "type": "boolean"
            },
            "mfa_web_authn_enroll_enabled": {
              "type": "boolean"
            },
            "mfa_web_authn_verify_enabled": {
              "type": "boolean"
            },
            "mfa_phone_enroll_enabled": {
              "type": "boolean"
            },
            "mfa_phone_verify_enabled": {
              "type": "boolean"
            },
            "mfa_phone_template": {
              "type": "string"
            }
          }
        },
        "CreateThirdPartyAuthBody": {
          "type": "object",
          "properties": {
            "oidc_issuer_url": {
              "type": "string"
            },
            "jwks_url": {
              "type": "string"
            },
            "custom_jwks": {
              "type": "object"
            }
          }
        },
        "ThirdPartyAuth": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "oidc_issuer_url": {
              "type": "string",
              "nullable": true
            },
            "jwks_url": {
              "type": "string",
              "nullable": true
            },
            "custom_jwks": {
              "type": "object",
              "nullable": true
            },
            "resolved_jwks": {
              "type": "object",
              "nullable": true
            },
            "inserted_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            },
            "resolved_at": {
              "type": "string",
              "nullable": true
            }
          },
          "required": [
            "id",
            "type",
            "inserted_at",
            "updated_at"
          ]
        },
        "ProjectAvailableRestoreVersion": {
          "type": "object",
          "properties": {
            "version": {
              "type": "string"
            },
            "release_channel": {
              "type": "string",
              "enum": [
                "internal",
                "alpha",
                "beta",
                "ga",
                "withdrawn",
                "preview"
              ]
            },
            "postgres_engine": {
              "type": "string",
              "enum": [
                "13",
                "14",
                "15",
                "17",
                "17-oriole"
              ]
            }
          },
          "required": [
            "version",
            "release_channel",
            "postgres_engine"
          ]
        },
        "GetProjectAvailableRestoreVersionsResponse": {
          "type": "object",
          "properties": {
            "available_versions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ProjectAvailableRestoreVersion"
              }
            }
          },
          "required": [
            "available_versions"
          ]
        },
        "RestoreProjectBodyDto": {
          "type": "object",
          "properties": {

          },
          "hideDefinitions": [
            "release_channel",
            "postgres_engine"
          ]
        },
        "V1AnalyticsResponse": {
          "type": "object",
          "properties": {
            "error": {
              "oneOf": [
                {
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "domain": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string"
                          },
                          "locationType": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "reason": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "result": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        },
        "V1RunQueryBody": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string"
            }
          },
          "required": [
            "query"
          ]
        },
        "GetProjectDbMetadataResponseDto": {
          "type": "object",
          "properties": {
            "databases": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "schemas": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "additionalProperties": true
                    }
                  }
                },
                "required": [
                  "name",
                  "schemas"
                ],
                "additionalProperties": true
              }
            }
          },
          "required": [
            "databases"
          ]
        },
        "FunctionResponse": {
          "type": "object",
          "properties": {
            "version": {
              "type": "integer"
            },
            "created_at": {
              "type": "integer",
              "format": "int64"
            },
            "updated_at": {
              "type": "integer",
              "format": "int64"
            },
            "id": {
              "type": "string"
            },
            "slug": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "status": {
              "enum": [
                "ACTIVE",
                "REMOVED",
                "THROTTLED"
              ],
              "type": "string"
            },
            "verify_jwt": {
              "type": "boolean"
            },
            "import_map": {
              "type": "boolean"
            },
            "entrypoint_path": {
              "type": "string"
            },
            "import_map_path": {
              "type": "string"
            }
          },
          "required": [
            "version",
            "created_at",
            "updated_at",
            "id",
            "slug",
            "name",
            "status"
          ]
        },
        "V1CreateFunctionBody": {
          "type": "object",
          "properties": {
            "slug": {
              "type": "string",
              "pattern": "/^[A-Za-z0-9_-]+$/"
            },
            "name": {
              "type": "string"
            },
            "body": {
              "type": "string"
            },
            "verify_jwt": {
              "type": "boolean"
            }
          },
          "required": [
            "slug",
            "name",
            "body"
          ]
        },
        "BulkUpdateFunctionBody": {
          "type": "object",
          "properties": {
            "version": {
              "type": "integer"
            },
            "created_at": {
              "type": "integer",
              "format": "int64"
            },
            "id": {
              "type": "string"
            },
            "slug": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "status": {
              "enum": [
                "ACTIVE",
                "REMOVED",
                "THROTTLED"
              ],
              "type": "string"
            },
            "verify_jwt": {
              "type": "boolean"
            },
            "import_map": {
              "type": "boolean"
            },
            "entrypoint_path": {
              "type": "string"
            },
            "import_map_path": {
              "type": "string"
            }
          },
          "required": [
            "version",
            "id",
            "slug",
            "name",
            "status"
          ]
        },
        "BulkUpdateFunctionResponse": {
          "type": "object",
          "properties": {
            "functions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FunctionResponse"
              }
            }
          },
          "required": [
            "functions"
          ]
        },
        "FunctionDeployMetadata": {
          "type": "object",
          "properties": {
            "entrypoint_path": {
              "type": "string"
            },
            "import_map_path": {
              "type": "string"
            },
            "static_patterns": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "verify_jwt": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "entrypoint_path"
          ]
        },
        "FunctionDeployBody": {
          "type": "object",
          "properties": {
            "file": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            },
            "metadata": {
              "$ref": "#/components/schemas/FunctionDeployMetadata"
            }
          },
          "required": [
            "file",
            "metadata"
          ]
        },
        "DeployFunctionResponse": {
          "type": "object",
          "properties": {
            "version": {
              "type": "integer"
            },
            "created_at": {
              "type": "integer",
              "format": "int64"
            },
            "updated_at": {
              "type": "integer",
              "format": "int64"
            },
            "id": {
              "type": "string"
            },
            "slug": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "status": {
              "enum": [
                "ACTIVE",
                "REMOVED",
                "THROTTLED"
              ],
              "type": "string"
            },
            "verify_jwt": {
              "type": "boolean"
            },
            "import_map": {
              "type": "boolean"
            },
            "entrypoint_path": {
              "type": "string"
            },
            "import_map_path": {
              "type": "string"
            }
          },
          "required": [
            "version",
            "id",
            "slug",
            "name",
            "status"
          ]
        },
        "FunctionSlugResponse": {
          "type": "object",
          "properties": {
            "version": {
              "type": "integer"
            },
            "created_at": {
              "type": "integer",
              "format": "int64"
            },
            "updated_at": {
              "type": "integer",
              "format": "int64"
            },
            "id": {
              "type": "string"
            },
            "slug": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "status": {
              "enum": [
                "ACTIVE",
                "REMOVED",
                "THROTTLED"
              ],
              "type": "string"
            },
            "verify_jwt": {
              "type": "boolean"
            },
            "import_map": {
              "type": "boolean"
            },
            "entrypoint_path": {
              "type": "string"
            },
            "import_map_path": {
              "type": "string"
            }
          },
          "required": [
            "version",
            "created_at",
            "updated_at",
            "id",
            "slug",
            "name",
            "status"
          ]
        },
        "V1UpdateFunctionBody": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "body": {
              "type": "string"
            },
            "verify_jwt": {
              "type": "boolean"
            }
          }
        },
        "V1StorageBucketResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "owner": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            },
            "public": {
              "type": "boolean"
            }
          },
          "required": [
            "id",
            "name",
            "owner",
            "created_at",
            "updated_at",
            "public"
          ]
        },
        "AttributeValue": {
          "type": "object",
          "properties": {
            "default": {
              "oneOf": [
                {
                  "type": "object"
                },
                {
                  "type": "number"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "name": {
              "type": "string"
            },
            "names": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "array": {
              "type": "boolean"
            }
          }
        },
        "AttributeMapping": {
          "type": "object",
          "properties": {
            "keys": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/AttributeValue"
              }
            }
          },
          "required": [
            "keys"
          ]
        },
        "CreateProviderBody": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "saml"
              ],
              "description": "What type of provider will be created"
            },
            "metadata_xml": {
              "type": "string"
            },
            "metadata_url": {
              "type": "string"
            },
            "domains": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "attribute_mapping": {
              "$ref": "#/components/schemas/AttributeMapping"
            }
          },
          "required": [
            "type"
          ]
        },
        "SamlDescriptor": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "entity_id": {
              "type": "string"
            },
            "metadata_url": {
              "type": "string"
            },
            "metadata_xml": {
              "type": "string"
            },
            "attribute_mapping": {
              "$ref": "#/components/schemas/AttributeMapping"
            }
          },
          "required": [
            "id",
            "entity_id"
          ]
        },
        "Domain": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "domain": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            }
          },
          "required": [
            "id"
          ]
        },
        "CreateProviderResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "saml": {
              "$ref": "#/components/schemas/SamlDescriptor"
            },
            "domains": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Domain"
              }
            },
            "created_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            }
          },
          "required": [
            "id"
          ]
        },
        "Provider": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "saml": {
              "$ref": "#/components/schemas/SamlDescriptor"
            },
            "domains": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Domain"
              }
            },
            "created_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            }
          },
          "required": [
            "id"
          ]
        },
        "ListProvidersResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Provider"
              }
            }
          },
          "required": [
            "items"
          ]
        },
        "GetProviderResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "saml": {
              "$ref": "#/components/schemas/SamlDescriptor"
            },
            "domains": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Domain"
              }
            },
            "created_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            }
          },
          "required": [
            "id"
          ]
        },
        "UpdateProviderBody": {
          "type": "object",
          "properties": {
            "metadata_xml": {
              "type": "string"
            },
            "metadata_url": {
              "type": "string"
            },
            "domains": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "attribute_mapping": {
              "$ref": "#/components/schemas/AttributeMapping"
            }
          }
        },
        "UpdateProviderResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "saml": {
              "$ref": "#/components/schemas/SamlDescriptor"
            },
            "domains": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Domain"
              }
            },
            "created_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            }
          },
          "required": [
            "id"
          ]
        },
        "DeleteProviderResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "saml": {
              "$ref": "#/components/schemas/SamlDescriptor"
            },
            "domains": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Domain"
              }
            },
            "created_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            }
          },
          "required": [
            "id"
          ]
        },
        "V1Backup": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "COMPLETED",
                "FAILED",
                "PENDING",
                "REMOVED",
                "ARCHIVED",
                "CANCELLED"
              ]
            },
            "is_physical_backup": {
              "type": "boolean"
            },
            "inserted_at": {
              "type": "string"
            }
          },
          "required": [
            "status",
            "is_physical_backup",
            "inserted_at"
          ]
        },
        "V1PhysicalBackup": {
          "type": "object",
          "properties": {
            "earliest_physical_backup_date_unix": {
              "type": "integer",
              "format": "int64"
            },
            "latest_physical_backup_date_unix": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "V1BackupsResponse": {
          "type": "object",
          "properties": {
            "region": {
              "type": "string"
            },
            "walg_enabled": {
              "type": "boolean"
            },
            "pitr_enabled": {
              "type": "boolean"
            },
            "backups": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/V1Backup"
              }
            },
            "physical_backup_data": {
              "$ref": "#/components/schemas/V1PhysicalBackup"
            }
          },
          "required": [
            "region",
            "walg_enabled",
            "pitr_enabled",
            "backups",
            "physical_backup_data"
          ]
        },
        "V1RestorePitrBody": {
          "type": "object",
          "properties": {
            "recovery_time_target_unix": {
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          "required": [
            "recovery_time_target_unix"
          ]
        },
        "V1OrganizationMemberResponse": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string"
            },
            "user_name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "role_name": {
              "type": "string"
            },
            "mfa_enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "user_id",
            "user_name",
            "role_name",
            "mfa_enabled"
          ]
        },
        "BillingPlanId": {
          "type": "string",
          "enum": [
            "free",
            "pro",
            "team",
            "enterprise"
          ]
        },
        "V1OrganizationSlugResponse": {
          "type": "object",
          "properties": {
            "plan": {
              "$ref": "#/components/schemas/BillingPlanId"
            },
            "opt_in_tags": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "AI_SQL_GENERATOR_OPT_IN"
                ]
              }
            },
            "allowed_release_channels": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReleaseChannel"
              }
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "opt_in_tags",
            "allowed_release_channels",
            "id",
            "name"
          ]
        }
      }
    }
  }

================
File: supabase_mcp/api_manager/api_manager.py
================
from __future__ import annotations

import logging
from json import JSONDecodeError
from typing import Literal

import httpx
from httpx import HTTPStatusError
from tenacity import (
    after_log,
    before_log,
    retry,
    retry_if_exception_type,
    stop_after_attempt,
    wait_exponential,
)

from supabase_mcp.api_manager.api_safety_config import SafetyConfig, SafetyLevel
from supabase_mcp.api_manager.api_spec_manager import ApiSpecManager
from supabase_mcp.exceptions import (
    APIClientError,
    APIConnectionError,
    APIError,
    APIResponseError,
    SafetyError,
    UnexpectedError,
)
from supabase_mcp.logger import logger
from supabase_mcp.settings import settings


class SupabaseApiManager:
    """
    Manages the Supabase Management API.
    """

    _instance: SupabaseApiManager | None = None

    def __init__(self):
        self._mode: Literal[SafetyLevel.SAFE, SafetyLevel.UNSAFE] = SafetyLevel.SAFE  # Start in safe mode
        self.safety_config = SafetyConfig()
        self.spec_manager = None
        self.client = self.create_httpx_client()

    @classmethod
    async def create(cls) -> SupabaseApiManager:
        """Factory method to create and initialize an API manager"""
        manager = cls()
        manager.spec_manager = await ApiSpecManager.create()  # Use the running event loop
        return manager

    @classmethod
    async def get_manager(cls) -> SupabaseApiManager:
        """Get the singleton instance"""
        if cls._instance is None:
            cls._instance = await cls.create()
        return cls._instance

    def create_httpx_client(self) -> httpx.AsyncClient:
        """Creates a new httpx client"""
        client = httpx.AsyncClient(
            base_url="https://api.supabase.com",
            headers={"Authorization": f"Bearer {settings.supabase_access_token}", "Content-Type": "application/json"},
        )
        logger.info("Initialized Supabase Management API client")
        return client

    @property
    def mode(self) -> SafetyLevel:
        """Current operation mode"""
        return self._mode

    def switch_mode(self, mode: Literal[SafetyLevel.SAFE, SafetyLevel.UNSAFE]) -> None:
        """Switch between safe and unsafe operation modes"""
        self._mode = mode
        logger.info(f"Switched to {self._mode.value} mode")

    def get_spec(self) -> dict:
        """Retrieves enriched spec from spec manager"""
        return self.spec_manager.get_spec()

    def get_safety_rules(self) -> str:
        """
        Get safety rules with human-readable descriptions.

        Returns:
            str: Human readable safety rules explanation
        """
        blocked_ops = self.safety_config.BLOCKED_OPERATIONS
        unsafe_ops = self.safety_config.UNSAFE_OPERATIONS

        # Create human-readable explanations
        blocked_summary = "\n".join([f"- {method} {path}" for method, paths in blocked_ops.items() for path in paths])

        unsafe_summary = "\n".join([f"- {method} {path}" for method, paths in unsafe_ops.items() for path in paths])

        return f"""MCP Server Safety Rules:

            BLOCKED Operations (never allowed by the server):
            {blocked_summary}

            UNSAFE Operations (require unsafe mode):
            {unsafe_summary}

            Current mode: {self.mode}
            In safe mode, only read operations are allowed.
            Use live_dangerously() to enable unsafe mode for write operations.
            """

    @retry(
        retry=retry_if_exception_type(APIConnectionError),
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=4, max=15),
        before=before_log(logger, logging.DEBUG),
        after=after_log(logger, logging.DEBUG),
    )
    async def execute_request(
        self,
        method: str,
        path: str,
        request_params: dict | None = None,
        request_body: dict | None = None,
    ) -> dict:
        """
        Execute Management API request with safety validation.

        Args:
            method: HTTP method (GET, POST, etc)
            path: API path (/v1/projects etc)
            request_params: Optional query parameters as dict
            request_body: Optional request body as dict

        Returns:
            API response as dict

        Raises:
            SafetyError: If operation not allowed
            APIError: If request fails
        """
        # Replace project ref
        if "{ref}" in path:
            path = path.replace("{ref}", settings.supabase_project_ref)

        # Safety check
        allowed, reason, level = self.safety_config.is_operation_allowed(method, path)

        if level == SafetyLevel.BLOCKED:
            logger.warning(f"Blocked operation attempted: {method} {path}")
            raise SafetyError(
                f"Operation blocked: {reason}, check all safety rules here: {self.safety_config.list_all_rules()}"
            )

        if level == SafetyLevel.UNSAFE and self.mode == SafetyLevel.SAFE:
            logger.warning(f"Unsafe operation attempted in safe mode: {method} {path}")
            raise SafetyError(
                f"Operation requires YOLO mode: {reason}. Use live_dangerously() to enable YOLO mode. Check all safety rules here: {self.safety_config.list_all_rules()}"
            )

        # Execute request
        logger.info(
            "Executing API request: method=%s, url=%s, params=%s, request_body=%s",
            method,
            path,
            request_params,
            request_body,
        )
        try:
            # Build and send request
            request = self.client.build_request(method=method, url=path, params=request_params, json=request_body)
            response = await self.client.send(request)

            # Try to parse error response body if available
            error_body = None
            try:
                error_body = response.json() if response.content else None
            except JSONDecodeError:
                error_body = {"raw_content": response.text} if response.text else None

            # Handle API errors (4xx, 5xx)
            try:
                response.raise_for_status()
            except HTTPStatusError as e:
                error_message = f"API request failed: {e.response.status_code}"
                if error_body and isinstance(error_body, dict):
                    error_message = error_body.get("message", error_message)

                if 400 <= e.response.status_code < 500:
                    raise APIClientError(
                        message=error_message,
                        status_code=e.response.status_code,
                        response_body=error_body,
                    ) from e
            # Parse successful response
            try:
                return response.json()
            except JSONDecodeError as e:
                raise APIResponseError(
                    message=f"Failed to parse API response as JSON: {str(e)}",
                    status_code=response.status_code,
                    response_body={"raw_content": response.text},
                ) from e

        except (httpx.ConnectError, httpx.TimeoutException, httpx.NetworkError) as e:
            raise APIConnectionError(message=f"Connection error: {str(e)}") from e
        except Exception as e:
            if isinstance(e, (APIError, SafetyError)):
                raise
            logger.exception("Unexpected error during API request")
            raise UnexpectedError(message=f"Unexpected error during API request: {str(e)}") from e

    async def close(self):
        """Close HTTP client"""
        await self.client.aclose()

================
File: supabase_mcp/api_manager/api_safety_config.py
================
# supabase_mcp/api_manager/config.py
from enum import Enum


class SafetyLevel(Enum):
    SAFE = "safe"
    UNSAFE = "unsafe"
    BLOCKED = "blocked"


class SafetyConfig:
    """Configuration for Supabase Management API safety checks"""

    # Permanently blocked operations - never allowed
    BLOCKED_OPERATIONS = {
        "DELETE": [
            "/v1/projects/{ref}",  # Delete project
            "/v1/organizations/{slug}",  # Delete organization
            "/v1/projects/{ref}/database",  # Delete database
        ]
    }

    # Unsafe operations - require YOLO mode
    UNSAFE_OPERATIONS = {
        "POST": [
            "/v1/projects",  # Create project
            "/v1/organizations",  # Create org
            "/v1/projects/{ref}/restore",  # Restore project
            "/v1/projects/{ref}/pause",  # Pause project - can impact production
        ],
        "PATCH": [
            "/v1/projects/{ref}/config/auth",  # Auth config
            "/v1/projects/{ref}/config/database",  # DB config
            "/v1/projects/{ref}/config/pooler",  # Connection pooling changes - can impact DB performance
        ],
        "PUT": [
            "/v1/projects/{ref}/config/secrets",  # Update secrets
            "/v1/projects/{ref}/config/database/postgres",  # Postgres config changes - critical DB settings
        ],
    }

    def list_all_rules(self) -> str:
        """List all safety rules"""
        return f"Blocked operations: {self.BLOCKED_OPERATIONS}\nUnsafe operations: {self.UNSAFE_OPERATIONS}"

    def is_operation_allowed(self, method: str, path: str) -> tuple[bool, str, SafetyLevel]:
        """Determine operation safety level and status"""
        # Check blocked first
        if self._is_blocked(method, path):
            return False, "Operation is blocked for safety", SafetyLevel.BLOCKED

        # Check if unsafe
        if self._is_unsafe(method, path):
            return True, "Operation requires YOLO mode", SafetyLevel.UNSAFE

        # Default to safe
        return True, "Operation allowed", SafetyLevel.SAFE

    def _is_blocked(self, method: str, path: str) -> bool:
        return self._path_matches_patterns(method, path, self.BLOCKED_OPERATIONS)

    def _is_unsafe(self, method: str, path: str) -> bool:
        return self._path_matches_patterns(method, path, self.UNSAFE_OPERATIONS)

    def _path_matches_patterns(self, method: str, path: str, patterns: dict) -> bool:
        """Check if path matches any pattern"""
        if method not in patterns:
            return False

        for pattern in patterns[method]:
            if self._path_matches(pattern, path):
                return True
        return False

    def _path_matches(self, pattern: str, path: str) -> bool:
        """Check if path matches pattern with parameters"""
        pattern_parts = pattern.split("/")
        path_parts = path.split("/")

        if len(pattern_parts) != len(path_parts):
            return False

        return all(
            p1 == p2 or (p1.startswith("{") and p1.endswith("}"))
            for p1, p2 in zip(pattern_parts, path_parts, strict=False)
        )

================
File: supabase_mcp/api_manager/api_spec_manager.py
================
import json
from dataclasses import dataclass
from pathlib import Path

import httpx

from supabase_mcp.api_manager.api_safety_config import SafetyConfig
from supabase_mcp.logger import logger

# Constants
SPEC_URL = "https://api.supabase.com/api/v1-json"
LOCAL_SPEC_PATH = Path(__file__).parent / "specs" / "api_spec.json"


@dataclass
class ValidationResult:
    """Result of request validation against OpenAPI spec"""

    is_valid: bool
    error: str | None = None
    operation_id: str | None = None
    operation_info: dict | None = None


class ApiSpecManager:
    """
    Manages the OpenAPI specification for the Supabase Management API.
    Handles spec loading, caching, and validation.
    """

    def __init__(self):
        self.safety_config = SafetyConfig()
        self.spec: dict | None = None

    @classmethod
    async def create(cls) -> "ApiSpecManager":
        """Async factory method to create and initialize a ApiSpecManager"""
        manager = cls()
        await manager.on_startup()
        return manager

    async def on_startup(self) -> None:
        """Load and enrich spec on startup"""
        # Try to fetch latest spec
        raw_spec = await self._fetch_remote_spec()

        if not raw_spec:
            # If remote fetch fails, use our fallback spec
            logger.info("Using fallback API spec")
            raw_spec = self._load_local_spec()

        self.spec = raw_spec

    async def _fetch_remote_spec(self) -> dict | None:
        """
        Fetch latest OpenAPI spec from Supabase API.
        Returns None if fetch fails.
        """
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(SPEC_URL)
                if response.status_code == 200:
                    return response.json()
                logger.warning(f"Failed to fetch API spec: {response.status_code}")
                return None
        except Exception as e:
            logger.warning(f"Error fetching API spec: {e}")
            return None

    def _load_local_spec(self) -> dict:
        """
        Load OpenAPI spec from local file.
        This is our fallback spec shipped with the server.
        """
        try:
            with open(LOCAL_SPEC_PATH) as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error(f"Local spec not found at {LOCAL_SPEC_PATH}")
            raise
        except json.JSONDecodeError as e:
            logger.error(f"Invalid JSON in local spec: {e}")
            raise

    def get_spec(self) -> dict:
        """Retrieve the enriched spec."""
        if self.spec is None:
            logger.error("OpenAPI spec not loaded by spec manager")
            raise ValueError("OpenAPI spec not loaded")
        return self.spec

================
File: supabase_mcp/db_client/db_client.py
================
import urllib.parse
from dataclasses import dataclass
from typing import Any, Literal

import psycopg2
from psycopg2 import errors as psycopg2_errors
from psycopg2.extras import RealDictCursor
from psycopg2.pool import SimpleConnectionPool
from tenacity import retry, stop_after_attempt, wait_exponential

from supabase_mcp.db_client.db_safety_config import DbSafetyLevel
from supabase_mcp.exceptions import ConnectionError, PermissionError, QueryError
from supabase_mcp.logger import logger
from supabase_mcp.settings import Settings, settings
from supabase_mcp.validators import validate_transaction_control


@dataclass
class QueryResult:
    """Represents a query result with metadata."""

    rows: list[dict[str, Any]]
    count: int
    status: str


class SupabaseClient:
    """Connects to Supabase PostgreSQL database directly."""

    _instance = None  # Singleton instance

    def __init__(
        self,
        project_ref: str | None = None,
        db_password: str | None = None,
        settings_instance: Settings | None = None,
        _mode: Literal[DbSafetyLevel.RO, DbSafetyLevel.RW] = DbSafetyLevel.RO,  # Start
    ):
        """Initialize the PostgreSQL connection pool.

        Args:
            project_ref: Optional Supabase project reference. If not provided, will be taken from settings.
            db_password: Optional database password. If not provided, will be taken from settings.
            settings_instance: Optional Settings instance. If not provided, will use global settings.
        """
        self._pool = None
        self._settings = settings_instance or settings
        self.project_ref = project_ref or self._settings.supabase_project_ref
        self.db_password = db_password or self._settings.supabase_db_password
        self.db_url = self._get_db_url_from_supabase()
        self._mode = _mode

    def _get_db_url_from_supabase(self) -> str:
        """Create PostgreSQL connection string from settings."""
        encoded_password = urllib.parse.quote_plus(self.db_password)

        if self.project_ref.startswith("127.0.0.1"):
            # Local development
            return f"postgresql://postgres:{encoded_password}@{self.project_ref}/postgres"

        # Production Supabase
        return (
            f"postgresql://postgres.{self.project_ref}:{encoded_password}"
            f"@aws-0-{self._settings.supabase_region}.pooler.supabase.com:6543/postgres"
        )

    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=4, max=15),
    )
    def _get_pool(self):
        """Get or create PostgreSQL connection pool with better error handling."""
        if self._pool is None:
            try:
                logger.debug(f"Creating connection pool for: {self.db_url.split('@')[1]}")
                self._pool = SimpleConnectionPool(
                    minconn=1,
                    maxconn=10,
                    cursor_factory=RealDictCursor,
                    dsn=self.db_url,
                )
                # Test the connection
                with self._pool.getconn() as conn:
                    self._pool.putconn(conn)
                logger.info("✓ Created PostgreSQL connection pool")
            except psycopg2.OperationalError as e:
                logger.error(f"Failed to connect to database: {e}")
                raise ConnectionError(f"Could not connect to database: {e}") from e
            except Exception as e:
                logger.exception("Unexpected error creating connection pool")
                raise ConnectionError(f"Unexpected connection error: {e}") from e
        return self._pool

    @classmethod
    def create(
        cls,
        project_ref: str | None = None,
        db_password: str | None = None,
        settings_instance: Settings | None = None,
    ) -> "SupabaseClient":
        """Create and return a configured SupabaseClient instance.

        Args:
            project_ref: Optional Supabase project reference
            db_password: Optional database password
            settings_instance: Optional Settings instance
        """
        if cls._instance is None:
            cls._instance = cls(
                project_ref=project_ref,
                db_password=db_password,
                settings_instance=settings_instance,
            )
        return cls._instance

    @classmethod
    def reset(cls):
        """Reset the singleton instance cleanly"""
        if hasattr(cls, "_instance") and cls._instance is not None:
            # Close any connections if needed
            if hasattr(cls._instance, "close"):
                cls._instance.close()
            # Reset to None
            cls._instance = None

    def close(self):
        """Explicitly close the connection pool."""
        if self._pool is not None:
            try:
                self._pool.closeall()
                self._pool = None
                logger.info("Closed PostgreSQL connection pool")
            except Exception as e:
                logger.error(f"Error closing connection pool: {e}")

    @property
    def mode(self) -> DbSafetyLevel:
        """Current operation mode"""
        return self._mode

    def switch_mode(self, mode: Literal[DbSafetyLevel.RO, DbSafetyLevel.RW]) -> None:
        """Switch the database connection mode."""
        self._mode = mode
        logger.info(f"Switched to {self.mode.value} mode")

    def execute_query(self, query: str, params: tuple = None) -> QueryResult:
        """Execute a SQL query and return structured results.

        Args:
            query: SQL query to execute
            params: Optional query parameters to prevent SQL injection

        Returns:
            QueryResult containing rows and metadata

        Raises:
            ConnectionError: When database connection fails
            QueryError: When query execution fails (schema or general errors)
            PermissionError: When user lacks required privileges
        """
        if self._pool is None:
            self._pool = self._get_pool()

        pool = self._get_pool()
        conn = pool.getconn()
        try:
            # Check if we are in transaction mode
            in_transaction = conn.status == psycopg2.extensions.STATUS_IN_TRANSACTION
            logger.debug(f"Connection state before query: {conn.status}")

            has_transaction_control = validate_transaction_control(query)
            logger.debug(f"Has transaction control: {has_transaction_control}")

            # Define readonly once at the top so it's available throughout the function
            readonly = self.mode == DbSafetyLevel.RO

            # Set session only if not in transaction mode
            if not in_transaction:
                conn.set_session(readonly=readonly)

            with conn.cursor() as cur:
                try:
                    cur.execute(query, params)

                    # Fetch results if available
                    rows = []
                    if cur.description:  # If query returns data
                        rows = cur.fetchall() or []

                    # Only auto-commit if not in write mode AND query doesn't contain
                    if not readonly and not has_transaction_control:
                        conn.commit()

                    status = cur.statusmessage
                    logger.debug(f"Query status: {status}")
                    return QueryResult(rows=rows, count=len(rows), status=status)

                except psycopg2_errors.InsufficientPrivilege as e:
                    logger.error(f"Permission denied: {e}")
                    raise PermissionError(
                        f"Access denied: {str(e)}. Use live_dangerously('database', True) for write operations."
                    ) from e
                except (
                    psycopg2_errors.UndefinedTable,
                    psycopg2_errors.UndefinedColumn,
                ) as e:
                    logger.error(f"Schema error: {e}")
                    raise QueryError(str(e)) from e
                except psycopg2.Error as e:
                    if not readonly:
                        try:
                            conn.rollback()
                            logger.debug("Transaction rolled back due to error")
                        except Exception as rollback_error:
                            logger.warning(f"Failed to rollback transaction: {rollback_error}")
                    logger.error(f"Database error: {e.pgerror}")
                    raise QueryError(f"Query failed: {str(e)}") from e
        finally:
            if pool and conn:
                pool.putconn(conn)

================
File: supabase_mcp/db_client/db_safety_config.py
================
from enum import Enum


class DbSafetyLevel(str, Enum):
    RO = "ro"
    RW = "rw"

================
File: supabase_mcp/sdk_client/auth_admin_models.py
================
from typing import Any, Literal

from pydantic import BaseModel, model_validator


class GetUserByIdParams(BaseModel):
    uid: str


class ListUsersParams(BaseModel):
    page: int | None = 1
    per_page: int | None = 50


class CreateUserParams(BaseModel):
    email: str | None = None
    password: str | None = None
    email_confirm: bool | None = False
    phone: str | None = None
    phone_confirm: bool | None = False
    user_metadata: dict[str, Any] | None = None
    app_metadata: dict[str, Any] | None = None
    role: str | None = None
    ban_duration: str | None = None
    nonce: str | None = None

    @model_validator(mode="after")
    def check_email_or_phone(self) -> "CreateUserParams":
        if not self.email and not self.phone:
            raise ValueError("Either email or phone must be provided")
        return self


class DeleteUserParams(BaseModel):
    id: str
    should_soft_delete: bool | None = False


class InviteUserByEmailParams(BaseModel):
    email: str
    options: dict[str, Any] | None = None


class GenerateLinkParams(BaseModel):
    type: Literal[
        "signup", "invite", "magiclink", "recovery", "email_change_current", "email_change_new", "phone_change"
    ]
    email: str
    password: str | None = None
    new_email: str | None = None
    options: dict[str, Any] | None = None

    @model_validator(mode="after")
    def validate_required_fields(self) -> "GenerateLinkParams":
        # Check password for signup
        if self.type == "signup" and not self.password:
            raise ValueError("Password is required for signup links")

        # Check new_email for email change
        if self.type in ["email_change_current", "email_change_new"] and not self.new_email:
            raise ValueError("new_email is required for email change links")

        return self


class UpdateUserByIdParams(BaseModel):
    uid: str
    email: str | None = None
    password: str | None = None
    email_confirm: bool | None = False
    phone: str | None = None
    phone_confirm: bool | None = False
    user_metadata: dict[str, Any] | None = None
    app_metadata: dict[str, Any] | None = None
    role: str | None = None
    ban_duration: str | None = None
    nonce: str | None = None


class DeleteFactorParams(BaseModel):
    id: str
    user_id: str


# Map method names to their parameter models
PARAM_MODELS = {
    "get_user_by_id": GetUserByIdParams,
    "list_users": ListUsersParams,
    "create_user": CreateUserParams,
    "delete_user": DeleteUserParams,
    "invite_user_by_email": InviteUserByEmailParams,
    "generate_link": GenerateLinkParams,
    "update_user_by_id": UpdateUserByIdParams,
    "delete_factor": DeleteFactorParams,
}

================
File: supabase_mcp/sdk_client/auth_admin_sdk_spec.py
================
def get_auth_admin_methods_spec() -> dict:
    """Returns a detailed specification of all Auth Admin methods."""
    return {
        "get_user_by_id": {
            "description": "Retrieve a user by their ID",
            "parameters": {"uid": {"type": "string", "description": "The user's UUID", "required": True}},
            "returns": {"type": "object", "description": "User object containing all user data"},
            "example": {
                "request": {"uid": "d0e8c69f-e0c3-4a1c-b6d6-9a6c756a6a4b"},
                "response": {
                    "id": "d0e8c69f-e0c3-4a1c-b6d6-9a6c756a6a4b",
                    "email": "user@example.com",
                    "phone": "",
                    "created_at": "2023-01-01T00:00:00Z",
                    "confirmed_at": "2023-01-01T00:00:00Z",
                    "last_sign_in_at": "2023-01-01T00:00:00Z",
                    "user_metadata": {"name": "John Doe"},
                    "app_metadata": {},
                },
            },
        },
        "list_users": {
            "description": "List all users with pagination",
            "parameters": {
                "page": {
                    "type": "integer",
                    "description": "Page number (starts at 1)",
                    "required": False,
                    "default": 1,
                },
                "per_page": {
                    "type": "integer",
                    "description": "Number of users per page",
                    "required": False,
                    "default": 50,
                },
            },
            "returns": {"type": "object", "description": "Paginated list of users with metadata"},
            "example": {
                "request": {"page": 1, "per_page": 10},
                "response": {
                    "users": [
                        {
                            "id": "d0e8c69f-e0c3-4a1c-b6d6-9a6c756a6a4b",
                            "email": "user@example.com",
                            "user_metadata": {"name": "John Doe"},
                        }
                    ],
                    "aud": "authenticated",
                    "total_count": 100,
                    "next_page": 2,
                },
            },
        },
        "create_user": {
            "description": "Create a new user. Does not send a confirmation email by default.",
            "parameters": {
                "email": {"type": "string", "description": "The user's email address", "required": False},
                "password": {"type": "string", "description": "The user's password", "required": False},
                "email_confirm": {
                    "type": "boolean",
                    "description": "Confirms the user's email address if set to true",
                    "required": False,
                    "default": False,
                },
                "phone": {
                    "type": "string",
                    "description": "The user's phone number with country code",
                    "required": False,
                },
                "phone_confirm": {
                    "type": "boolean",
                    "description": "Confirms the user's phone number if set to true",
                    "required": False,
                    "default": False,
                },
                "user_metadata": {
                    "type": "object",
                    "description": "A custom data object to store the user's metadata",
                    "required": False,
                },
                "app_metadata": {
                    "type": "object",
                    "description": "A custom data object to store the user's application specific metadata",
                    "required": False,
                },
                "role": {
                    "type": "string",
                    "description": "The role claim set in the user's access token JWT",
                    "required": False,
                },
                "ban_duration": {
                    "type": "string",
                    "description": "Determines how long a user is banned for",
                    "required": False,
                },
                "nonce": {
                    "type": "string",
                    "description": "The nonce sent for reauthentication if the user's password is to be updated",
                    "required": False,
                },
            },
            "returns": {"type": "object", "description": "Created user object"},
            "example": {
                "request": {
                    "email": "new@example.com",
                    "password": "secure-password",
                    "email_confirm": True,
                    "user_metadata": {"name": "New User"},
                },
                "response": {
                    "id": "d0e8c69f-e0c3-4a1c-b6d6-9a6c756a6a4b",
                    "email": "new@example.com",
                    "email_confirmed_at": "2023-01-01T00:00:00Z",
                    "user_metadata": {"name": "New User"},
                },
            },
            "notes": "Either email or phone must be provided. Use invite_user_by_email() if you want to send an email invite.",
        },
        "delete_user": {
            "description": "Delete a user by their ID. Requires a service_role key.",
            "parameters": {
                "id": {"type": "string", "description": "The user's UUID", "required": True},
                "should_soft_delete": {
                    "type": "boolean",
                    "description": "If true, the user will be soft-deleted (preserving their data but disabling the account). Defaults to false.",
                    "required": False,
                    "default": False,
                },
            },
            "returns": {"type": "object", "description": "Success message"},
            "example": {
                "request": {"id": "d0e8c69f-e0c3-4a1c-b6d6-9a6c756a6a4b"},
                "response": {"message": "User deleted successfully"},
            },
            "notes": "This function should only be called on a server. Never expose your service_role key in the browser.",
        },
        "invite_user_by_email": {
            "description": "Sends an invite link to a user's email address. Typically used by administrators to invite users to join the application.",
            "parameters": {
                "email": {"type": "string", "description": "The email address of the user", "required": True},
                "options": {
                    "type": "object",
                    "description": "Optional settings for the invite",
                    "required": False,
                    "properties": {
                        "data": {
                            "type": "object",
                            "description": "A custom data object to store additional metadata about the user. Maps to auth.users.user_metadata",
                            "required": False,
                        },
                        "redirect_to": {
                            "type": "string",
                            "description": "The URL which will be appended to the email link. Once clicked the user will end up on this URL",
                            "required": False,
                        },
                    },
                },
            },
            "returns": {"type": "object", "description": "User object for the invited user"},
            "example": {
                "request": {
                    "email": "invite@example.com",
                    "options": {"data": {"name": "John Doe"}, "redirect_to": "https://example.com/welcome"},
                },
                "response": {
                    "id": "a1a1a1a1-a1a1-a1a1-a1a1-a1a1a1a1a1a1",
                    "email": "invite@example.com",
                    "role": "authenticated",
                    "email_confirmed_at": None,
                    "invited_at": "2023-01-01T00:00:00Z",
                },
            },
            "notes": "Note that PKCE is not supported when using invite_user_by_email. This is because the browser initiating the invite is often different from the browser accepting the invite.",
        },
        "generate_link": {
            "description": "Generate an email link for various authentication purposes. Handles user creation for signup, invite and magiclink types.",
            "parameters": {
                "type": {
                    "type": "string",
                    "description": "Link type: 'signup', 'invite', 'magiclink', 'recovery', 'email_change_current', 'email_change_new', 'phone_change'",
                    "required": True,
                    "enum": [
                        "signup",
                        "invite",
                        "magiclink",
                        "recovery",
                        "email_change_current",
                        "email_change_new",
                        "phone_change",
                    ],
                },
                "email": {"type": "string", "description": "User's email address", "required": True},
                "password": {
                    "type": "string",
                    "description": "User's password. Only required if type is signup",
                    "required": False,
                },
                "new_email": {
                    "type": "string",
                    "description": "New email address. Only required if type is email_change_current or email_change_new",
                    "required": False,
                },
                "options": {
                    "type": "object",
                    "description": "Additional options for the link",
                    "required": False,
                    "properties": {
                        "data": {
                            "type": "object",
                            "description": "Custom JSON object containing user metadata. Only accepted if type is signup, invite, or magiclink",
                            "required": False,
                        },
                        "redirect_to": {
                            "type": "string",
                            "description": "A redirect URL which will be appended to the generated email link",
                            "required": False,
                        },
                    },
                },
            },
            "returns": {"type": "object", "description": "Generated link details"},
            "example": {
                "request": {
                    "type": "signup",
                    "email": "user@example.com",
                    "password": "secure-password",
                    "options": {"data": {"name": "John Doe"}, "redirect_to": "https://example.com/welcome"},
                },
                "response": {
                    "action_link": "https://your-project.supabase.co/auth/v1/verify?token=...",
                    "email_otp": "123456",
                    "hashed_token": "...",
                    "redirect_to": "https://example.com/welcome",
                    "verification_type": "signup",
                },
            },
            "notes": "generate_link() only generates the email link for email_change_email if the Secure email change is enabled in your project's email auth provider settings.",
        },
        "update_user_by_id": {
            "description": "Update user attributes by ID. Requires a service_role key.",
            "parameters": {
                "uid": {"type": "string", "description": "The user's UUID", "required": True},
                "email": {"type": "string", "description": "The user's email", "required": False},
                "phone": {"type": "string", "description": "The user's phone", "required": False},
                "password": {"type": "string", "description": "The user's password", "required": False},
                "email_confirm": {
                    "type": "boolean",
                    "description": "Confirms the user's email address if set to true",
                    "required": False,
                },
                "phone_confirm": {
                    "type": "boolean",
                    "description": "Confirms the user's phone number if set to true",
                    "required": False,
                },
                "user_metadata": {
                    "type": "object",
                    "description": "A custom data object to store the user's metadata. Maps to auth.users.raw_user_meta_data column",
                    "required": False,
                },
                "app_metadata": {
                    "type": "object",
                    "description": "A custom data object to store the user's application specific metadata. Maps to auth.users.app_metadata column",
                    "required": False,
                },
                "role": {
                    "type": "string",
                    "description": "The role claim set in the user's access token JWT",
                    "required": False,
                },
                "ban_duration": {
                    "type": "string",
                    "description": "Determines how long a user is banned for",
                    "required": False,
                },
                "nonce": {
                    "type": "string",
                    "description": "The nonce sent for reauthentication if the user's password is to be updated",
                    "required": False,
                },
            },
            "returns": {"type": "object", "description": "Updated user object"},
            "example": {
                "request": {
                    "uid": "d0e8c69f-e0c3-4a1c-b6d6-9a6c756a6a4b",
                    "email": "updated@example.com",
                    "user_metadata": {"name": "Updated Name"},
                },
                "response": {
                    "id": "d0e8c69f-e0c3-4a1c-b6d6-9a6c756a6a4b",
                    "email": "updated@example.com",
                    "user_metadata": {"name": "Updated Name"},
                },
            },
            "notes": "This function should only be called on a server. Never expose your service_role key in the browser.",
        },
        "delete_factor": {
            "description": "Deletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.",
            "parameters": {
                "user_id": {
                    "type": "string",
                    "description": "ID of the user whose factor is being deleted",
                    "required": True,
                },
                "id": {"type": "string", "description": "ID of the MFA factor to delete", "required": True},
            },
            "returns": {"type": "object", "description": "Success message"},
            "example": {
                "request": {"user_id": "d0e8c69f-e0c3-4a1c-b6d6-9a6c756a6a4b", "id": "totp-factor-id-123"},
                "response": {"message": "Factor deleted successfully"},
            },
            "notes": "This will log the user out of all active sessions if the deleted factor was verified.",
        },
    }

================
File: supabase_mcp/sdk_client/python_client.py
================
from __future__ import annotations

from typing import Any, TypeVar

from pydantic import BaseModel, ValidationError
from supabase import AsyncClient, create_async_client
from supabase.lib.client_options import ClientOptions

from supabase_mcp.exceptions import PythonSDKError
from supabase_mcp.logger import logger
from supabase_mcp.sdk_client.auth_admin_models import (
    PARAM_MODELS,
    CreateUserParams,
    DeleteFactorParams,
    DeleteUserParams,
    GenerateLinkParams,
    GetUserByIdParams,
    InviteUserByEmailParams,
    ListUsersParams,
    UpdateUserByIdParams,
)
from supabase_mcp.sdk_client.auth_admin_sdk_spec import get_auth_admin_methods_spec
from supabase_mcp.settings import settings

T = TypeVar("T", bound=BaseModel)


class IncorrectSDKParamsError(PythonSDKError):
    """Error raised when the parameters passed to the SDK are incorrect."""

    pass


class SupabaseSDKClient:
    """Supabase Python SDK client, which exposes functionality related to Auth admin of the Python SDK."""

    _instance: SupabaseSDKClient | None = None

    def __init__(self, project_ref: str, service_role_key: str):
        self.client: AsyncClient | None = None
        self.project_ref = project_ref
        self.service_role_key = service_role_key

    def get_supabase_url(self) -> str:
        """Returns the Supabase URL based on the project reference"""
        if self.project_ref.startswith("127.0.0.1"):
            # Return the default Supabase API URL
            return "http://127.0.0.1:54321"
        return f"https://{self.project_ref}.supabase.co"

    @classmethod
    async def create(
        cls,
        project_ref: str = settings.supabase_project_ref,
        service_role_key: str = settings.supabase_service_role_key,
    ) -> SupabaseSDKClient:
        if cls._instance is None:
            try:
                cls._instance = cls(project_ref, service_role_key)
                supabase_url = cls._instance.get_supabase_url()
                cls._instance.client = await create_async_client(
                    supabase_url,
                    service_role_key,
                    options=ClientOptions(
                        auto_refresh_token=False,
                        persist_session=False,
                    ),
                )
                logger.info(f"Created Supabase SDK client for project {project_ref}")
            except Exception as e:
                logger.error(f"Error creating Supabase SDK client: {e}")
                raise PythonSDKError(f"Error creating Supabase SDK client: {e}") from e
        return cls._instance

    @classmethod
    async def get_instance(cls) -> SupabaseSDKClient:
        """Returns the singleton instance"""
        if cls._instance is None:
            await cls.create()
        return cls._instance

    def return_python_sdk_spec(self) -> dict:
        """Returns the Python SDK spec"""
        return get_auth_admin_methods_spec()

    def _validate_params(self, method: str, params: dict, param_model_cls: type[T]) -> T:
        """Validate parameters using the appropriate Pydantic model"""
        try:
            return param_model_cls.model_validate(params)
        except ValidationError as e:
            raise PythonSDKError(f"Invalid parameters for method {method}: {str(e)}") from e

    async def _get_user_by_id(self, params: GetUserByIdParams) -> dict:
        """Get user by ID implementation"""
        admin_auth_client = self.client.auth.admin
        result = await admin_auth_client.get_user_by_id(params.uid)
        return result

    async def _list_users(self, params: ListUsersParams) -> dict:
        """List users implementation"""
        admin_auth_client = self.client.auth.admin
        result = await admin_auth_client.list_users(page=params.page, per_page=params.per_page)
        return result

    async def _create_user(self, params: CreateUserParams) -> dict:
        """Create user implementation"""
        admin_auth_client = self.client.auth.admin
        user_data = params.model_dump(exclude_none=True)
        result = await admin_auth_client.create_user(user_data)
        return result

    async def _delete_user(self, params: DeleteUserParams) -> dict:
        """Delete user implementation"""
        admin_auth_client = self.client.auth.admin
        result = await admin_auth_client.delete_user(params.id, should_soft_delete=params.should_soft_delete)
        return result

    async def _invite_user_by_email(self, params: InviteUserByEmailParams) -> dict:
        """Invite user by email implementation"""
        admin_auth_client = self.client.auth.admin
        options = params.options if params.options else {}
        result = await admin_auth_client.invite_user_by_email(params.email, options)
        return result

    async def _generate_link(self, params: GenerateLinkParams) -> dict:
        """Generate link implementation"""
        admin_auth_client = self.client.auth.admin

        # Create a params dictionary as expected by the SDK
        params_dict = params.model_dump(exclude_none=True)

        try:
            # The SDK expects a single 'params' parameter containing all the fields
            result = await admin_auth_client.generate_link(params=params_dict)
            return result
        except TypeError as e:
            # Catch parameter errors and provide a more helpful message
            error_msg = str(e)
            if "unexpected keyword argument" in error_msg:
                raise IncorrectSDKParamsError(
                    f"Incorrect parameters for generate_link: {error_msg}. "
                    f"Please check the SDK specification for the correct parameter structure."
                ) from e
            raise

    async def _update_user_by_id(self, params: UpdateUserByIdParams) -> dict:
        """Update user by ID implementation"""
        admin_auth_client = self.client.auth.admin
        uid = params.uid
        # Remove uid from attributes as it's passed separately
        attributes = params.model_dump(exclude={"uid"}, exclude_none=True)
        result = await admin_auth_client.update_user_by_id(uid, attributes)
        return result

    async def _delete_factor(self, params: DeleteFactorParams) -> dict:
        """Delete factor implementation"""
        # This method is not implemented in the Supabase SDK yet
        raise NotImplementedError("The delete_factor method is not implemented in the Supabase SDK yet")

    async def call_auth_admin_method(self, method: str, params: dict) -> Any:
        """Calls a method of the Python SDK client"""
        if not self.client:
            raise PythonSDKError("Python SDK client not initialized")

        # Validate method exists
        if method not in PARAM_MODELS:
            available_methods = ", ".join(PARAM_MODELS.keys())
            raise PythonSDKError(f"Unknown method: {method}. Available methods: {available_methods}")

        # Get the appropriate model class and validate parameters
        param_model_cls = PARAM_MODELS[method]
        validated_params = self._validate_params(method, params, param_model_cls)

        # Method dispatch using a dictionary of method implementations
        method_handlers = {
            "get_user_by_id": self._get_user_by_id,
            "list_users": self._list_users,
            "create_user": self._create_user,
            "delete_user": self._delete_user,
            "invite_user_by_email": self._invite_user_by_email,
            "generate_link": self._generate_link,
            "update_user_by_id": self._update_user_by_id,
            "delete_factor": self._delete_factor,
        }

        # Call the appropriate method handler
        try:
            handler = method_handlers.get(method)
            if not handler:
                raise PythonSDKError(f"Method {method} is not implemented")

            return await handler(validated_params)
        except Exception as e:
            if isinstance(e, IncorrectSDKParamsError):
                # Re-raise our custom error without wrapping it
                raise e
            logger.error(f"Error calling {method}: {e}")
            raise PythonSDKError(f"Error calling {method}: {str(e)}") from e

================
File: supabase_mcp/__init__.py
================
"""Supabase MCP Server package."""

from supabase_mcp._version import __version__, version, version_tuple

__all__ = ["__version__", "version", "version_tuple"]

================
File: supabase_mcp/exceptions.py
================
class DatabaseError(Exception):
    """Base class for database-related errors."""

    pass


class ConnectionError(DatabaseError):
    """Raised when connection to database fails."""

    pass


class PermissionError(DatabaseError):
    """Raised when user lacks required privileges."""

    pass


class QueryError(DatabaseError):
    """Raised when query execution fails."""

    pass


class TimeoutError(DatabaseError):
    """Raised when a query execution exceeds the specified timeout."""

    pass


class ValidationError(Exception):
    """Raised when input validation fails."""

    pass


class SafetyError(Exception):
    """Operation not allowed due to safety rules"""

    pass


class APIError(Exception):
    """Base class for API-related errors"""

    def __init__(
        self,
        message: str,
        status_code: int | None = None,
        response_body: dict | None = None,
    ):
        self.status_code = status_code
        self.response_body = response_body
        super().__init__(message)


class APIConnectionError(APIError):
    """Failed to connect to API"""

    pass


class PythonSDKError(Exception):
    """Failed to create Python SDK client or call Python SDK method"""

    pass


class APIResponseError(APIError):
    """Failed to process API response"""

    pass


class APIClientError(APIError):
    """Client-side error (4xx)"""

    pass


class APIServerError(APIError):
    """Server-side error (5xx)"""

    pass


class UnexpectedError(APIError):
    """Unexpected error during API operation"""

    pass

================
File: supabase_mcp/logger.py
================
import logging
from pathlib import Path


def setup_logger():
    """Configure logging for the MCP server."""
    logger = logging.getLogger("supabase-mcp")

    # Remove existing handlers to avoid duplicate logs
    if logger.hasHandlers():
        logger.handlers.clear()

    # Define a consistent log directory in the user's home folder
    log_dir = Path.home() / ".local" / "share" / "supabase-mcp"
    log_dir.mkdir(parents=True, exist_ok=True)  # Ensure the directory exists

    # Define the log file path
    log_file = log_dir / "mcp_server.log"

    # Create a file handler (only logs to file, no stdout)
    file_handler = logging.FileHandler(log_file)

    # Create formatter
    formatter = logging.Formatter("[%(asctime)s] %(levelname)-8s %(message)s", datefmt="%y/%m/%d %H:%M:%S")

    # Add formatter to file handler
    file_handler.setFormatter(formatter)

    # Add handler to logger
    logger.addHandler(file_handler)

    # Set level
    logger.setLevel(logging.INFO)

    return logger


logger = setup_logger()

================
File: supabase_mcp/main.py
================
from pathlib import Path
from typing import Literal

from mcp.server.fastmcp import FastMCP

from supabase_mcp.api_manager.api_manager import SupabaseApiManager
from supabase_mcp.api_manager.api_safety_config import SafetyLevel
from supabase_mcp.db_client.db_client import SupabaseClient
from supabase_mcp.db_client.db_safety_config import DbSafetyLevel
from supabase_mcp.logger import logger
from supabase_mcp.queries import PreBuiltQueries
from supabase_mcp.sdk_client.python_client import SupabaseSDKClient
from supabase_mcp.settings import settings
from supabase_mcp.validators import (
    validate_schema_name,
    validate_sql_query,
    validate_table_name,
)

try:
    mcp = FastMCP("supabase")
    supabase = SupabaseClient.create()
except Exception as e:
    logger.error(f"Failed to create Supabase client: {e}")
    raise e


@mcp.tool(description="List all database schemas with their sizes and table counts.")
async def get_db_schemas():
    """Get all accessible database schemas with their total sizes and number of tables."""
    query = PreBuiltQueries.get_schemas_query()
    result = supabase.execute_query(query)
    return result


@mcp.tool(
    description="List all tables, foreign tables, and views in a schema with their sizes, row counts, and metadata."
)
async def get_tables(schema_name: str):
    """Get all tables, foreign tables, and views from a schema with size, row count, column count, and index information."""
    schema_name = validate_schema_name(schema_name)
    query = PreBuiltQueries.get_tables_in_schema_query(schema_name)
    return supabase.execute_query(query)


@mcp.tool(description="Get detailed table structure including columns, keys, and relationships.")
async def get_table_schema(schema_name: str, table: str):
    """Get table schema including column definitions, primary keys, and foreign key relationships."""
    schema_name = validate_schema_name(schema_name)
    table = validate_table_name(table)
    query = PreBuiltQueries.get_table_schema_query(schema_name, table)
    return supabase.execute_query(query)


@mcp.tool(
    description="""
Query the database with a raw SQL query.

IMPORTANT USAGE GUIDELINES:
1. For READ operations (SELECT):
   - Use simple SELECT statements
   - Example: SELECT * FROM public.users LIMIT 10;

2. For WRITE operations (INSERT/UPDATE/DELETE/CREATE/ALTER/DROP):
   - ALWAYS wrap in explicit BEGIN/COMMIT blocks
   - Example:
     BEGIN;
     CREATE TABLE public.test_table (id SERIAL PRIMARY KEY, name TEXT);
     COMMIT;

3. NEVER mix READ and WRITE operations in the same query
4. NEVER use single DDL statements without transaction control
5. Remember to enable unsafe mode first with live_dangerously('database', True)
6. For auth operations (primarily creating, updating, deleting users, generating links, etc), prefer using the Auth Admin SDK methods
   instead of direct SQL manipulation to ensure correctness and prevent security issues

TRANSACTION HANDLING:
- The server detects BEGIN/COMMIT/ROLLBACK keywords to respect your transaction control
- When you use these keywords, the server will not interfere with your transactions
- For queries without transaction control, the server will auto-commit in write mode

Failure to follow these guidelines will result in errors.
"""
)
async def execute_sql_query(query: str):
    """Execute an SQL query with validation."""
    query = validate_sql_query(query)
    return supabase.execute_query(query)


# Core Tools
@mcp.tool(
    description="""
Execute a Supabase Management API request. Use paths exactly as defined in the API spec -
the {ref} parameter will be automatically injected from settings.

Parameters:
- method: HTTP method (GET, POST, PUT, PATCH, DELETE)
- path: API path (e.g. /v1/projects/{ref}/functions)
- request_params: Query parameters as dict (e.g. {"key": "value"}) - use empty dict {} if not needed
- request_body: Request body as dict (e.g. {"name": "test"}) - use empty dict {} if not needed

Examples:
1. GET request with params:
   method: "GET"
   path: "/v1/projects/{ref}/functions"
   request_params: {"name": "test"}
   request_body: {}

2. POST request with body:
   method: "POST"
   path: "/v1/projects/{ref}/functions"
   request_params: {}
   request_body: {"name": "test-function", "slug": "test-function"}
"""
)
async def send_management_api_request(
    method: str,
    path: str,  # URL path
    request_params: dict,  # Query parameters as dict
    request_body: dict,  # Request body as dict
) -> dict:
    """
    Execute a Management API request.

    Args:
        method: HTTP method (GET, POST, etc)
        path: API path exactly as in spec, {ref} will be auto-injected
        request_params: Query parameters as dict if needed (e.g. {"key": "value"})
        request_body: Request body as dict for POST/PUT/PATCH (e.g. {"name": "test"})

    Example:
        To get a function details, use:
        path="/v1/projects/{ref}/functions/{function_slug}"
        The {ref} will be auto-injected, only function_slug needs to be provided
    """
    api_manager = await SupabaseApiManager.get_manager()
    return await api_manager.execute_request(method, path, request_params, request_body)


@mcp.tool(
    description="""
Toggle unsafe mode for either Management API or Database operations.
In safe mode (default):
- API: only read operations allowed
- Database: only SELECT queries allowed
In unsafe mode:
- API: state-changing operations permitted (except blocked ones)
- Database: all SQL operations permitted
"""
)
async def live_dangerously(service: Literal["api", "database"], enable: bool = False) -> dict:
    """
    Toggle between safe and unsafe operation modes for a specific service.

    Args:
        service: Which service to toggle ("api" or "database")
        enable: True to enable unsafe mode, False for safe mode

    Returns:
        dict: Current mode status for the specified service
    """
    if service == "api":
        api_manager = await SupabaseApiManager.get_manager()
        api_manager.switch_mode(SafetyLevel.UNSAFE if enable else SafetyLevel.SAFE)
        return {"service": "api", "mode": api_manager.mode}
    else:  # database
        supabase.switch_mode(DbSafetyLevel.RW if enable else DbSafetyLevel.RO)
        return {"service": "database", "mode": supabase.mode}


@mcp.tool(
    description="""
Get the latests complete Management API specification.
Use this to understand available operations and their requirements.
"""
)
async def get_management_api_spec() -> dict:
    """
    Get enriched API specification with safety information.

    Returns:
        dict: OpenAPI spec with added safety metadata per operation
    """
    api_manager = await SupabaseApiManager.get_manager()
    return api_manager.get_spec()


@mcp.tool(description="Get all safety rules for the Supabase Management API")
async def get_management_api_safety_rules() -> dict:
    """Returns all safety rules including blocked and unsafe operations with human-readable explanations"""
    api_manager = await SupabaseApiManager.get_manager()
    return api_manager.get_safety_rules()


@mcp.tool(
    description="""
Get Python SDK methods specification for Auth Admin. Returns a python dictionary of all Auth Python SDK methods.
Use this to understand the available methods and their required parameters.
"""
)
async def get_auth_admin_methods_spec() -> dict:
    """Returns the Python SDK spec"""
    sdk_client = await SupabaseSDKClient.get_instance()
    return sdk_client.return_python_sdk_spec()


@mcp.tool(
    description="""
Call an Auth Admin method from Supabase Python SDK. Returns the result of the method call.

Available methods:
- get_user_by_id: Retrieve a user by their ID
- list_users: List all users with pagination
- create_user: Create a new user
- delete_user: Delete a user by their ID
- invite_user_by_email: Send an invite link to a user's email
- generate_link: Generate an email link for various authentication purposes
- update_user_by_id: Update user attributes by ID
- delete_factor: Delete a factor on a user

Each method requires specific parameters. For nested parameters, follow the structure exactly:

Examples:
1. Get user by ID:
   method: "get_user_by_id"
   params: {"uid": "user-uuid-here"}

2. Create user:
   method: "create_user"
   params: {
     "email": "user@example.com",
     "password": "secure-password",
     "email_confirm": true,
     "user_metadata": {"name": "John Doe"}
   }

3. Generate link:
   method: "generate_link"
   params: {
     "params": {
       "type": "signup",
       "email": "user@example.com",
       "password": "secure-password",
       "options": {
         "data": {"name": "John Doe"},
         "redirect_to": "https://example.com/welcome"
       }
     }
   }

Use get_auth_admin_methods_spec() to see full documentation for all methods.
"""
)
async def call_auth_admin_method(method: str, params: dict) -> dict:
    """Calls a method of the Python SDK client"""
    sdk_client = await SupabaseSDKClient.get_instance()
    return await sdk_client.call_auth_admin_method(method, params)


def run():
    """Run the Supabase MCP server."""
    if settings.supabase_project_ref.startswith("127.0.0.1"):
        logger.info(
            "Starting Supabase MCP server to connect to local project: %s",
            settings.supabase_project_ref,
        )
    else:
        logger.info(
            "Starting Supabase MCP server to connect to project ref: %s (region: %s)",
            settings.supabase_project_ref,
            settings.supabase_region,
        )
    if settings.supabase_access_token:
        logger.info("Personal access token detected - using for Management API")
    if settings.supabase_service_role_key:
        logger.info("Service role key detected - using for Python SDK")
    mcp.run()


if __name__ == "__main__":
    run()


def inspector():
    """Inspector mode - same as mcp dev"""
    logger.info("Starting Supabase MCP server inspector")

    import importlib.util

    from mcp.cli.cli import dev  # Import from correct module

    # Get the package location
    spec = importlib.util.find_spec("supabase_mcp")
    if spec and spec.origin:
        package_dir = str(Path(spec.origin).parent)
        file_spec = str(Path(package_dir) / "main.py")
        logger.info(f"Using file spec: {file_spec}")
        return dev(file_spec=file_spec)
    else:
        raise ImportError("Could not find supabase_mcp package")

================
File: supabase_mcp/queries.py
================
class PreBuiltQueries:
    @staticmethod
    def get_schemas_query() -> str:
        """Returns SQL query to get all accessible schemas"""
        return """
        SELECT
            s.schema_name,
            COALESCE(pg_size_pretty(sum(COALESCE(
                CASE WHEN t.table_type = 'regular'
                    THEN pg_total_relation_size(
                        quote_ident(t.schema_name) || '.' || quote_ident(t.table_name)
                    )
                    ELSE 0
                END, 0)
            )), '0 B') as total_size,
            COUNT(t.table_name) as table_count
        FROM information_schema.schemata s
        LEFT JOIN (
            -- Regular tables
            SELECT
                schemaname as schema_name,
                tablename as table_name,
                'regular' as table_type
            FROM pg_tables

            UNION ALL

            -- Foreign tables
            SELECT
                foreign_table_schema as schema_name,
                foreign_table_name as table_name,
                'foreign' as table_type
            FROM information_schema.foreign_tables
        ) t ON t.schema_name = s.schema_name
        WHERE s.schema_name NOT IN ('pg_catalog', 'information_schema')
            AND s.schema_name NOT LIKE 'pg_%'
            AND s.schema_name NOT LIKE 'pg_toast%'
        GROUP BY s.schema_name
        ORDER BY
            COUNT(t.table_name) DESC,           -- Schemas with most tables first
            total_size DESC,                    -- Then by size
            s.schema_name;                      -- Then alphabetically
        """

    @staticmethod
    def get_tables_in_schema_query(schema_name: str) -> str:
        """Returns SQL query to get all tables in a schema with descriptions"""
        return f"""
            (
        -- Regular tables & views: full metadata available
        SELECT
            t.table_name,
            obj_description(pc.oid) AS description,
            pg_total_relation_size(format('%I.%I', t.table_schema, t.table_name)) AS size_bytes,
            pg_stat_get_live_tuples(pc.oid) AS row_count,
            (SELECT COUNT(*) FROM information_schema.columns c
                WHERE c.table_schema = t.table_schema
                AND c.table_name = t.table_name) AS column_count,
            (SELECT COUNT(*) FROM pg_indexes i
                WHERE i.schemaname = t.table_schema
                AND i.tablename = t.table_name) AS index_count,
            t.table_type
        FROM information_schema.tables t
        JOIN pg_class pc
            ON pc.relname = t.table_name
        AND pc.relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = '{schema_name}')
        WHERE t.table_schema = '{schema_name}'
            AND t.table_type IN ('BASE TABLE', 'VIEW')
        )
        UNION ALL
        (
        -- Foreign tables: limited metadata (size & row count functions don't apply)
        SELECT
            ft.foreign_table_name AS table_name,
            (
                SELECT obj_description(
                        (quote_ident(ft.foreign_table_schema) || '.' || quote_ident(ft.foreign_table_name))::regclass
                    )
            ) AS description,
            0 AS size_bytes,
            NULL AS row_count,
            (SELECT COUNT(*) FROM information_schema.columns c
                WHERE c.table_schema = ft.foreign_table_schema
                AND c.table_name = ft.foreign_table_name) AS column_count,
            0 AS index_count,
            'FOREIGN TABLE' AS table_type
        FROM information_schema.foreign_tables ft
        WHERE ft.foreign_table_schema = '{schema_name}'
        )
        ORDER BY size_bytes DESC;
        """

    @staticmethod
    def get_table_schema_query(schema_name: str, table: str) -> str:
        """Returns SQL query to get detailed table schema with column descriptions"""
        return f"""
            SELECT DISTINCT
                c.column_name,
                c.data_type,
                c.is_nullable,
                c.column_default,
                col_description(pc.oid, c.ordinal_position) as column_description,
                c.ordinal_position,
                CASE WHEN pk.column_name IS NOT NULL THEN true ELSE false END as is_primary_key,
                fk.foreign_table_name,
                fk.foreign_column_name
            FROM information_schema.columns c
            JOIN pg_class pc
                ON pc.relname = '{table}'
                AND pc.relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = '{schema_name}')
            LEFT JOIN (
                SELECT ccu.column_name
                FROM information_schema.table_constraints tc
                JOIN information_schema.constraint_column_usage ccu
                    ON tc.constraint_name = ccu.constraint_name
                WHERE tc.table_schema = '{schema_name}'
                    AND tc.table_name = '{table}'
                    AND tc.constraint_type = 'PRIMARY KEY'
            ) pk ON c.column_name = pk.column_name
            LEFT JOIN (
                SELECT
                    kcu.column_name,
                    ccu.table_name as foreign_table_name,
                    ccu.column_name as foreign_column_name
                FROM information_schema.table_constraints tc
                JOIN information_schema.key_column_usage kcu
                    ON tc.constraint_name = kcu.constraint_name
                JOIN information_schema.constraint_column_usage ccu
                    ON tc.constraint_name = ccu.constraint_name
                WHERE tc.table_schema = '{schema_name}'
                    AND tc.table_name = '{table}'
                    AND tc.constraint_type = 'FOREIGN KEY'
            ) fk ON c.column_name = fk.column_name
            WHERE c.table_schema = '{schema_name}'
                AND c.table_name = '{table}'
            ORDER BY c.ordinal_position;
        """

================
File: supabase_mcp/settings.py
================
import os
from pathlib import Path
from typing import Literal

from pydantic import Field, field_validator
from pydantic_settings import BaseSettings, SettingsConfigDict

from supabase_mcp.logger import logger

SUPPORTED_REGIONS = Literal[
    "us-west-1",  # West US (North California)
    "us-east-1",  # East US (North Virginia)
    "us-east-2",  # East US (Ohio)
    "ca-central-1",  # Canada (Central)
    "eu-west-1",  # West EU (Ireland)
    "eu-west-2",  # West Europe (London)
    "eu-west-3",  # West EU (Paris)
    "eu-central-1",  # Central EU (Frankfurt)
    "eu-central-2",  # Central Europe (Zurich)
    "eu-north-1",  # North EU (Stockholm)
    "ap-south-1",  # South Asia (Mumbai)
    "ap-southeast-1",  # Southeast Asia (Singapore)
    "ap-northeast-1",  # Northeast Asia (Tokyo)
    "ap-northeast-2",  # Northeast Asia (Seoul)
    "ap-southeast-2",  # Oceania (Sydney)
    "sa-east-1",  # South America (São Paulo)
]


def find_config_file() -> str | None:
    """Find the .env file in order of precedence:
    1. Current working directory (where command is run)
    2. Global config:
       - Windows: %APPDATA%/supabase-mcp/.env
       - macOS/Linux: ~/.config/supabase-mcp/.env
    """
    logger.info("Searching for configuration files...")

    # 1. Check current directory
    cwd_config = Path.cwd() / ".env"
    if cwd_config.exists():
        logger.info(f"Found local config file: {cwd_config}")
        return str(cwd_config)

    # 2. Check global config
    home = Path.home()
    if os.name == "nt":  # Windows
        global_config = Path(os.environ.get("APPDATA", "")) / "supabase-mcp" / ".env"
    else:  # macOS/Linux
        global_config = home / ".config" / "supabase-mcp" / ".env"

    if global_config.exists():
        logger.info(f"Found global config file: {global_config}")
        return str(global_config)

    logger.warning("No config files found, using default settings")
    return None


class Settings(BaseSettings):
    """Initializes settings for Supabase MCP server."""

    supabase_project_ref: str = Field(
        default="127.0.0.1:54322",  # Local Supabase default
        description="Supabase project ref",
        alias="SUPABASE_PROJECT_REF",
    )
    supabase_db_password: str = Field(
        default="postgres",  # Local Supabase default
        description="Supabase db password",
        alias="SUPABASE_DB_PASSWORD",
    )
    supabase_region: str = Field(
        default="us-east-1",  # East US (North Virginia) - Supabase's default region
        description="Supabase region for connection",
        alias="SUPABASE_REGION",
    )
    supabase_access_token: str | None = Field(
        default=None,
        description="Optional personal access token for accessing Supabase Management API",
        alias="SUPABASE_ACCESS_TOKEN",
    )
    supabase_service_role_key: str | None = Field(
        default=None,
        description="Optional service role key for accessing Python SDK",
        alias="SUPABASE_SERVICE_ROLE_KEY",
    )

    @field_validator("supabase_region")
    @classmethod
    def validate_region(cls, v: str) -> str:
        """Validate that the region is supported by Supabase."""
        if v not in SUPPORTED_REGIONS.__args__:
            supported = "\n  - ".join([""] + list(SUPPORTED_REGIONS.__args__))
            raise ValueError(f"Region '{v}' is not supported. Supported regions are:{supported}")
        return v

    @classmethod
    def with_config(cls, config_file: str | None = None) -> "Settings":
        """Create Settings with specific config file.

        Args:
            config_file: Path to .env file to use, or None for no config file
        """

        # Create a new Settings class with the specific config
        class SettingsWithConfig(cls):
            model_config = SettingsConfigDict(env_file=config_file, env_file_encoding="utf-8")

        instance = SettingsWithConfig()

        # Log configuration source and precedence
        env_vars_present = any(var in os.environ for var in ["SUPABASE_PROJECT_REF", "SUPABASE_DB_PASSWORD"])

        if env_vars_present:
            logger.warning("Using environment variables (highest precedence)")
            if config_file:
                logger.warning(f"Note: Config file {config_file} exists but environment variables take precedence")
            for var in ["SUPABASE_PROJECT_REF", "SUPABASE_DB_PASSWORD"]:
                if var in os.environ:
                    logger.info(f"Using {var} from environment")
        elif config_file:
            logger.info(f"Using settings from config file: {config_file}")
        else:
            logger.info("Using default settings (local development)")

        # Log final configuration
        logger.info("Final configuration:")
        logger.info(f"  Project ref: {instance.supabase_project_ref}")
        logger.info(f"  Password: {'*' * len(instance.supabase_db_password)}")
        logger.info(f"  Region: {instance.supabase_region}")
        logger.info(
            f"  Service role key: {'*' * len(instance.supabase_service_role_key) if instance.supabase_service_role_key else 'Not set'}"
        )
        return instance


# Module-level singleton - maintains existing interface
settings = Settings.with_config(find_config_file())

================
File: supabase_mcp/validators.py
================
from supabase_mcp.exceptions import ValidationError


def validate_schema_name(schema_name: str) -> str:
    """Validate schema name.

    Rules:
    - Must be a string
    - Cannot be empty
    - Cannot contain spaces or special characters
    """
    if not isinstance(schema_name, str):
        raise ValidationError("Schema name must be a string")
    if not schema_name.strip():
        raise ValidationError("Schema name cannot be empty")
    if " " in schema_name:
        raise ValidationError("Schema name cannot contain spaces")
    return schema_name


def validate_table_name(table: str) -> str:
    """Validate table name.

    Rules:
    - Must be a string
    - Cannot be empty
    - Cannot contain spaces or special characters
    """
    if not isinstance(table, str):
        raise ValidationError("Table name must be a string")
    if not table.strip():
        raise ValidationError("Table name cannot be empty")
    if " " in table:
        raise ValidationError("Table name cannot contain spaces")
    return table


def validate_sql_query(query: str) -> str:
    """Validate SQL query.

    Rules:
    - Must be a string
    - Cannot be empty
    """
    if not isinstance(query, str):
        raise ValidationError("Query must be a string")
    if not query.strip():
        raise ValidationError("Query cannot be empty")

    return query


def validate_transaction_control(query: str) -> bool:
    """Validate if the query has transaction control.

    Rules:
    - Must be a string
    - Cannot be empty
    """
    return any(x in query.upper() for x in ["BEGIN", "COMMIT", "ROLLBACK"])

================
File: tests/api_manager/test_api_manager.py
================
import asyncio

import pytest
import pytest_asyncio

from supabase_mcp.api_manager.api_manager import SupabaseApiManager
from supabase_mcp.api_manager.api_safety_config import SafetyLevel
from supabase_mcp.exceptions import SafetyError


@pytest_asyncio.fixture
async def api_manager():
    """Fixture that provides an API manager instance"""
    manager = await SupabaseApiManager.get_manager()
    try:
        yield manager
    finally:
        await manager.close()  # Cleanup after tests


class TestApiManager:
    """Tests for the Supabase Management API manager"""

    @pytest.mark.asyncio
    async def test_safety_modes(self, api_manager):
        """Test API manager safety modes"""
        # Start in safe mode
        assert api_manager.mode == SafetyLevel.SAFE

        # Switch to unsafe mode
        api_manager.switch_mode(SafetyLevel.UNSAFE)
        assert api_manager.mode == SafetyLevel.UNSAFE

        # Switch back to safe mode
        api_manager.switch_mode(SafetyLevel.SAFE)
        assert api_manager.mode == SafetyLevel.SAFE

    def test_mode_safety(self, api_manager):
        """Test that unsafe operations are blocked in safe mode"""
        api_manager.switch_mode(SafetyLevel.SAFE)

        unsafe_operations = [
            ("PATCH", "/v1/projects/123/config/auth"),  # Auth config
            ("PUT", "/v1/projects/123/config/database/postgres"),  # DB config
        ]

        for method, path in unsafe_operations:
            with pytest.raises(SafetyError) as exc:
                asyncio.run(api_manager.execute_request(method, path))  # Keep asyncio.run() in a sync test
            assert "requires YOLO mode" in str(exc.value)

        # Should work in unsafe mode
        api_manager.switch_mode(SafetyLevel.UNSAFE)
        for method, path in unsafe_operations:
            try:
                asyncio.run(api_manager.execute_request(method, path))
            except Exception as e:
                assert not isinstance(e, SafetyError), f"Should not raise SafetyError in unsafe mode: {e}"

    @pytest.mark.asyncio
    async def test_spec_loading(self, api_manager):
        """Test that API spec is properly loaded"""
        spec = api_manager.get_spec()
        assert isinstance(spec, dict)
        assert "paths" in spec  # OpenAPI spec should have paths
        assert "components" in spec  # OpenAPI spec should have components

================
File: tests/api_manager/test_safety_config.py
================
import asyncio

import pytest

from supabase_mcp.api_manager.api_manager import SupabaseApiManager
from supabase_mcp.api_manager.api_safety_config import SafetyConfig, SafetyLevel


@pytest.fixture
def safety_config():
    return SafetyConfig()


@pytest.fixture
async def api_manager():
    """Fixture that provides an API manager instance"""
    manager = SupabaseApiManager.create()  # Properly await the async function
    try:
        yield manager
    finally:
        asyncio.run(manager.close())  # Cleanup after tests


class TestPathMatching:
    """Tests for path matching functionality"""

    def test_basic_path_matching(self, safety_config):
        """Test basic path matching with and without parameters"""
        # Direct matches
        assert safety_config._path_matches("/v1/projects", "/v1/projects")

        # Parameter matches
        assert safety_config._path_matches("/v1/projects/{ref}", "/v1/projects/123")
        assert safety_config._path_matches("/v1/projects/{ref}/functions/{slug}", "/v1/projects/123/functions/my-func")

        # Non-matches
        assert not safety_config._path_matches("/v1/projects", "/v1/other")
        assert not safety_config._path_matches("/v1/projects/{ref}", "/v1/projects/123/extra")
        assert not safety_config._path_matches("/v1/projects", "/v1/projects/123")


class TestSafetyLevels:
    """Tests for operation safety level determination"""

    def test_blocked_operations(self, safety_config):
        """Test blocked operations are correctly identified"""
        test_cases = [
            ("DELETE", "/v1/projects/123"),  # Delete project
            ("DELETE", "/v1/organizations/myorg"),  # Delete org
            ("DELETE", "/v1/projects/123/database"),  # Delete database
        ]

        for method, path in test_cases:
            allowed, reason, level = safety_config.is_operation_allowed(method, path)
            assert not allowed, f"Operation {method} {path} should be blocked"
            assert level == SafetyLevel.BLOCKED
            assert "blocked" in reason.lower()

    def test_unsafe_operations(self, safety_config):
        """Test unsafe operations are correctly identified"""
        test_cases = [
            ("POST", "/v1/projects"),  # Create project
            ("POST", "/v1/organizations"),  # Create org
            ("PATCH", "/v1/projects/123/config/auth"),  # Auth config
            ("PUT", "/v1/projects/123/config/secrets"),  # Secrets
            ("PATCH", "/v1/projects/123/config/pooler"),  # Pooler config
            ("PUT", "/v1/projects/123/config/database/postgres"),  # Postgres config
        ]

        for method, path in test_cases:
            allowed, reason, level = safety_config.is_operation_allowed(method, path)
            assert allowed, f"Operation {method} {path} should be allowed but unsafe"
            assert level == SafetyLevel.UNSAFE
            assert "yolo" in reason.lower()

    def test_safe_operations(self, safety_config):
        """Test safe operations are correctly identified"""
        test_cases = [
            ("GET", "/v1/projects"),  # List projects
            ("GET", "/v1/projects/123/config"),  # Get config
            ("GET", "/v1/organizations"),  # List orgs
        ]

        for method, path in test_cases:
            allowed, reason, level = safety_config.is_operation_allowed(method, path)
            assert allowed, f"Operation {method} {path} should be allowed"
            assert level == SafetyLevel.SAFE
            assert "allowed" in reason.lower()


class TestEdgeCases:
    """Tests for edge cases and error handling"""

    def test_unknown_method(self, safety_config):
        """Test handling of unknown HTTP methods"""
        allowed, reason, level = safety_config.is_operation_allowed("INVALID", "/v1/projects")
        assert level == SafetyLevel.SAFE  # Unknown methods default to safe
        assert allowed

    def test_empty_path(self, safety_config):
        """Test handling of empty paths"""
        allowed, reason, level = safety_config.is_operation_allowed("GET", "")
        assert level == SafetyLevel.SAFE
        assert allowed

    def test_rule_listing(self, safety_config):
        """Test rule listing functionality"""
        rules = safety_config.list_all_rules()
        assert "Blocked operations" in rules
        assert "Unsafe operations" in rules
        # Verify key operations are listed
        assert "/v1/projects/{ref}" in rules  # Blocked operation
        assert "/v1/projects/{ref}/config/auth" in rules  # Unsafe operation

================
File: tests/api_manager/test_spec_manager.py
================
import json
from unittest.mock import AsyncMock, MagicMock, mock_open, patch

import httpx
import pytest
import pytest_asyncio

from supabase_mcp.api_manager.api_spec_manager import ApiSpecManager

# Test data
SAMPLE_SPEC = {"openapi": "3.0.0", "paths": {"/v1/test": {"get": {"operationId": "test"}}}}


@pytest_asyncio.fixture
async def api_spec_manager():
    manager = await ApiSpecManager.create()
    yield manager


# Local Spec Tests
def test_load_local_spec_success(api_spec_manager):
    """Test successful loading of local spec file"""
    mock_file = mock_open(read_data=json.dumps(SAMPLE_SPEC))

    with patch("builtins.open", mock_file):
        result = api_spec_manager._load_local_spec()

    assert result == SAMPLE_SPEC
    mock_file.assert_called_once()


def test_load_local_spec_file_not_found(api_spec_manager):
    """Test handling of missing local spec file"""
    with patch("builtins.open", side_effect=FileNotFoundError), pytest.raises(FileNotFoundError):
        api_spec_manager._load_local_spec()


def test_load_local_spec_invalid_json(api_spec_manager):
    """Test handling of invalid JSON in local spec"""
    mock_file = mock_open(read_data="invalid json")

    with patch("builtins.open", mock_file), pytest.raises(json.JSONDecodeError):
        api_spec_manager._load_local_spec()


# Remote Spec Tests
@pytest.mark.asyncio
async def test_fetch_remote_spec_success(api_spec_manager):
    """Test successful remote spec fetch"""
    mock_response = MagicMock()
    mock_response.status_code = 200
    mock_response.json.return_value = SAMPLE_SPEC

    mock_client = AsyncMock()
    mock_client.get.return_value = mock_response
    mock_client.__aenter__.return_value = mock_client  # Mock async context manager

    with patch("httpx.AsyncClient", return_value=mock_client):
        result = await api_spec_manager._fetch_remote_spec()

    assert result == SAMPLE_SPEC
    mock_client.get.assert_called_once()


@pytest.mark.asyncio
async def test_fetch_remote_spec_api_error(api_spec_manager):
    """Test handling of API error during remote fetch"""
    mock_response = MagicMock()
    mock_response.status_code = 500

    mock_client = AsyncMock()
    mock_client.get.return_value = mock_response
    mock_client.__aenter__.return_value = mock_client  # Mock async context manager

    with patch("httpx.AsyncClient", return_value=mock_client):
        result = await api_spec_manager._fetch_remote_spec()

    assert result is None


@pytest.mark.asyncio
async def test_fetch_remote_spec_network_error(api_spec_manager):
    """Test handling of network error during remote fetch"""
    mock_client = AsyncMock()
    mock_client.get.side_effect = httpx.NetworkError("Network error")

    with patch("httpx.AsyncClient", return_value=mock_client):
        result = await api_spec_manager._fetch_remote_spec()

    assert result is None


# Startup Flow Tests
@pytest.mark.asyncio
async def test_startup_remote_success(api_spec_manager):
    """Test successful startup with remote fetch"""
    mock_fetch = AsyncMock(return_value=SAMPLE_SPEC)

    with patch.object(api_spec_manager, "_fetch_remote_spec", mock_fetch):
        await api_spec_manager.on_startup()

    assert api_spec_manager.spec == SAMPLE_SPEC
    mock_fetch.assert_called_once()


@pytest.mark.asyncio
async def test_startup_remote_fail_local_fallback(api_spec_manager):
    """Test fallback to local spec when remote fetch fails"""
    mock_fetch = AsyncMock(return_value=None)
    mock_local = MagicMock(return_value=SAMPLE_SPEC)

    with (
        patch.object(api_spec_manager, "_fetch_remote_spec", mock_fetch),
        patch.object(api_spec_manager, "_load_local_spec", mock_local),
    ):
        await api_spec_manager.on_startup()

    assert api_spec_manager.spec == SAMPLE_SPEC
    mock_fetch.assert_called_once()
    mock_local.assert_called_once()


@pytest.mark.asyncio
async def test_startup_both_fail(api_spec_manager):
    """Test handling when both remote and local spec loading fail"""
    mock_fetch = AsyncMock(return_value=None)
    mock_local = MagicMock(side_effect=FileNotFoundError)

    with (
        patch.object(api_spec_manager, "_fetch_remote_spec", mock_fetch),
        patch.object(api_spec_manager, "_load_local_spec", mock_local),
        pytest.raises(FileNotFoundError),
    ):
        await api_spec_manager.on_startup()

    mock_fetch.assert_called_once()
    mock_local.assert_called_once()


# Get Spec Tests
def test_get_spec_success(api_spec_manager):
    """Test getting loaded spec"""
    api_spec_manager.spec = SAMPLE_SPEC
    result = api_spec_manager.get_spec()
    assert result == SAMPLE_SPEC


def test_get_spec_not_loaded(api_spec_manager):
    """Test error when spec not loaded"""
    api_spec_manager.spec = None
    with pytest.raises(ValueError, match="OpenAPI spec not loaded"):
        api_spec_manager.get_spec()

================
File: tests/sdk_client/test_auth_admin_models.py
================
import pytest
from pydantic import ValidationError

from supabase_mcp.sdk_client.auth_admin_models import (
    PARAM_MODELS,
    CreateUserParams,
    DeleteFactorParams,
    DeleteUserParams,
    GenerateLinkParams,
    GetUserByIdParams,
    InviteUserByEmailParams,
    ListUsersParams,
    UpdateUserByIdParams,
)


class TestModelConversion:
    """Test conversion from JSON data to models and validation"""

    def test_get_user_by_id_conversion(self):
        """Test conversion of get_user_by_id JSON data"""
        # Valid payload
        valid_payload = {"uid": "d0e8c69f-e0c3-4a1c-b6d6-9a6c756a6a4b"}
        params = GetUserByIdParams.model_validate(valid_payload)
        assert params.uid == valid_payload["uid"]

        # Invalid payload (missing required uid)
        invalid_payload = {}
        with pytest.raises(ValidationError) as excinfo:
            GetUserByIdParams.model_validate(invalid_payload)
        assert "uid" in str(excinfo.value)

    def test_list_users_conversion(self):
        """Test conversion of list_users JSON data"""
        # Valid payload with custom values
        valid_payload = {"page": 2, "per_page": 20}
        params = ListUsersParams.model_validate(valid_payload)
        assert params.page == valid_payload["page"]
        assert params.per_page == valid_payload["per_page"]

        # Valid payload with defaults
        empty_payload = {}
        params = ListUsersParams.model_validate(empty_payload)
        assert params.page == 1
        assert params.per_page == 50

        # Invalid payload (non-integer values)
        invalid_payload = {"page": "not-a-number", "per_page": "also-not-a-number"}
        with pytest.raises(ValidationError) as excinfo:
            ListUsersParams.model_validate(invalid_payload)
        assert "page" in str(excinfo.value)

    def test_create_user_conversion(self):
        """Test conversion of create_user JSON data"""
        # Valid payload with email
        valid_payload = {
            "email": "test@example.com",
            "password": "secure-password",
            "email_confirm": True,
            "user_metadata": {"name": "Test User"},
        }
        params = CreateUserParams.model_validate(valid_payload)
        assert params.email == valid_payload["email"]
        assert params.password == valid_payload["password"]
        assert params.email_confirm is True
        assert params.user_metadata == valid_payload["user_metadata"]

        # Valid payload with phone
        valid_phone_payload = {
            "phone": "+1234567890",
            "password": "secure-password",
            "phone_confirm": True,
        }
        params = CreateUserParams.model_validate(valid_phone_payload)
        assert params.phone == valid_phone_payload["phone"]
        assert params.password == valid_phone_payload["password"]
        assert params.phone_confirm is True

        # Invalid payload (missing both email and phone)
        invalid_payload = {"password": "secure-password"}
        with pytest.raises(ValidationError) as excinfo:
            CreateUserParams.model_validate(invalid_payload)
        assert "Either email or phone must be provided" in str(excinfo.value)

    def test_delete_user_conversion(self):
        """Test conversion of delete_user JSON data"""
        # Valid payload with custom values
        valid_payload = {"id": "d0e8c69f-e0c3-4a1c-b6d6-9a6c756a6a4b", "should_soft_delete": True}
        params = DeleteUserParams.model_validate(valid_payload)
        assert params.id == valid_payload["id"]
        assert params.should_soft_delete is True

        # Valid payload with defaults
        valid_payload = {"id": "d0e8c69f-e0c3-4a1c-b6d6-9a6c756a6a4b"}
        params = DeleteUserParams.model_validate(valid_payload)
        assert params.id == valid_payload["id"]
        assert params.should_soft_delete is False

        # Invalid payload (missing id)
        invalid_payload = {"should_soft_delete": True}
        with pytest.raises(ValidationError) as excinfo:
            DeleteUserParams.model_validate(invalid_payload)
        assert "id" in str(excinfo.value)

    def test_invite_user_by_email_conversion(self):
        """Test conversion of invite_user_by_email JSON data"""
        # Valid payload with options
        valid_payload = {
            "email": "invite@example.com",
            "options": {"data": {"name": "Invited User"}, "redirect_to": "https://example.com/welcome"},
        }
        params = InviteUserByEmailParams.model_validate(valid_payload)
        assert params.email == valid_payload["email"]
        assert params.options == valid_payload["options"]

        # Valid payload without options
        valid_payload = {"email": "invite@example.com"}
        params = InviteUserByEmailParams.model_validate(valid_payload)
        assert params.email == valid_payload["email"]
        assert params.options is None

        # Invalid payload (missing email)
        invalid_payload = {"options": {"data": {"name": "Invited User"}}}
        with pytest.raises(ValidationError) as excinfo:
            InviteUserByEmailParams.model_validate(invalid_payload)
        assert "email" in str(excinfo.value)

    def test_generate_link_conversion(self):
        """Test conversion of generate_link JSON data"""
        # Valid signup link payload
        valid_signup_payload = {
            "type": "signup",
            "email": "user@example.com",
            "password": "secure-password",
            "options": {"data": {"name": "New User"}, "redirect_to": "https://example.com/welcome"},
        }
        params = GenerateLinkParams.model_validate(valid_signup_payload)
        assert params.type == valid_signup_payload["type"]
        assert params.email == valid_signup_payload["email"]
        assert params.password == valid_signup_payload["password"]
        assert params.options == valid_signup_payload["options"]

        # Valid email_change link payload
        valid_email_change_payload = {
            "type": "email_change_current",
            "email": "user@example.com",
            "new_email": "new@example.com",
        }
        params = GenerateLinkParams.model_validate(valid_email_change_payload)
        assert params.type == valid_email_change_payload["type"]
        assert params.email == valid_email_change_payload["email"]
        assert params.new_email == valid_email_change_payload["new_email"]

        # Invalid payload (missing password for signup)
        invalid_signup_payload = {
            "type": "signup",
            "email": "user@example.com",
        }
        with pytest.raises(ValidationError) as excinfo:
            GenerateLinkParams.model_validate(invalid_signup_payload)
        assert "Password is required for signup links" in str(excinfo.value)

        # Invalid payload (missing new_email for email_change)
        invalid_email_change_payload = {
            "type": "email_change_current",
            "email": "user@example.com",
        }
        with pytest.raises(ValidationError) as excinfo:
            GenerateLinkParams.model_validate(invalid_email_change_payload)
        assert "new_email is required for email change links" in str(excinfo.value)

        # Invalid payload (invalid type)
        invalid_type_payload = {
            "type": "invalid-type",
            "email": "user@example.com",
        }
        with pytest.raises(ValidationError) as excinfo:
            GenerateLinkParams.model_validate(invalid_type_payload)
        assert "type" in str(excinfo.value)

    def test_update_user_by_id_conversion(self):
        """Test conversion of update_user_by_id JSON data"""
        # Valid payload
        valid_payload = {
            "uid": "d0e8c69f-e0c3-4a1c-b6d6-9a6c756a6a4b",
            "email": "updated@example.com",
            "user_metadata": {"name": "Updated User"},
        }
        params = UpdateUserByIdParams.model_validate(valid_payload)
        assert params.uid == valid_payload["uid"]
        assert params.email == valid_payload["email"]
        assert params.user_metadata == valid_payload["user_metadata"]

        # Invalid payload (missing uid)
        invalid_payload = {
            "email": "updated@example.com",
            "user_metadata": {"name": "Updated User"},
        }
        with pytest.raises(ValidationError) as excinfo:
            UpdateUserByIdParams.model_validate(invalid_payload)
        assert "uid" in str(excinfo.value)

    def test_delete_factor_conversion(self):
        """Test conversion of delete_factor JSON data"""
        # Valid payload
        valid_payload = {
            "user_id": "d0e8c69f-e0c3-4a1c-b6d6-9a6c756a6a4b",
            "id": "totp-factor-id-123",
        }
        params = DeleteFactorParams.model_validate(valid_payload)
        assert params.user_id == valid_payload["user_id"]
        assert params.id == valid_payload["id"]

        # Invalid payload (missing user_id)
        invalid_payload = {
            "id": "totp-factor-id-123",
        }
        with pytest.raises(ValidationError) as excinfo:
            DeleteFactorParams.model_validate(invalid_payload)
        assert "user_id" in str(excinfo.value)

        # Invalid payload (missing id)
        invalid_payload = {
            "user_id": "d0e8c69f-e0c3-4a1c-b6d6-9a6c756a6a4b",
        }
        with pytest.raises(ValidationError) as excinfo:
            DeleteFactorParams.model_validate(invalid_payload)
        assert "id" in str(excinfo.value)

    def test_param_models_mapping(self):
        """Test PARAM_MODELS mapping functionality"""
        # Test that all methods have the correct corresponding model
        method_model_pairs = [
            ("get_user_by_id", GetUserByIdParams),
            ("list_users", ListUsersParams),
            ("create_user", CreateUserParams),
            ("delete_user", DeleteUserParams),
            ("invite_user_by_email", InviteUserByEmailParams),
            ("generate_link", GenerateLinkParams),
            ("update_user_by_id", UpdateUserByIdParams),
            ("delete_factor", DeleteFactorParams),
        ]

        for method, expected_model in method_model_pairs:
            assert method in PARAM_MODELS
            assert PARAM_MODELS[method] == expected_model

        # Test actual validation of data through PARAM_MODELS mapping
        method = "create_user"
        model_class = PARAM_MODELS[method]

        valid_payload = {"email": "test@example.com", "password": "secure-password"}

        params = model_class.model_validate(valid_payload)
        assert params.email == valid_payload["email"]
        assert params.password == valid_payload["password"]

================
File: tests/sdk_client/test_python_client.py
================
from unittest.mock import AsyncMock, MagicMock, patch

import pytest
import pytest_asyncio

from supabase_mcp.exceptions import PythonSDKError
from supabase_mcp.sdk_client.auth_admin_models import PARAM_MODELS
from supabase_mcp.sdk_client.python_client import SupabaseSDKClient


@pytest_asyncio.fixture
async def mock_supabase_client():
    """Mock the Supabase client"""
    mock_client = MagicMock()
    mock_client.auth = MagicMock()
    mock_client.auth.admin = MagicMock()

    # Mock all the admin methods
    for method_name in PARAM_MODELS.keys():
        setattr(mock_client.auth.admin, method_name, AsyncMock(return_value={"success": True}))

    return mock_client


@pytest_asyncio.fixture
async def sdk_client(mock_supabase_client):
    """Create a test instance of the SDK client with a mocked Supabase client"""
    # Reset singleton before test
    SupabaseSDKClient._instance = None

    # Create client with test project info and mocked create_async_client
    with patch("supabase_mcp.sdk_client.python_client.create_async_client", return_value=mock_supabase_client):
        client = await SupabaseSDKClient.create("test-project", "test-key")
        yield client

    # Reset singleton after test
    SupabaseSDKClient._instance = None


@pytest.mark.asyncio
class TestSDKClient:
    """Test the Supabase SDK client focusing on core functionality"""

    async def test_url_construction(self):
        """Test URL construction from project reference"""
        client = SupabaseSDKClient("my-project", "my-key")
        url = client.get_supabase_url()
        assert url == "https://my-project.supabase.co"

    async def test_singleton_pattern(self, sdk_client):
        """Test that get_instance returns the singleton instance"""
        # First call to get_instance should return the existing instance
        instance1 = await SupabaseSDKClient.get_instance()
        assert instance1 is sdk_client

        # Second call should return the same instance
        instance2 = await SupabaseSDKClient.get_instance()
        assert instance2 is instance1

    async def test_return_sdk_spec(self, sdk_client):
        """Test that return_python_sdk_spec returns the SDK spec"""
        with patch("supabase_mcp.sdk_client.python_client.get_auth_admin_methods_spec") as mock_get_spec:
            mock_get_spec.return_value = {"test": "spec"}
            result = sdk_client.return_python_sdk_spec()
            assert result == {"test": "spec"}

    async def test_client_init_error(self):
        """Test error handling during client initialization"""
        with patch("supabase_mcp.sdk_client.python_client.create_async_client") as mock_create:
            mock_create.side_effect = Exception("Connection error")

            with pytest.raises(PythonSDKError) as excinfo:
                await SupabaseSDKClient.create("error-project", "error-key")

            assert "Error creating Supabase SDK client" in str(excinfo.value)

    async def test_call_auth_admin_method_validation(self, sdk_client):
        """Test parameter validation when calling auth admin methods"""
        # Valid parameters
        valid_params = {"uid": "test-user-id"}
        result = await sdk_client.call_auth_admin_method("get_user_by_id", valid_params)
        assert result == {"success": True}

        # Invalid parameters (missing required field)
        invalid_params = {}
        with pytest.raises(PythonSDKError) as excinfo:
            await sdk_client.call_auth_admin_method("get_user_by_id", invalid_params)
        assert "Invalid parameters" in str(excinfo.value)

        # Unknown method
        with pytest.raises(PythonSDKError) as excinfo:
            await sdk_client.call_auth_admin_method("unknown_method", {})
        assert "Unknown method" in str(excinfo.value)

    async def test_method_exception_handling(self, sdk_client, mock_supabase_client):
        """Test exception handling when auth admin methods raise errors"""
        # Mock the get_user_by_id method to raise an exception
        error_message = "User not found"
        mock_supabase_client.auth.admin.get_user_by_id.side_effect = Exception(error_message)

        # Call the method and check that the exception is properly wrapped
        with pytest.raises(PythonSDKError) as excinfo:
            await sdk_client.call_auth_admin_method("get_user_by_id", {"uid": "nonexistent-id"})

        assert error_message in str(excinfo.value)
        assert "Error calling get_user_by_id" in str(excinfo.value)

    async def test_local_url_construction_with_port(self):
        """Test URL construction for local instance with IP and port"""
        # Test that the implementation correctly handles a project_ref with a port
        client = SupabaseSDKClient("127.0.0.1:5432", "my-key")
        url = client.get_supabase_url()
        # The implementation should extract just the host and use port 54321
        assert url == "http://127.0.0.1:54321"

    async def test_local_url_construction_with_default_settings(self):
        """Test URL construction for local instance with default settings"""
        # Test with the default project_ref from settings (127.0.0.1:54322)
        client = SupabaseSDKClient("127.0.0.1:54322", "my-key")
        url = client.get_supabase_url()
        # The implementation should extract just the host and use port 54321
        assert url == "http://127.0.0.1:54321"

================
File: tests/sdk_client/test_sdk_client_integration.py
================
import os
import time
import uuid
from datetime import datetime

import pytest
import pytest_asyncio

from supabase_mcp.exceptions import PythonSDKError
from supabase_mcp.sdk_client.python_client import SupabaseSDKClient

# Unique identifier for test users to avoid conflicts
TEST_ID = f"test-{int(time.time())}-{uuid.uuid4().hex[:6]}"


# Create unique test emails
def get_test_email(prefix="user"):
    """Generate a unique test email"""
    return f"a.zuev+{prefix}-{TEST_ID}@outlook.com"


@pytest_asyncio.fixture
async def sdk_client():
    """
    Create a SupabaseSDKClient instance for integration testing.
    Uses environment variables directly.
    """
    # Reset the singleton to ensure we get a fresh instance
    SupabaseSDKClient._instance = None

    # Get Supabase credentials from environment variables
    project_ref = os.environ.get("SUPABASE_PROJECT_REF")
    service_role_key = os.environ.get("SUPABASE_SERVICE_ROLE_KEY")

    if not project_ref or not service_role_key:
        pytest.skip("SUPABASE_PROJECT_REF or SUPABASE_SERVICE_ROLE_KEY environment variables not set")

    client = await SupabaseSDKClient.create(project_ref, service_role_key)
    yield client

    # Cleanup after tests
    SupabaseSDKClient._instance = None


@pytest.mark.asyncio
class TestSDKClientIntegration:
    """
    Integration tests for the SupabaseSDKClient.
    These tests make actual API calls to the Supabase Auth service.
    """

    async def test_list_users(self, sdk_client):
        """Test listing users with pagination"""
        # Create test parameters
        list_params = {"page": 1, "per_page": 10}

        # List users
        result = await sdk_client.call_auth_admin_method("list_users", list_params)

        # Verify response format
        assert result is not None
        assert hasattr(result, "__iter__")  # Should be iterable (list of users)
        assert len(result) >= 0  # Should have users or be empty

        # Check that the first user has expected attributes if there are any users
        if len(result) > 0:
            first_user = result[0]
            assert hasattr(first_user, "id")
            assert hasattr(first_user, "email")
            assert hasattr(first_user, "user_metadata")

        # Test with invalid parameters (negative page number)
        invalid_params = {"page": -1, "per_page": 10}
        with pytest.raises(PythonSDKError) as excinfo:
            await sdk_client.call_auth_admin_method("list_users", invalid_params)

        # The actual error message contains "Bad Pagination Parameters" instead of "Invalid parameters"
        assert "Bad Pagination Parameters" in str(excinfo.value)

    async def test_get_user_by_id(self, sdk_client):
        """Test retrieving a user by ID"""
        # First create a user to get
        test_email = get_test_email("get")
        create_params = {
            "email": test_email,
            "password": f"Password123!{TEST_ID}",
            "email_confirm": True,
            "user_metadata": {"name": "Test User", "test_id": TEST_ID},
        }

        # Create the user
        create_result = await sdk_client.call_auth_admin_method("create_user", create_params)
        assert create_result is not None
        assert hasattr(create_result, "user")
        user_id = create_result.user.id

        try:
            # Get the user by ID
            get_params = {"uid": user_id}
            get_result = await sdk_client.call_auth_admin_method("get_user_by_id", get_params)

            # Verify user data
            assert get_result is not None
            assert hasattr(get_result, "user")
            assert get_result.user.id == user_id
            assert get_result.user.email == test_email
            assert get_result.user.user_metadata["test_id"] == TEST_ID

            # Test with invalid parameters (non-existent user ID)
            invalid_params = {"uid": "non-existent-user-id"}
            with pytest.raises(PythonSDKError) as excinfo:
                await sdk_client.call_auth_admin_method("get_user_by_id", invalid_params)

            # The actual error message contains "user_id must be an UUID" instead of "user not found"
            assert "user_id must be an UUID" in str(excinfo.value)

        finally:
            # Clean up - delete the test user
            delete_params = {"id": user_id}
            await sdk_client.call_auth_admin_method("delete_user", delete_params)

    async def test_create_user(self, sdk_client):
        """Test creating a new user"""
        # Create a new test user
        test_email = get_test_email("create")
        create_params = {
            "email": test_email,
            "password": f"Password123!{TEST_ID}",
            "email_confirm": True,
            "user_metadata": {"name": "Test User", "test_id": TEST_ID},
        }

        # Create the user
        create_result = await sdk_client.call_auth_admin_method("create_user", create_params)
        assert create_result is not None
        assert hasattr(create_result, "user")
        assert hasattr(create_result.user, "id")
        user_id = create_result.user.id

        try:
            # Verify user was created
            get_params = {"uid": user_id}
            get_result = await sdk_client.call_auth_admin_method("get_user_by_id", get_params)
            assert get_result is not None
            assert hasattr(get_result, "user")
            assert get_result.user.email == test_email

            # Test with invalid parameters (missing required fields)
            invalid_params = {"user_metadata": {"name": "Invalid User"}}
            with pytest.raises(PythonSDKError) as excinfo:
                await sdk_client.call_auth_admin_method("create_user", invalid_params)

            assert "Invalid parameters" in str(excinfo.value)

        finally:
            # Clean up - delete the test user
            delete_params = {"id": user_id}
            await sdk_client.call_auth_admin_method("delete_user", delete_params)

    async def test_update_user_by_id(self, sdk_client):
        """Test updating a user's attributes"""
        # Create a new test user
        test_email = get_test_email("update")
        create_params = {
            "email": test_email,
            "password": f"Password123!{TEST_ID}",
            "email_confirm": True,
            "user_metadata": {"name": "Before Update", "test_id": TEST_ID},
        }

        # Create the user
        create_result = await sdk_client.call_auth_admin_method("create_user", create_params)
        assert hasattr(create_result, "user")
        user_id = create_result.user.id

        try:
            # Update the user
            update_params = {
                "uid": user_id,
                "user_metadata": {
                    "name": "After Update",
                    "test_id": TEST_ID,
                    "updated_at": datetime.now().isoformat(),
                },
            }

            update_result = await sdk_client.call_auth_admin_method("update_user_by_id", update_params)

            # Verify user was updated
            assert update_result is not None
            assert hasattr(update_result, "user")
            assert update_result.user.id == user_id
            assert update_result.user.user_metadata["name"] == "After Update"
            assert "updated_at" in update_result.user.user_metadata

            # Test with invalid parameters (non-existent user ID)
            invalid_params = {"uid": "non-existent-user-id", "user_metadata": {"name": "Invalid Update"}}
            with pytest.raises(PythonSDKError) as excinfo:
                await sdk_client.call_auth_admin_method("update_user_by_id", invalid_params)

            # The actual error message contains "user_id must be an uuid" instead of "user not found"
            assert "user_id must be an uuid" in str(excinfo.value).lower()

        finally:
            # Clean up - delete the test user
            delete_params = {"id": user_id}
            await sdk_client.call_auth_admin_method("delete_user", delete_params)

    async def test_delete_user(self, sdk_client):
        """Test deleting a user"""
        # Create a new test user
        test_email = get_test_email("delete")
        create_params = {
            "email": test_email,
            "password": f"Password123!{TEST_ID}",
            "email_confirm": True,
            "user_metadata": {"name": "Delete Test User", "test_id": TEST_ID},
        }

        # Create the user
        create_result = await sdk_client.call_auth_admin_method("create_user", create_params)
        assert hasattr(create_result, "user")
        user_id = create_result.user.id

        # Delete the user
        delete_params = {"id": user_id}
        # The delete_user method returns None on success, so we just check that it doesn't raise an exception
        await sdk_client.call_auth_admin_method("delete_user", delete_params)

        # No need to assert on the result, as the API returns None on success
        # We'll verify deletion by trying to get the user and expecting an error

        # Verify user no longer exists
        get_params = {"uid": user_id}
        with pytest.raises(PythonSDKError) as excinfo:
            await sdk_client.call_auth_admin_method("get_user_by_id", get_params)

        assert "user not found" in str(excinfo.value).lower() or "not found" in str(excinfo.value).lower()

        # Test with invalid parameters (non-UUID format user ID)
        invalid_params = {"id": "non-existent-user-id"}
        with pytest.raises(PythonSDKError) as excinfo:
            await sdk_client.call_auth_admin_method("delete_user", invalid_params)

        # The API validates UUID format before checking if user exists
        assert "user_id must be an uuid" in str(excinfo.value).lower()

    async def test_invite_user_by_email(self, sdk_client):
        """Test inviting a user by email"""
        # Create invite parameters
        test_email = get_test_email("invite")
        invite_params = {
            "email": test_email,
            "options": {"data": {"name": "Invited User", "test_id": TEST_ID, "invited_at": datetime.now().isoformat()}},
        }

        # Invite the user
        try:
            result = await sdk_client.call_auth_admin_method("invite_user_by_email", invite_params)

            # Verify response
            assert result is not None
            assert hasattr(result, "user")
            assert result.user.email == test_email
            assert hasattr(result.user, "invited_at")

            # Clean up - delete the invited user
            if hasattr(result.user, "id"):
                delete_params = {"id": result.user.id}
                await sdk_client.call_auth_admin_method("delete_user", delete_params)

            # Test with invalid parameters (missing email)
            invalid_params = {"options": {"data": {"name": "Invalid Invite"}}}
            with pytest.raises(PythonSDKError) as excinfo:
                await sdk_client.call_auth_admin_method("invite_user_by_email", invalid_params)

            assert "Invalid parameters" in str(excinfo.value)

        except PythonSDKError as e:
            # Some Supabase instances may have email sending disabled,
            # so we'll check if the error is related to that
            if "sending emails is not configured" in str(e).lower():
                pytest.skip("Email sending is not configured in this Supabase instance")
            else:
                raise

    async def test_generate_link(self, sdk_client):
        """Test generating authentication links"""
        # Test different link types
        link_types = ["signup", "magiclink", "recovery"]
        created_user_ids = []

        for link_type in link_types:
            test_email = get_test_email(f"link-{link_type}")

            # For magiclink and recovery, we need to create the user first
            if link_type in ["magiclink", "recovery"]:
                # Create a user first
                create_params = {
                    "email": test_email,
                    "password": f"Password123!{TEST_ID}",
                    "email_confirm": True,
                    "user_metadata": {"name": f"{link_type.capitalize()} User", "test_id": TEST_ID},
                }

                try:
                    create_result = await sdk_client.call_auth_admin_method("create_user", create_params)
                    if hasattr(create_result, "user") and hasattr(create_result.user, "id"):
                        created_user_ids.append(create_result.user.id)
                except PythonSDKError as e:
                    pytest.skip(f"Failed to create user for {link_type} test: {str(e)}")
                    continue

            # Different parameters based on link type
            if link_type == "signup":
                link_params = {
                    "type": link_type,
                    "email": test_email,
                    "password": f"Password123!{TEST_ID}",
                    "options": {
                        "data": {"name": f"{link_type.capitalize()} User", "test_id": TEST_ID},
                        "redirect_to": "https://example.com/welcome",
                    },
                }
            else:
                link_params = {
                    "type": link_type,
                    "email": test_email,
                    "options": {
                        "data": {"name": f"{link_type.capitalize()} User", "test_id": TEST_ID},
                        "redirect_to": "https://example.com/welcome",
                    },
                }

            try:
                # Generate link
                result = await sdk_client.call_auth_admin_method("generate_link", link_params)

                # Verify response
                assert result is not None
                assert hasattr(result, "properties")
                assert hasattr(result.properties, "action_link")

                # If a user was created during link generation (for signup), store ID for cleanup
                if hasattr(result, "user") and hasattr(result.user, "id"):
                    created_user_ids.append(result.user.id)

            except PythonSDKError as e:
                # Some Supabase instances may have email sending disabled
                if "sending emails is not configured" in str(e).lower():
                    pytest.skip(f"Email sending is not configured for {link_type} links")
                else:
                    raise

        # Test with invalid parameters (invalid link type)
        invalid_params = {"type": "invalid_type", "email": get_test_email("invalid")}
        with pytest.raises(PythonSDKError) as excinfo:
            await sdk_client.call_auth_admin_method("generate_link", invalid_params)

        assert "Invalid parameters" in str(excinfo.value) or "invalid type" in str(excinfo.value).lower()

        # Clean up any created users
        for user_id in created_user_ids:
            try:
                delete_params = {"id": user_id}
                await sdk_client.call_auth_admin_method("delete_user", delete_params)
            except Exception:
                pass

    async def test_delete_factor(self, sdk_client):
        """Test deleting an MFA factor"""
        # Create a test user
        test_email = get_test_email("factor")
        create_params = {
            "email": test_email,
            "password": f"Password123!{TEST_ID}",
            "email_confirm": True,
            "user_metadata": {"name": "Factor Test User", "test_id": TEST_ID},
        }

        # Create the user
        create_result = await sdk_client.call_auth_admin_method("create_user", create_params)
        assert hasattr(create_result, "user")
        user_id = create_result.user.id

        try:
            # Attempt to delete a factor (this will likely fail as the method is not implemented)
            delete_factor_params = {"user_id": user_id, "id": "non-existent-factor-id"}

            try:
                await sdk_client.call_auth_admin_method("delete_factor", delete_factor_params)
                # If it succeeds (unlikely), we should assert something
                assert False, "delete_factor should not succeed as it's not implemented"
            except PythonSDKError as e:
                # We expect this to fail with a specific error message
                assert "not implemented" in str(e).lower() or "method not found" in str(e).lower()

        finally:
            # Clean up - delete the test user
            delete_params = {"id": user_id}
            await sdk_client.call_auth_admin_method("delete_user", delete_params)

    async def test_empty_parameters(self, sdk_client):
        """Test validation errors with empty parameters for various methods"""
        # Test methods with empty parameters
        methods = ["get_user_by_id", "create_user", "update_user_by_id", "delete_user", "generate_link"]

        for method in methods:
            empty_params = {}

            # Should raise PythonSDKError containing validation error details
            with pytest.raises(PythonSDKError) as excinfo:
                await sdk_client.call_auth_admin_method(method, empty_params)

            # Verify error message contains validation info
            assert "Invalid parameters" in str(excinfo.value)

================
File: tests/conftest.py
================
import os
from collections.abc import Generator
from pathlib import Path

import pytest
from dotenv import load_dotenv

from supabase_mcp.db_client.db_client import SupabaseClient
from supabase_mcp.logger import logger
from supabase_mcp.settings import Settings


def load_test_env() -> dict:
    """Load test environment variables from .env.test file"""
    env_test_path = Path(__file__).parent.parent / ".env.test"
    if not env_test_path.exists():
        raise FileNotFoundError(f"Test environment file not found at {env_test_path}")

    load_dotenv(env_test_path)
    return {
        "SUPABASE_PROJECT_REF": os.getenv("SUPABASE_PROJECT_REF"),
        "SUPABASE_DB_PASSWORD": os.getenv("SUPABASE_DB_PASSWORD"),
    }


@pytest.fixture
def clean_environment() -> Generator[None, None, None]:
    """Fixture to provide a clean environment without Supabase-related variables"""
    # Store original environment
    original_env = dict(os.environ)

    # Remove Supabase-related environment variables
    for key in ["SUPABASE_PROJECT_REF", "SUPABASE_DB_PASSWORD"]:
        os.environ.pop(key, None)

    yield

    # Restore original environment
    os.environ.clear()
    os.environ.update(original_env)


@pytest.fixture
def clean_settings(clean_environment) -> Generator[Settings, None, None]:
    """Fixture to provide a clean Settings instance without any environment variables"""

    # Clear SupabaseClient singleton
    if hasattr(SupabaseClient, "_instance"):
        delattr(SupabaseClient, "_instance")

    settings = Settings()
    logger.info(f"Clean settings initialized: {settings}")
    yield settings


@pytest.fixture
def custom_connection_settings() -> Generator[Settings, None, None]:
    """Fixture that provides Settings instance for integration tests using .env.test"""

    # Clear SupabaseClient singleton
    SupabaseClient.reset()

    # Load test environment
    test_env = load_test_env()
    original_env = dict(os.environ)

    # Set up test environment
    os.environ.update(test_env)

    # Create fresh settings instance
    settings = Settings()
    logger.info(f"Custom connection settings initialized: {settings}")

    yield settings

    # Restore original environment
    os.environ.clear()
    os.environ.update(original_env)


@pytest.fixture
def custom_connection_client(custom_connection_settings):
    """Fixture providing a client connected to test database"""
    client = SupabaseClient(settings_instance=custom_connection_settings)
    yield client
    client.close()  # Ensure connection is closed after test


@pytest.fixture
def integration_client() -> Generator[SupabaseClient, None, None]:
    """Fixture providing a client connected to a database for integration tests.

    This fixture uses the default settings for connecting to the database,
    which makes it work automatically with local Supabase or CI environments.
    """
    # Reset the SupabaseClient singleton to ensure we get a fresh instance
    SupabaseClient.reset()

    # Create client using default settings
    client = SupabaseClient.create()

    # Log connection details (without credentials)
    db_url_parts = client.db_url.split("@")
    if len(db_url_parts) > 1:
        safe_conn_info = db_url_parts[1]
    else:
        safe_conn_info = "unknown"
    logger.info(f"Integration client connecting to: {safe_conn_info}")

    yield client

    # Clean up
    client.close()

================
File: tests/test_main.py
================
import asyncio
import os
import subprocess
from unittest.mock import ANY, patch

import pytest

from supabase_mcp.logger import logger
from supabase_mcp.main import inspector, mcp, run

# === UNIT TESTS ===


@pytest.mark.unit
def test_mcp_server_initializes():
    """Test that MCP server initializes with default configuration and tools"""
    # Verify server name
    assert mcp.name == "supabase"

    # Verify tools are properly registered using the actual MCP protocol
    tools = asyncio.run(mcp.list_tools())
    assert len(tools) >= 4, "Expected at least 4 tools to be registered"

    # Verify each tool has proper MCP protocol structure
    for tool in tools:
        assert tool.name, "Tool must have a name"
        assert tool.description, "Tool must have a description"
        assert tool.inputSchema, "Tool must have an input schema"

    # Verify our core tools are registered
    tool_names = {tool.name for tool in tools}
    required_tools = {"get_db_schemas", "get_tables", "get_table_schema", "execute_sql_query"}
    assert required_tools.issubset(tool_names), f"Missing required tools. Found: {tool_names}"


@pytest.mark.unit
def test_run_server_starts():
    """Test that server run function executes without errors"""
    with patch("supabase_mcp.main.mcp.run") as mock_run:
        run()
        mock_run.assert_called_once()


@pytest.mark.unit
def test_inspector_mode():
    """Test that inspector mode initializes correctly"""
    with patch("mcp.cli.cli.dev") as mock_dev:
        inspector()
        mock_dev.assert_called_once_with(file_spec=ANY)


@pytest.mark.unit
def test_server_command_starts():
    """Test that the server command executes without errors"""
    result = subprocess.run(
        ["supabase-mcp-server"],
        capture_output=True,
        text=True,
        timeout=2,  # Kill after 2 seconds since it's a server
    )
    assert result.returncode == 0, f"Server command failed: {result.stderr}"


@pytest.mark.unit
def test_mcp_server_tools():
    """Test that all expected tools are registered and accessible"""
    tools = asyncio.run(mcp.list_tools())

    # Verify we have all our tools
    tool_names = {tool.name for tool in tools}

    # All tools defined in main.py
    all_required_tools = {
        "get_db_schemas",
        "get_tables",
        "get_table_schema",
        "execute_sql_query",
        "send_management_api_request",
        "live_dangerously",
        "get_management_api_spec",
        "get_management_api_safety_rules",
    }

    assert all_required_tools.issubset(tool_names), (
        f"Missing required tools. Found: {tool_names}, Expected: {all_required_tools}"
    )

    # Verify tools have descriptions
    for tool in tools:
        assert tool.description, f"Tool {tool.name} missing description"
        assert tool.inputSchema is not None, f"Tool {tool.name} missing input schema"


# === INTEGRATION TESTS ===


@pytest.mark.integration
@pytest.mark.asyncio
async def test_db_tools_execution():
    """Integration test that verifies DB tools actually work

    Requires:
    - SUPABASE_PROJECT_REF
    - SUPABASE_DB_PASSWORD
    environment variables to be set
    """


@pytest.mark.integration
@pytest.mark.asyncio
async def test_get_db_schemas_tool(integration_client):
    """Test the get_db_schemas tool retrieves schema information properly.

    This test checks:
    1. The tool executes successfully
    2. Returns data in the expected format
    3. Contains at least the public schema
    """
    # Call the actual tool function from main.py
    from supabase_mcp.main import get_db_schemas

    # Execute the tool
    result = await get_db_schemas()

    # Verify result structure (should be a QueryResult)
    assert hasattr(result, "rows"), "Result should have rows attribute"
    assert hasattr(result, "count"), "Result should have count attribute"
    assert hasattr(result, "status"), "Result should have status attribute"

    # Verify we have some data
    assert result.count > 0, "Should return at least some schemas"

    # Get schema names for inspection
    schema_names = [schema["schema_name"] for schema in result.rows]

    # In Supabase, we at least expect the public schema to be available
    assert "public" in schema_names, "Expected 'public' schema not found"

    # Log available schemas for debugging
    logger.info(f"Available schemas: {schema_names}")

    # Verify schema structure
    first_schema = result.rows[0]
    expected_fields = ["schema_name", "total_size", "table_count"]
    for field in expected_fields:
        assert field in first_schema, f"Schema result missing '{field}' field"


@pytest.mark.integration
@pytest.mark.asyncio
async def test_get_tables_tool(integration_client):
    """Test the get_tables tool retrieves table information from a schema.

    This test checks:
    1. The tool executes successfully
    2. Returns data in the expected format
    """
    # Call the actual tool function from main.py
    from supabase_mcp.main import get_tables

    # Execute the tool for the public schema
    result = await get_tables("public")

    # Verify result structure (should be a QueryResult)
    assert hasattr(result, "rows"), "Result should have rows attribute"
    assert hasattr(result, "count"), "Result should have count attribute"
    assert hasattr(result, "status"), "Result should have status attribute"

    # Log result for debugging
    logger.info(f"Found {result.count} tables in public schema")

    # If tables exist, verify their structure
    if result.count > 0:
        # Log table names
        table_names = [table.get("table_name") for table in result.rows]
        logger.info(f"Tables in public schema: {table_names}")

        # Verify table structure
        first_table = result.rows[0]
        expected_fields = ["table_name", "table_type"]
        for field in expected_fields:
            assert field in first_table, f"Table result missing '{field}' field"


@pytest.mark.integration
@pytest.mark.asyncio
async def test_get_table_schema_tool(integration_client):
    """Test the get_table_schema tool retrieves column information for a table.

    This test checks:
    1. The tool executes successfully
    2. Returns data in the expected format
    3. Contains expected column information
    """
    # Call the actual tool functions from main.py
    from supabase_mcp.main import get_table_schema, get_tables

    # First get available tables in public schema
    tables_result = await get_tables("public")

    # Skip test if no tables available
    if tables_result.count == 0:
        pytest.skip("No tables available in public schema to test table schema")

    # Get the first table name to test with
    first_table = tables_result.rows[0]["table_name"]
    logger.info(f"Testing schema for table: {first_table}")

    # Execute the get_table_schema tool
    result = await get_table_schema("public", first_table)

    # Verify result structure
    assert hasattr(result, "rows"), "Result should have rows attribute"
    assert hasattr(result, "count"), "Result should have count attribute"
    assert hasattr(result, "status"), "Result should have status attribute"

    # Verify we have column data
    logger.info(f"Found {result.count} columns for table {first_table}")

    # If columns exist, verify their structure
    if result.count > 0:
        # Verify column structure
        first_column = result.rows[0]
        expected_fields = ["column_name", "data_type", "is_nullable"]
        for field in expected_fields:
            assert field in first_column, f"Column result missing '{field}' field"

        # Log column names for debugging
        column_names = [column.get("column_name") for column in result.rows]
        logger.info(f"Columns in {first_table}: {column_names}")


@pytest.mark.integration
@pytest.mark.asyncio
async def test_execute_sql_query_tool(integration_client):
    """Test the execute_sql_query tool runs arbitrary SQL queries.

    This test checks:
    1. The tool executes successfully
    2. Returns data in the expected format
    3. Can handle multiple query types
    """
    # Call the actual tool function from main.py
    from supabase_mcp.main import execute_sql_query

    # Test a simple SELECT query
    result = await execute_sql_query("SELECT 1 as number, 'test' as text")

    # Verify result structure
    assert hasattr(result, "rows"), "Result should have rows attribute"
    assert hasattr(result, "count"), "Result should have count attribute"
    assert hasattr(result, "status"), "Result should have status attribute"

    # Verify data matches what we expect
    assert result.count == 1, "Expected exactly one row"
    assert result.rows[0]["number"] == 1, "First column should be 1"
    assert result.rows[0]["text"] == "test", "Second column should be 'test'"

    # Test a query with no results
    result = await execute_sql_query(
        "SELECT * FROM information_schema.tables WHERE table_name = 'nonexistent_table_xyz123'"
    )
    assert result.count == 0, "Should return zero rows for non-matching query"

    # Test a more complex query that joins tables
    complex_result = await execute_sql_query("""
        SELECT
            table_schema,
            table_name,
            column_name
        FROM
            information_schema.columns
        WHERE
            table_schema = 'public'
        LIMIT 5
    """)

    # Log result for debugging
    logger.info(f"Complex query returned {complex_result.count} rows")

    # Verify structure of complex query result
    if complex_result.count > 0:
        expected_fields = ["table_schema", "table_name", "column_name"]
        for field in expected_fields:
            assert field in complex_result.rows[0], f"Result missing '{field}' field"


@pytest.mark.integration
@pytest.mark.asyncio
@pytest.mark.skipif(not os.getenv("CI"), reason="Management API test only runs in CI environment")
async def test_management_api_request_tool(integration_client):
    """Test the send_management_api_request tool for accessing Management API.

    This test:
    1. Only runs in CI environments where proper credentials are set up
    2. Makes a simple GET request to the API
    3. Verifies the tool handles requests correctly

    Requires:
    - SUPABASE_ACCESS_TOKEN environment variable to be set
    - Running in a CI environment
    """
    from supabase_mcp.api_manager.api_manager import SupabaseApiManager
    from supabase_mcp.main import send_management_api_request

    # Create a dedicated API manager for this test
    api_manager = await SupabaseApiManager.create()

    # Patch the get_manager method to return our dedicated instance
    with patch("supabase_mcp.api_manager.api_manager.SupabaseApiManager.get_manager", return_value=api_manager):
        try:
            # Make a simple GET request to list projects (a safe read-only operation)
            # This should work with any valid access token
            result = await send_management_api_request(
                method="GET", path="/v1/projects", request_params={}, request_body={}
            )

            # Verify we got a valid response - the API returns a list of projects
            assert isinstance(result, list), "Result should be a list of projects"

            # If we got project data, verify it has the expected structure
            if len(result) > 0:
                # Check the first project has expected fields
                project = result[0]
                assert isinstance(project, dict), "Project items should be dictionaries"
                assert "id" in project, "Project should have an ID"
                assert "name" in project, "Project should have a name"
                assert "database" in project, "Project should have database info"

                logger.info(f"Successfully retrieved {len(result)} projects")
            else:
                logger.warning("API returned an empty list of projects")
        finally:
            # Ensure we close the client even if the test fails
            await api_manager.close()


@pytest.mark.unit
@pytest.mark.asyncio
async def test_live_dangerously_tool():
    """Test the live_dangerously tool for toggling safety modes.

    This test checks:
    1. The tool correctly toggles between safe and unsafe modes
    2. Works for both API and database services
    3. Returns the appropriate status information
    """
    from supabase_mcp.api_manager.api_safety_config import SafetyLevel
    from supabase_mcp.main import live_dangerously

    # Test database service mode switching
    # Start with safe mode
    result = await live_dangerously(service="database", enable=False)
    assert result["service"] == "database", "Response should identify database service"
    assert result["mode"] == "ro", "Database should be in read-only mode"

    # Switch to unsafe mode
    result = await live_dangerously(service="database", enable=True)
    assert result["service"] == "database", "Response should identify database service"
    assert result["mode"] == "rw", "Database should be in read-write mode"

    # Switch back to safe mode
    result = await live_dangerously(service="database", enable=False)
    assert result["service"] == "database", "Response should identify database service"
    assert result["mode"] == "ro", "Database should be in read-only mode"

    # Test API service mode switching
    # Start with safe mode
    result = await live_dangerously(service="api", enable=False)
    assert result["service"] == "api", "Response should identify API service"
    # Compare with the Enum value or check its string value
    assert result["mode"] == SafetyLevel.SAFE or result["mode"].value == "safe", "API should be in safe mode"

    # Switch to unsafe mode
    result = await live_dangerously(service="api", enable=True)
    assert result["service"] == "api", "Response should identify API service"
    assert result["mode"] == SafetyLevel.UNSAFE or result["mode"].value == "unsafe", "API should be in unsafe mode"

    # Switch back to safe mode
    result = await live_dangerously(service="api", enable=False)
    assert result["service"] == "api", "Response should identify API service"
    assert result["mode"] == SafetyLevel.SAFE or result["mode"].value == "safe", "API should be in safe mode"

    # Log final state
    logger.info("Successfully tested mode switching for both database and API services")


@pytest.mark.unit
@pytest.mark.asyncio
async def test_get_management_api_spec_tool():
    """Test the get_management_api_spec tool returns the API specification.

    This test checks:
    1. The tool returns a valid OpenAPI specification
    2. The specification contains the expected structure
    """
    from supabase_mcp.main import get_management_api_spec

    # Get the API spec
    spec = await get_management_api_spec()

    # Verify result is a dictionary
    assert isinstance(spec, dict), "API spec should be a dictionary"

    # Verify spec has standard OpenAPI fields
    assert "openapi" in spec, "Spec should contain 'openapi' version field"
    assert "paths" in spec, "Spec should contain 'paths' section"
    assert "info" in spec, "Spec should contain 'info' section"

    # Verify paths contains API endpoints
    assert isinstance(spec["paths"], dict), "Paths should be a dictionary"
    assert len(spec["paths"]) > 0, "Spec should contain at least one path"

    # Log some basic spec info
    logger.info(f"API spec version: {spec.get('openapi')}")
    logger.info(f"API contains {len(spec['paths'])} endpoints")


@pytest.mark.unit
@pytest.mark.asyncio
async def test_get_management_api_safety_rules_tool():
    """Test the get_management_api_safety_rules tool returns safety information.

    This test checks:
    1. The tool returns safety rule information
    2. The rules contain information about blocked and unsafe operations
    """
    from supabase_mcp.main import get_management_api_safety_rules

    # Get the safety rules
    rules = await get_management_api_safety_rules()

    # Verify result structure and content
    assert isinstance(rules, str), "Safety rules should be returned as a string"

    # Check for expected sections in the rules
    assert "BLOCKED Operations" in rules, "Rules should mention blocked operations"
    assert "UNSAFE Operations" in rules, "Rules should mention unsafe operations"
    assert "Current mode" in rules, "Rules should mention current mode"

    # Log the rules for debugging
    logger.info("Successfully retrieved Management API safety rules")

================
File: tests/test_settings.py
================
from unittest.mock import patch

import pytest
from pydantic import ValidationError

from supabase_mcp.settings import SUPPORTED_REGIONS, Settings


@pytest.fixture(autouse=True)
def reset_settings_singleton():
    """Reset the Settings singleton before each test"""
    # Clear singleton instance if it exists
    if hasattr(Settings, "_instance"):
        delattr(Settings, "_instance")
    yield
    # Clean up after test
    if hasattr(Settings, "_instance"):
        delattr(Settings, "_instance")


def test_settings_default_values(clean_environment):
    """Test default values (no config file, no env vars)"""
    settings = Settings.with_config()  # No config file
    assert settings.supabase_project_ref == "127.0.0.1:54322"
    assert settings.supabase_db_password == "postgres"


def test_settings_from_env_test(clean_environment):
    """Test loading from .env.test"""
    settings = Settings.with_config(".env.test")
    assert settings.supabase_project_ref == "test-project-ref"
    assert settings.supabase_db_password == "test-db-password"


def test_settings_from_env_vars(clean_environment):
    """Test env vars take precedence over config file"""
    env_values = {"SUPABASE_PROJECT_REF": "from-env", "SUPABASE_DB_PASSWORD": "env-password"}
    with patch.dict("os.environ", env_values, clear=True):
        settings = Settings.with_config(".env.test")  # Even with config file
        assert settings.supabase_project_ref == "from-env"
        assert settings.supabase_db_password == "env-password"


def test_settings_region_validation():
    """Test region validation."""
    # Test default region
    settings = Settings()
    assert settings.supabase_region == "us-east-1"

    # Test valid region from environment
    env_values = {"SUPABASE_REGION": "ap-southeast-1"}
    with patch.dict("os.environ", env_values, clear=True):
        settings = Settings()
        assert settings.supabase_region == "ap-southeast-1"

    # Test invalid region
    with pytest.raises(ValidationError) as exc_info:
        env_values = {"SUPABASE_REGION": "invalid-region"}
        with patch.dict("os.environ", env_values, clear=True):
            Settings()
    assert "Region 'invalid-region' is not supported" in str(exc_info.value)


def test_supported_regions():
    """Test that all supported regions are valid."""
    for region in SUPPORTED_REGIONS.__args__:
        env_values = {"SUPABASE_REGION": region}
        with patch.dict("os.environ", env_values, clear=True):
            settings = Settings()
            assert settings.supabase_region == region

================
File: .dockerignore
================
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
.pytest_cache/
.coverage
htmlcov/
.tox/
.nox/

# Virtual Environment
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# IDEs and Editors
.idea/
.vscode/
*.swp
*.swo
*~
.project
.classpath
.settings/
*.sublime-workspace
*.sublime-project

# Local development
.env.mcp
.env.mcp2
*.log
logs/

# Ignore local assets
assets/
*.gif
*.mp4

# Generated version file
supabase_mcp/_version.py

# Docs
.llms-full.txt

# Docker specific ignores
Dockerfile
.dockerignore
docker-compose.yml
docker-compose.yaml

# Git
.git/
.github/
.gitignore

================
File: .env.example
================
# Supabase MCP Server Environment Configuration
# Copy this file to .env to configure your server

# Required for remote Supabase projects (optional for local development)
SUPABASE_PROJECT_REF=your-project-ref # Your project reference from dashboard URL
SUPABASE_DB_PASSWORD=your-db-password # Database password for your project

# Optional configuration
SUPABASE_REGION=us-east-1 # Region where your Supabase project is hosted (defaults to us-east-1)
SUPABASE_ACCESS_TOKEN=your-personal-access-token # Required for Management API tools
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key # Required for Auth Admin SDK tools

================
File: .env.test
================
SUPABASE_PROJECT_REF=test-project-ref
SUPABASE_DB_PASSWORD=test-db-password

================
File: .gitignore
================
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
.pytest_cache/
.coverage
htmlcov/
.tox/
.nox/

# Virtual Environment
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# IDEs and Editors
.idea/
.vscode/
*.swp
*.swo
*~
.project
.classpath
.settings/
*.sublime-workspace
*.sublime-project

# Local development
.env.mcp
.env.mcp2
*.log
logs/


# Ignore local assets
assets/
*.gif
*.mp4

# Generated version file
supabase_mcp/_version.py

# Docs
.llms-full.txt
COMMIT_CONVENTION.md

================
File: .pre-commit-config.yaml
================
repos:
  # === Syntax & Basic Checks ===
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: check-ast
        name: Validate Python syntax
      - id: check-toml
        name: Validate TOML files
      - id: mixed-line-ending
        name: Normalize line endings
        args: ['--fix=lf']
      - id: trailing-whitespace
        name: Remove trailing whitespace
      - id: end-of-file-fixer
        name: Ensure file ends with newline

  # === Security ===
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: detect-private-key
        name: Check for private keys
        stages: [pre-commit, pre-push, manual]
      - id: check-merge-conflict
        name: Check for merge conflicts
        stages: [pre-commit, manual]
      - id: debug-statements
        name: Check for debugger imports
        stages: [pre-commit, manual]

  # === Type Checking ===

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: "v1.15.0"
    hooks:
      - id: mypy
        name: Run mypy type checker
        args: [
          "--config-file=pyproject.toml",
          "--show-error-codes",
          "--pretty",
        ]
        additional_dependencies: [
            "types-requests",
            "types-aiofiles",
            "types-pytz",
            "pydantic",
            "chainlit",
            "anthropic",
            "fastapi",
            "httpx",
            "tiktoken",
            "weave",
            "chromadb",
            "cohere",
            "langchain"
        ]
        entry: bash -c 'mypy "$@" || true' --

  # === Code Quality & Style ===
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.9.7
    hooks:
      - id: ruff
        name: Run Ruff linter
        args: [
          --fix,
          --exit-zero,
          --quiet,
        ]
        types_or: [python, pyi, jupyter]
        files: ^(src|tests)/
        exclude: ^src/experimental/
        verbose: false
      - id: ruff-format
        name: Run Ruff formatter
        types_or: [python, pyi, jupyter]

  # === Documentation Checks ===
  - repo: https://github.com/tcort/markdown-link-check
    rev: v3.13.6
    hooks:
      - id: markdown-link-check
        name: Check Markdown links
        description: Extracts links from markdown texts and checks they're all alive
        stages: [pre-commit, pre-push, manual]

  # === Testing ===
  - repo: local
    hooks:
      - id: pytest
        name: Run tests
        entry: pytest
        language: system
        types: [python]
        pass_filenames: false
        args: [
          "--no-header",        ]
        stages: [pre-commit, pre-push]

  # === Build Check ===
  - repo: local
    hooks:
      - id: build-check
        name: Check build
        entry: uv build
        language: system
        pass_filenames: false
        stages: [pre-commit, pre-push]
      - id: version-check
        name: Check package version
        # Print version from the built package
        entry: python -c "from supabase_mcp import __version__; print('📦 Package version:', __version__)"
        language: system
        verbose: true
        pass_filenames: false
        stages: [pre-commit, pre-push]

================
File: CHANGELOG.MD
================
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/).


## [0.3.6] - 2025-02-26
### Added
- Added `call_auth_admin_method` which enables MCP server to manage users in your database (create, update, delete, confirm). All Auth SDK methods are supported
- Added `get_auth_admin_methods_spec` to retrieve documentation for all available Auth Admin methods. Response objects now use attribute access (dot notation) instead of dictionary access.

### Fixed
- Fixed an issue with improper encoding of database passwords. Previously passwords containing "%" symbol led to connection failures


## [0.3.5] - 2025-02-26
### Fixed
- Fixed an issue with `get_tables` so that it reliably returns foreign tables and views
- Updated docs to describe how to setup mcp.json with project-specific MCPs
- Expanded and improved test suite to cover each MCP tool


## [0.3.4] - 2025-02-25
### Fixed
- Improved `get_tables` to return foreign data tables


## [0.3.3] - 2025-02-25
### Fixed
- Fixed a bug with `readonly` scope being incorrectly managed in db client

## [0.3.2] - 2025-02-25
### Fixed
- Fixed a bug preventing execution of DDL commands (create, alter tables, etc.)

## [0.3.1] - 2025-02-23
### Changed
- Significantly improved docs to make install, configuration, usage instructions super clear


## [0.3.0] - 2025-02-23
### Added
- Full support for read-write SQL operations:
  - Implemented safety mode system with read-only (default) and read-write modes
  - Added mode switching with automatic reset to read-only
  - Enhanced transaction support for testing write operations
  - Improved error handling for read-only violations
- Support for Supabase Management API
  - Introduces supabase management API integration with safe (enabled by default) and yolo modes
  - Includes the following tools:
    - `send_management_api_request` to send arbitrary requests to Supabase Management API, with auto-injection of project ref and safety mode control.
    - `get_management_api_spec` to get the enriched API specification with safety information
    - `get_management_api_safety_rules` to get all safety rules including blocked and unsafe operations with human-readable explanations
    - `live_dangerously` to switch to yolo mode
  - Safety features:
    - Divides API methods into `safe`, `unsafe` and `blocked` categories based on the risk of the operation
    - Allows to switch between safe and yolo modes dynamically
    - Blocked operations (delete project, delete database) are not allowed regardless of the mode


## [0.2.2] - 2025-02-20
### Added
- Support for different Supabase regions:
  - Configuration via `SUPABASE_REGION` environment variable
  - Validation for all 16 supported AWS regions
  - Default to `us-east-1` for backward compatibility
  - Enhanced logging for region information
  - Comprehensive documentation and examples

## [0.2.1] - 2025-02-19
### Added
- Package distribution support:
  - PyPI package publishing setup
  - Installation via `pipx` and `uv`
  - Entry point scripts for direct execution
- Smithery.ai deployment configuration

### Changed
- BREAKING: Installation and execution methods:
  - Switched from direct script execution to proper module structure
  - Updated Cursor/Windsurf configuration for package-based execution
- Improved setup instructions in README

## [0.2.0] - 2025-02-18
Intermediary release for package distribution support

## [0.1.0] - 2025-02-16
### Added
- Initial release
- Basic MCP server functionality
- Supabase database connection support
- Integration with Cursor and Windsurf IDEs

[0.3.0]: https://github.com/alexander-zuev/supabase-mcp-server/releases/tag/v0.3.0
[0.2.2]: https://github.com/alexander-zuev/supabase-mcp-server/releases/tag/v0.2.2
[0.2.1]: https://github.com/alexander-zuev/supabase-mcp-server/releases/tag/v0.2.1
[0.2.0]: https://github.com/alexander-zuev/supabase-mcp-server/releases/tag/v0.2.0-dev0
[0.1.0]: https://github.com/alexander-zuev/supabase-mcp-server/releases/tag/v0.1.0

================
File: CONTRIBUTING.MD
================
# Contributing to Supabase MCP Server

Thank you for your interest in Supabase MCP Server. This project aims to maintain a high quality standard I've set for it. I welcome and carefully review all contributions. Please read the following guidelines carefully.

## 🤓 Important: Pre-Contribution Requirements

1. **Required: Open a Discussion First**
   - **All contributions** must start with a GitHub Discussion before any code is written
   - Explain your proposed changes, why they're needed, and how they align with the project's vision
   - Wait for explicit approval from the maintainer before proceeding
   - PRs without a prior approved discussion will be closed immediately without review

2. **Project Vision**
   - This project follows a specific development vision maintained by the owner
   - Not all feature ideas will be accepted, even if well-implemented
   - The maintainer reserves the right to decline contributions that don't align with the project's direction

## 🛠️ Contribution Process (Only After Discussion Approval)

1. **Fork the repository:** Click the "Fork" button in the top right corner of the GitHub page.

2. **Create a new branch:** Create a branch with a descriptive name related to your contribution.
   ```bash
   git checkout -b feature/your-approved-feature
   ```

3. **Quality Requirements:**
   - **Test Coverage:** All code changes must include appropriate tests
   - **Documentation:** Update all relevant documentation
   - **Code Style:** Follow the existing code style and patterns
   - **Commit Messages:** Use clear, descriptive commit messages

4. **Make your changes:** Implement the changes that were approved in the discussion.

5. **Test thoroughly:** Ensure all tests pass and add new tests for your changes.
   ```bash
   # Run tests
   pytest
   ```

6. **Commit your changes:** Use clear, descriptive commit messages that explain what you've done.
   ```bash
   git commit -m "feat: implement approved feature X"
   ```

7. **Push your branch:** Push your changes to your forked repository.
   ```bash
   git push origin feature/your-approved-feature
   ```

8. **Create a pull request:**
   - Go to the original repository on GitHub
   - Click "New Pull Request"
   - Select "compare across forks"
   - Select your fork and branch as the source
   - Add a detailed description that references the approved discussion
   - Include information about how you've tested the changes
   - Submit the pull request

9. **Review Process:**
   - PRs will be reviewed when time permits
   - Be prepared to make requested changes
   - The maintainer may request significant revisions
   - PRs may be rejected even after review if they don't meet quality standards

## ⚠️ Grounds for Immediate Rejection

Your PR will be closed without review if:
- No prior discussion was opened and approved
- Tests are missing or failing
- Documentation is not updated
- Code quality doesn't meet project standards
- PR description is inadequate
- Changes don't align with the approved discussion

## 🤔 Why These Requirements?

- This project is maintained by a single developer (me) with limited review time
- Quality and consistency are prioritized over quantity of contributions
- The project follows a specific vision that I want to maintain

## 🌟 Acceptable Contributions

The following types of contributions are most welcome:
- Bug fixes with clear reproduction steps
- Performance improvements with benchmarks
- Documentation improvements
- New features that have been pre-approved via discussion

## 💡 Alternative Ways to Contribute

If you have ideas but don't want to go through this process:
- Fork the project and build your own version
- Share your use case in Discussions
- Report bugs with detailed reproduction steps

Thank you for understanding and respecting these guidelines. They help maintain the quality and direction of the project.

================
File: Dockerfile
================
FROM python:3.12-slim-bookworm

WORKDIR /app

# Install PostgreSQL client libraries (required for psycopg2) and curl for uv installation
RUN apt-get update && apt-get install -y \
    libpq-dev \
    gcc \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# # Install uv with fixed version
ENV UV_VERSION="0.6.1"
ADD https://astral.sh/uv/${UV_VERSION}/install.sh /uv-installer.sh
RUN sh /uv-installer.sh && rm /uv-installer.sh
# Ensure the installed binary is on the `PATH`
ENV PATH="/root/.local/bin/:$PATH"

# # Copy the project into the image
COPY . /app
WORKDIR /app

# Create venv and install dependencies with version set
ENV SETUPTOOLS_SCM_PRETEND_VERSION="0.3.6"
RUN uv venv && \
    . .venv/bin/activate && \
    uv pip install .

# Set the entrypoint to use the venv
ENTRYPOINT ["uv", "run", "supabase-mcp-server"]

================
File: LICENSE
================
Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [2025] [Alexander Zuev]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

================
File: llms-full.txt
================
# Example Clients
Source: https://modelcontextprotocol.io/clients

A list of applications that support MCP integrations

This page provides an overview of applications that support the Model Context Protocol (MCP). Each client may support different MCP features, allowing for varying levels of integration with MCP servers.

## Feature support matrix

| Client                               | [Resources] | [Prompts] | [Tools] | [Sampling] | Roots | Notes                                                              |
| ------------------------------------ | ----------- | --------- | ------- | ---------- | ----- | ------------------------------------------------------------------ |
| [Claude Desktop App][Claude]         | ✅           | ✅         | ✅       | ❌          | ❌     | Full support for all MCP features                                  |
| [5ire][5ire]                         | ❌           | ❌         | ✅       | ❌          | ❌     | Supports tools.                                                    |
| [BeeAI Framework][BeeAI Framework]   | ❌           | ❌         | ✅       | ❌          | ❌     | Supports tools in agentic workflows.                               |
| [Cline][Cline]                       | ✅           | ❌         | ✅       | ❌          | ❌     | Supports tools and resources.                                      |
| [Continue][Continue]                 | ✅           | ✅         | ✅       | ❌          | ❌     | Full support for all MCP features                                  |
| [Cursor][Cursor]                     | ❌           | ❌         | ✅       | ❌          | ❌     | Supports tools.                                                    |
| [Emacs Mcp][Mcp.el]                  | ❌           | ❌         | ✅       | ❌          | ❌     | Supports tools in Emacs.                                           |
| [Firebase Genkit][Genkit]            | ⚠️          | ✅         | ✅       | ❌          | ❌     | Supports resource list and lookup through tools.                   |
| [GenAIScript][GenAIScript]           | ❌           | ❌         | ✅       | ❌          | ❌     | Supports tools.                                                    |
| [Goose][Goose]                       | ❌           | ❌         | ✅       | ❌          | ❌     | Supports tools.                                                    |
| [LibreChat][LibreChat]               | ❌           | ❌         | ✅       | ❌          | ❌     | Supports tools for Agents                                          |
| [mcp-agent][mcp-agent]               | ❌           | ❌         | ✅       | ⚠️         | ❌     | Supports tools, server connection management, and agent workflows. |
| [Roo Code][Roo Code]                 | ✅           | ❌         | ✅       | ❌          | ❌     | Supports tools and resources.                                      |
| [Sourcegraph Cody][Cody]             | ✅           | ❌         | ❌       | ❌          | ❌     | Supports resources through OpenCTX                                 |
| [Superinterface][Superinterface]     | ❌           | ❌         | ✅       | ❌          | ❌     | Supports tools                                                     |
| [TheiaAI/TheiaIDE][TheiaAI/TheiaIDE] | ❌           | ❌         | ✅       | ❌          | ❌     | Supports tools for Agents in Theia AI and the AI-powered Theia IDE |
| [Windsurf Editor][Windsurf]          | ❌           | ❌         | ✅       | ❌          | ❌     | Supports tools with AI Flow for collaborative development.         |
| [Zed][Zed]                           | ❌           | ✅         | ❌       | ❌          | ❌     | Prompts appear as slash commands                                   |
| \[OpenSumi]\[OpenSumi]               | ❌           | ❌         | ✅       | ❌          | ❌     | Supports tools in OpenSumi                                         |

[Claude]: https://claude.ai/download

[Cursor]: https://cursor.com

[Zed]: https://zed.dev

[Cody]: https://sourcegraph.com/cody

[Genkit]: https://github.com/firebase/genkit

[Continue]: https://github.com/continuedev/continue

[GenAIScript]: https://microsoft.github.io/genaiscript/reference/scripts/mcp-tools/

[Cline]: https://github.com/cline/cline

[LibreChat]: https://github.com/danny-avila/LibreChat

[TheiaAI/TheiaIDE]: https://eclipsesource.com/blogs/2024/12/19/theia-ide-and-theia-ai-support-mcp/

[Superinterface]: https://superinterface.ai

[5ire]: https://github.com/nanbingxyz/5ire

[BeeAI Framework]: https://i-am-bee.github.io/beeai-framework

[mcp-agent]: https://github.com/lastmile-ai/mcp-agent

[Mcp.el]: https://github.com/lizqwerscott/mcp.el

[Roo Code]: https://roocode.com

[Goose]: https://block.github.io/goose/docs/goose-architecture/#interoperability-with-extensions

[Windsurf]: https://codeium.com/windsurf

[Resources]: https://modelcontextprotocol.io/docs/concepts/resources

[Prompts]: https://modelcontextprotocol.io/docs/concepts/prompts

[Tools]: https://modelcontextprotocol.io/docs/concepts/tools

[Sampling]: https://modelcontextprotocol.io/docs/concepts/sampling

## Client details

### Claude Desktop App

The Claude desktop application provides comprehensive support for MCP, enabling deep integration with local tools and data sources.

**Key features:**

* Full support for resources, allowing attachment of local files and data
* Support for prompt templates
* Tool integration for executing commands and scripts
* Local server connections for enhanced privacy and security

> ⓘ Note: The Claude.ai web application does not currently support MCP. MCP features are only available in the desktop application.

### 5ire

[5ire](https://github.com/nanbingxyz/5ire) is an open source cross-platform desktop AI assistant that supports tools through MCP servers.

**Key features:**

* Built-in MCP servers can be quickly enabled and disabled.
* Users can add more servers by modifying the configuration file.
* It is open-source and user-friendly, suitable for beginners.
* Future support for MCP will be continuously improved.

### BeeAI Framework

[BeeAI Framework](https://i-am-bee.github.io/beeai-framework) is an open-source framework for building, deploying, and serving powerful agentic workflows at scale. The framework includes the **MCP Tool**, a native feature that simplifies the integration of MCP servers into agentic workflows.

**Key features:**

* Seamlessly incorporate MCP tools into agentic workflows.
* Quickly instantiate framework-native tools from connected MCP client(s).
* Planned future support for agentic MCP capabilities.

**Learn more:**

* [Example of using MCP tools in agentic workflow](https://i-am-bee.github.io/beeai-framework/#/typescript/tools?id=using-the-mcptool-class)

### Cline

[Cline](https://github.com/cline/cline) is an autonomous coding agent in VS Code that edits files, runs commands, uses a browser, and more–with your permission at each step.

**Key features:**

* Create and add tools through natural language (e.g. "add a tool that searches the web")
* Share custom MCP servers Cline creates with others via the `~/Documents/Cline/MCP` directory
* Displays configured MCP servers along with their tools, resources, and any error logs

### Continue

[Continue](https://github.com/continuedev/continue) is an open-source AI code assistant, with built-in support for all MCP features.

**Key features**

* Type "@" to mention MCP resources
* Prompt templates surface as slash commands
* Use both built-in and MCP tools directly in chat
* Supports VS Code and JetBrains IDEs, with any LLM

### Cursor

[Cursor](https://docs.cursor.com/advanced/model-context-protocol) is an AI code editor.

**Key Features**:

* Support for MCP tools in Cursor Composer
* Support for both STDIO and SSE

### Emacs Mcp

[Emacs Mcp](https://github.com/lizqwerscott/mcp.el) is an Emacs client designed to interface with MCP servers, enabling seamless connections and interactions. It provides MCP tool invocation support for AI plugins like [gptel](https://github.com/karthink/gptel) and [llm](https://github.com/ahyatt/llm), adhering to Emacs' standard tool invocation format. This integration enhances the functionality of AI tools within the Emacs ecosystem.

**Key features:**

* Provides MCP tool support for Emacs.

### Firebase Genkit

[Genkit](https://github.com/firebase/genkit) is Firebase's SDK for building and integrating GenAI features into applications. The [genkitx-mcp](https://github.com/firebase/genkit/tree/main/js/plugins/mcp) plugin enables consuming MCP servers as a client or creating MCP servers from Genkit tools and prompts.

**Key features:**

* Client support for tools and prompts (resources partially supported)
* Rich discovery with support in Genkit's Dev UI playground
* Seamless interoperability with Genkit's existing tools and prompts
* Works across a wide variety of GenAI models from top providers

### GenAIScript

Programmatically assemble prompts for LLMs using [GenAIScript](https://microsoft.github.io/genaiscript/) (in JavaScript). Orchestrate LLMs, tools, and data in JavaScript.

**Key features:**

* JavaScript toolbox to work with prompts
* Abstraction to make it easy and productive
* Seamless Visual Studio Code integration

### Goose

[Goose](https://github.com/block/goose) is an open source AI agent that supercharges your software development by automating coding tasks.

**Key features:**

* Expose MCP functionality to Goose through tools.
* MCPs can be installed directly via the [extensions directory](https://block.github.io/goose/v1/extensions/), CLI, or UI.
* Goose allows you to extend its functionality by [building your own MCP servers](https://block.github.io/goose/docs/tutorials/custom-extensions).
* Includes built-in tools for development, web scraping, automation, memory, and integrations with JetBrains and Google Drive.

### LibreChat

[LibreChat](https://github.com/danny-avila/LibreChat) is an open-source, customizable AI chat UI that supports multiple AI providers, now including MCP integration.

**Key features:**

* Extend current tool ecosystem, including [Code Interpreter](https://www.librechat.ai/docs/features/code_interpreter) and Image generation tools, through MCP servers
* Add tools to customizable [Agents](https://www.librechat.ai/docs/features/agents), using a variety of LLMs from top providers
* Open-source and self-hostable, with secure multi-user support
* Future roadmap includes expanded MCP feature support

### mcp-agent

[mcp-agent] is a simple, composable framework to build agents using Model Context Protocol.

**Key features:**

* Automatic connection management of MCP servers.
* Expose tools from multiple servers to an LLM.
* Implements every pattern defined in [Building Effective Agents](https://www.anthropic.com/research/building-effective-agents).
* Supports workflow pause/resume signals, such as waiting for human feedback.

### Roo Code

[Roo Code](https://roocode.com) enables AI coding assistance via MCP.

**Key features:**

* Support for MCP tools and resources
* Integration with development workflows
* Extensible AI capabilities

### Sourcegraph Cody

[Cody](https://openctx.org/docs/providers/modelcontextprotocol) is Sourcegraph's AI coding assistant, which implements MCP through OpenCTX.

**Key features:**

* Support for MCP resources
* Integration with Sourcegraph's code intelligence
* Uses OpenCTX as an abstraction layer
* Future support planned for additional MCP features

### Superinterface

[Superinterface](https://superinterface.ai) is AI infrastructure and a developer platform to build in-app AI assistants with support for MCP, interactive components, client-side function calling and more.

**Key features:**

* Use tools from MCP servers in assistants embedded via React components or script tags
* SSE transport support
* Use any AI model from any AI provider (OpenAI, Anthropic, Ollama, others)

### TheiaAI/TheiaIDE

[Theia AI](https://eclipsesource.com/blogs/2024/10/07/introducing-theia-ai/) is a framework for building AI-enhanced tools and IDEs. The [AI-powered Theia IDE](https://eclipsesource.com/blogs/2024/10/08/introducting-ai-theia-ide/) is an open and flexible development environment built on Theia AI.

**Key features:**

* **Tool Integration**: Theia AI enables AI agents, including those in the Theia IDE, to utilize MCP servers for seamless tool interaction.
* **Customizable Prompts**: The Theia IDE allows users to define and adapt prompts, dynamically integrating MCP servers for tailored workflows.
* **Custom agents**: The Theia IDE supports creating custom agents that leverage MCP capabilities, enabling users to design dedicated workflows on the fly.

Theia AI and Theia IDE's MCP integration provide users with flexibility, making them powerful platforms for exploring and adapting MCP.

**Learn more:**

* [Theia IDE and Theia AI MCP Announcement](https://eclipsesource.com/blogs/2024/12/19/theia-ide-and-theia-ai-support-mcp/)
* [Download the AI-powered Theia IDE](https://theia-ide.org/)

### Windsurf Editor

[Windsurf Editor](https://codeium.com/windsurf) is an agentic IDE that combines AI assistance with developer workflows. It features an innovative AI Flow system that enables both collaborative and independent AI interactions while maintaining developer control.

**Key features:**

* Revolutionary AI Flow paradigm for human-AI collaboration
* Intelligent code generation and understanding
* Rich development tools with multi-model support

### Zed

[Zed](https://zed.dev/docs/assistant/model-context-protocol) is a high-performance code editor with built-in MCP support, focusing on prompt templates and tool integration.

**Key features:**

* Prompt templates surface as slash commands in the editor
* Tool integration for enhanced coding workflows
* Tight integration with editor features and workspace context
* Does not support MCP resources

### OpenSumi

[OpenSumi](https://github.com/opensumi/core) is a framework helps you quickly build AI Native IDE products.

**Key features:**

* Supports MCP tools in OpenSumi
* Supports built-in IDE MCP servers and custom MCP servers

## Adding MCP support to your application

If you've added MCP support to your application, we encourage you to submit a pull request to add it to this list. MCP integration can provide your users with powerful contextual AI capabilities and make your application part of the growing MCP ecosystem.

Benefits of adding MCP support:

* Enable users to bring their own context and tools
* Join a growing ecosystem of interoperable AI applications
* Provide users with flexible integration options
* Support local-first AI workflows

To get started with implementing MCP in your application, check out our [Python](https://github.com/modelcontextprotocol/python-sdk) or [TypeScript SDK Documentation](https://github.com/modelcontextprotocol/typescript-sdk)

## Updates and corrections

This list is maintained by the community. If you notice any inaccuracies or would like to update information about MCP support in your application, please submit a pull request or [open an issue in our documentation repository](https://github.com/modelcontextprotocol/docs/issues).


# Contributing
Source: https://modelcontextprotocol.io/development/contributing

How to participate in Model Context Protocol development

We welcome contributions from the community! Please review our [contributing guidelines](https://github.com/modelcontextprotocol/.github/blob/main/CONTRIBUTING.md) for details on how to submit changes.

All contributors must adhere to our [Code of Conduct](https://github.com/modelcontextprotocol/.github/blob/main/CODE_OF_CONDUCT.md).

For questions and discussions, please use [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions).


# Roadmap
Source: https://modelcontextprotocol.io/development/roadmap

Our plans for evolving Model Context Protocol (H1 2025)

The Model Context Protocol is rapidly evolving. This page outlines our current thinking on key priorities and future direction for **the first half of 2025**, though these may change significantly as the project develops.

<Note>The ideas presented here are not commitments—we may solve these challenges differently than described, or some may not materialize at all. This is also not an *exhaustive* list; we may incorporate work that isn't mentioned here.</Note>

We encourage community participation! Each section links to relevant discussions where you can learn more and contribute your thoughts.

## Remote MCP Support

Our top priority is enabling [remote MCP connections](https://github.com/modelcontextprotocol/specification/discussions/102), allowing clients to securely connect to MCP servers over the internet. Key initiatives include:

*   [**Authentication & Authorization**](https://github.com/modelcontextprotocol/specification/discussions/64): Adding standardized auth capabilities, particularly focused on OAuth 2.0 support.

*   [**Service Discovery**](https://github.com/modelcontextprotocol/specification/discussions/69): Defining how clients can discover and connect to remote MCP servers.

*   [**Stateless Operations**](https://github.com/modelcontextprotocol/specification/discussions/102): Thinking about whether MCP could encompass serverless environments too, where they will need to be mostly stateless.

## Reference Implementations

To help developers build with MCP, we want to offer documentation for:

*   **Client Examples**: Comprehensive reference client implementation(s), demonstrating all protocol features
*   **Protocol Drafting**: Streamlined process for proposing and incorporating new protocol features

## Distribution & Discovery

Looking ahead, we're exploring ways to make MCP servers more accessible. Some areas we may investigate include:

*   **Package Management**: Standardized packaging format for MCP servers
*   **Installation Tools**: Simplified server installation across MCP clients
*   **Sandboxing**: Improved security through server isolation
*   **Server Registry**: A common directory for discovering available MCP servers

## Agent Support

We're expanding MCP's capabilities for [complex agentic workflows](https://github.com/modelcontextprotocol/specification/discussions/111), particularly focusing on:

*   [**Hierarchical Agent Systems**](https://github.com/modelcontextprotocol/specification/discussions/94): Improved support for trees of agents through namespacing and topology awareness.

*   [**Interactive Workflows**](https://github.com/modelcontextprotocol/specification/issues/97): Better handling of user permissions and information requests across agent hierarchies, and ways to send output to users instead of models.

*   [**Streaming Results**](https://github.com/modelcontextprotocol/specification/issues/117): Real-time updates from long-running agent operations.

## Broader Ecosystem

We're also invested in:

*   **Community-Led Standards Development**: Fostering a collaborative ecosystem where all AI providers can help shape MCP as an open standard through equal participation and shared governance, ensuring it meets the needs of diverse AI applications and use cases.
*   [**Additional Modalities**](https://github.com/modelcontextprotocol/specification/discussions/88): Expanding beyond text to support audio, video, and other formats.
*   \[**Standardization**] Considering standardization through a standardization body.

## Get Involved

We welcome community participation in shaping MCP's future. Visit our [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions) to join the conversation and contribute your ideas.


# What's New
Source: https://modelcontextprotocol.io/development/updates

The latest updates and improvements to MCP

<Update label="2025-02-14" description="Java SDK released">
  * We're excited to announce that the Java SDK developed by Spring AI at VMware Tanzu is now
    the official [Java SDK](https://github.com/modelcontextprotocol/java-sdk) for MCP.
    This joins our existing Kotlin SDK in our growing list of supported languages.
    The Spring AI team will maintain the SDK as an integral part of the Model Context Protocol
    organization. We're thrilled to welcome them to the MCP community!
</Update>

<Update label="2025-01-27" description="Python SDK 1.2.1">
  * Version [1.2.1](https://github.com/modelcontextprotocol/python-sdk/releases/tag/v1.2.1) of the MCP Python SDK has been released,
    delivering important stability improvements and bug fixes.
</Update>

<Update label="2025-01-18" description="SDK and Server Improvements">
  * Simplified, express-like API in the [TypeScript SDK](https://github.com/modelcontextprotocol/typescript-sdk)
  * Added 8 new clients to the [clients page](https://modelcontextprotocol.io/clients)
</Update>

<Update label="2025-01-03" description="SDK and Server Improvements">
  * FastMCP API in the [Python SDK](https://github.com/modelcontextprotocol/python-sdk)
  * Dockerized MCP servers in the [servers repo](https://github.com/modelcontextprotocol/servers)
</Update>

<Update label="2024-12-21" description="Kotlin SDK released">
  * Jetbrains released a Kotlin SDK for MCP!
  * For a sample MCP Kotlin server, check out [this repository](https://github.com/modelcontextprotocol/kotlin-sdk/tree/main/samples/kotlin-mcp-server)
</Update>


# Core architecture
Source: https://modelcontextprotocol.io/docs/concepts/architecture

Understand how MCP connects clients, servers, and LLMs

The Model Context Protocol (MCP) is built on a flexible, extensible architecture that enables seamless communication between LLM applications and integrations. This document covers the core architectural components and concepts.

## Overview

MCP follows a client-server architecture where:

*   **Hosts** are LLM applications (like Claude Desktop or IDEs) that initiate connections
*   **Clients** maintain 1:1 connections with servers, inside the host application
*   **Servers** provide context, tools, and prompts to clients

```mermaid
flowchart LR
    subgraph "&nbsp;Host (e.g., Claude Desktop)&nbsp;"
        client1[MCP Client]
        client2[MCP Client]
    end
    subgraph "Server Process"
        server1[MCP Server]
    end
    subgraph "Server Process"
        server2[MCP Server]
    end

    client1 <-->|Transport Layer| server1
    client2 <-->|Transport Layer| server2
```

## Core components

### Protocol layer

The protocol layer handles message framing, request/response linking, and high-level communication patterns.

<Tabs>
  <Tab title="TypeScript">
    ```typescript
    class Protocol<Request, Notification, Result> {
        // Handle incoming requests
        setRequestHandler<T>(schema: T, handler: (request: T, extra: RequestHandlerExtra) => Promise<Result>): void

        // Handle incoming notifications
        setNotificationHandler<T>(schema: T, handler: (notification: T) => Promise<void>): void

        // Send requests and await responses
        request<T>(request: Request, schema: T, options?: RequestOptions): Promise<T>

        // Send one-way notifications
        notification(notification: Notification): Promise<void>
    }
    ```
  </Tab>

  <Tab title="Python">
    ```python
    class Session(BaseSession[RequestT, NotificationT, ResultT]):
        async def send_request(
            self,
            request: RequestT,
            result_type: type[Result]
        ) -> Result:
            """
            Send request and wait for response. Raises McpError if response contains error.
            """
            # Request handling implementation

        async def send_notification(
            self,
            notification: NotificationT
        ) -> None:
            """Send one-way notification that doesn't expect response."""
            # Notification handling implementation

        async def _received_request(
            self,
            responder: RequestResponder[ReceiveRequestT, ResultT]
        ) -> None:
            """Handle incoming request from other side."""
            # Request handling implementation

        async def _received_notification(
            self,
            notification: ReceiveNotificationT
        ) -> None:
            """Handle incoming notification from other side."""
            # Notification handling implementation
    ```
  </Tab>
</Tabs>

Key classes include:

*   `Protocol`
*   `Client`
*   `Server`

### Transport layer

The transport layer handles the actual communication between clients and servers. MCP supports multiple transport mechanisms:

1.  **Stdio transport**
    *   Uses standard input/output for communication
    *   Ideal for local processes

2.  **HTTP with SSE transport**
    *   Uses Server-Sent Events for server-to-client messages
    *   HTTP POST for client-to-server messages

All transports use [JSON-RPC](https://www.jsonrpc.org/) 2.0 to exchange messages. See the [specification](https://spec.modelcontextprotocol.io) for detailed information about the Model Context Protocol message format.

### Message types

MCP has these main types of messages:

1.  **Requests** expect a response from the other side:
    ```typescript
    interface Request {
      method: string;
      params?: { ... };
    }
    ```

2.  **Results** are successful responses to requests:
    ```typescript
    interface Result {
      [key: string]: unknown;
    }
    ```

3.  **Errors** indicate that a request failed:
    ```typescript
    interface Error {
      code: number;
      message: string;
      data?: unknown;
    }
    ```

4.  **Notifications** are one-way messages that don't expect a response:
    ```typescript
    interface Notification {
      method: string;
      params?: { ... };
    }
    ```

## Connection lifecycle

### 1. Initialization

```mermaid
sequenceDiagram
    participant Client
    participant Server

    Client->>Server: initialize request
    Server->>Client: initialize response
    Client->>Server: initialized notification

    Note over Client,Server: Connection ready for use
```

1.  Client sends `initialize` request with protocol version and capabilities
2.  Server responds with its protocol version and capabilities
3.  Client sends `initialized` notification as acknowledgment
4.  Normal message exchange begins

### 2. Message exchange

After initialization, the following patterns are supported:

*   **Request-Response**: Client or server sends requests, the other responds
*   **Notifications**: Either party sends one-way messages

### 3. Termination

Either party can terminate the connection:

*   Clean shutdown via `close()`
*   Transport disconnection
*   Error conditions

## Error handling

MCP defines these standard error codes:

```typescript
enum ErrorCode {
  // Standard JSON-RPC error codes
  ParseError = -32700,
  InvalidRequest = -32600,
  MethodNotFound = -32601,
  InvalidParams = -32602,
  InternalError = -32603
}
```

SDKs and applications can define their own error codes above -32000.

Errors are propagated through:

*   Error responses to requests
*   Error events on transports
*   Protocol-level error handlers

## Implementation example

Here's a basic example of implementing an MCP server:

<Tabs>
  <Tab title="TypeScript">
    ```typescript
    import { Server } from "@modelcontextprotocol/sdk/server/index.js";
    import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

    const server = new Server({
      name: "example-server",
      version: "1.0.0"
    }, {
      capabilities: {
        resources: {}
      }
    });

    // Handle requests
    server.setRequestHandler(ListResourcesRequestSchema, async () => {
      return {
        resources: [
          {
            uri: "example://resource",
            name: "Example Resource"
          }
        ]
      };
    });

    // Connect transport
    const transport = new StdioServerTransport();
    await server.connect(transport);
    ```
  </Tab>

  <Tab title="Python">
    ```python
    import asyncio
    import mcp.types as types
    from mcp.server import Server
    from mcp.server.stdio import stdio_server

    app = Server("example-server")

    @app.list_resources()
    async def list_resources() -> list[types.Resource]:
        return [
            types.Resource(
                uri="example://resource",
                name="Example Resource"
            )
        ]

    async def main():
        async with stdio_server() as streams:
            await app.run(
                streams[0],
                streams[1],
                app.create_initialization_options()
            )

    if __name__ == "__main__":
        asyncio.run(main)
    ```
  </Tab>
</Tabs>

## Best practices

### Transport selection

1.  **Local communication**
    *   Use stdio transport for local processes
    *   Efficient for same-machine communication
    *   Simple process management

2.  **Remote communication**
    *   Use SSE for scenarios requiring HTTP compatibility
    *   Consider security implications including authentication and authorization

### Message handling

1.  **Request processing**
    *   Validate inputs thoroughly
    *   Use type-safe schemas
    *   Handle errors gracefully
    *   Implement timeouts

2.  **Progress reporting**
    *   Use progress tokens for long operations
    *   Report progress incrementally
    *   Include total progress when known

3.  **Error management**
    *   Use appropriate error codes
    *   Include helpful error messages
    *   Clean up resources on errors

## Security considerations

1.  **Transport security**
    *   Use TLS for remote connections
    *   Validate connection origins
    *   Implement authentication when needed

2.  **Message validation**
    *   Validate all incoming messages
    *   Sanitize inputs
    *   Check message size limits
    *   Verify JSON-RPC format

3.  **Resource protection**
    *   Implement access controls
    *   Validate resource paths
    *   Monitor resource usage
    *   Rate limit requests

4.  **Error handling**
    *   Don't leak sensitive information
    *   Log security-relevant errors
    *   Implement proper cleanup
    *   Handle DoS scenarios

## Debugging and monitoring

1.  **Logging**
    *   Log protocol events
    *   Track message flow
    *   Monitor performance
    *   Record errors

2.  **Diagnostics**
    *   Implement health checks
    *   Monitor connection state
    *   Track resource usage
    *   Profile performance

3.  **Testing**
    *   Test different transports
    *   Verify error handling
    *   Check edge cases
    *   Load test servers


# Prompts
Source: https://modelcontextprotocol.io/docs/concepts/prompts

Create reusable prompt templates and workflows

Prompts enable servers to define reusable prompt templates and workflows that clients can easily surface to users and LLMs. They provide a powerful way to standardize and share common LLM interactions.

<Note>
  Prompts are designed to be **user-controlled**, meaning they are exposed from servers to clients with the intention of the user being able to explicitly select them for use.
</Note>

## Overview

Prompts in MCP are predefined templates that can:

*   Accept dynamic arguments
*   Include context from resources
*   Chain multiple interactions
*   Guide specific workflows
*   Surface as UI elements (like slash commands)

## Prompt structure

Each prompt is defined with:

```typescript
{
  name: string;              // Unique identifier for the prompt
  description?: string;      // Human-readable description
  arguments?: [              // Optional list of arguments
    {
      name: string;          // Argument identifier
      description?: string;  // Argument description
      required?: boolean;    // Whether argument is required
    }
  ]
}
```

## Discovering prompts

Clients can discover available prompts through the `prompts/list` endpoint:

```typescript
// Request
{
  method: "prompts/list"
}

// Response
{
  prompts: [
    {
      name: "analyze-code",
      description: "Analyze code for potential improvements",
      arguments: [
        {
          name: "language",
          description: "Programming language",
          required: true
        }
      ]
    }
  ]
}
```

## Using prompts

To use a prompt, clients make a `prompts/get` request:

````typescript
// Request
{
  method: "prompts/get",
  params: {
    name: "analyze-code",
    arguments: {
      language: "python"
    }
  }
}

// Response
{
  description: "Analyze Python code for potential improvements",
  messages: [
    {
      role: "user",
      content: {
        type: "text",
        text: "Please analyze the following Python code for potential improvements:\n\n```python\ndef calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total = total + num\n    return total\n\nresult = calculate_sum([1, 2, 3, 4, 5])\nprint(result)\n```"
      }
    }
  ]
}
````

## Dynamic prompts

Prompts can be dynamic and include:

### Embedded resource context

```json
{
  "name": "analyze-project",
  "description": "Analyze project logs and code",
  "arguments": [
    {
      "name": "timeframe",
      "description": "Time period to analyze logs",
      "required": true
    },
    {
      "name": "fileUri",
      "description": "URI of code file to review",
      "required": true
    }
  ]
}
```

When handling the `prompts/get` request:

```json
{
  "messages": [
    {
      "role": "user",
      "content": {
        "type": "text",
        "text": "Analyze these system logs and the code file for any issues:"
      }
    },
    {
      "role": "user",
      "content": {
        "type": "resource",
        "resource": {
          "uri": "logs://recent?timeframe=1h",
          "text": "[2024-03-14 15:32:11] ERROR: Connection timeout in network.py:127\n[2024-03-14 15:32:15] WARN: Retrying connection (attempt 2/3)\n[2024-03-14 15:32:20] ERROR: Max retries exceeded",
          "mimeType": "text/plain"
        }
      }
    },
    {
      "role": "user",
      "content": {
        "type": "resource",
        "resource": {
          "uri": "file:///path/to/code.py",
          "text": "def connect_to_service(timeout=30):\n    retries = 3\n    for attempt in range(retries):\n        try:\n            return establish_connection(timeout)\n        except TimeoutError:\n            if attempt == retries - 1:\n                raise\n            time.sleep(5)\n\ndef establish_connection(timeout):\n    # Connection implementation\n    pass",
          "mimeType": "text/x-python"
        }
      }
    }
  ]
}
```

### Multi-step workflows

```typescript
const debugWorkflow = {
  name: "debug-error",
  async getMessages(error: string) {
    return [
      {
        role: "user",
        content: {
          type: "text",
          text: `Here's an error I'm seeing: ${error}`
        }
      },
      {
        role: "assistant",
        content: {
          type: "text",
          text: "I'll help analyze this error. What have you tried so far?"
        }
      },
      {
        role: "user",
        content: {
          type: "text",
          text: "I've tried restarting the service, but the error persists."
        }
      }
    ];
  }
};
```

## Example implementation

Here's a complete example of implementing prompts in an MCP server:

<Tabs>
  <Tab title="TypeScript">
    ```typescript
    import { Server } from "@modelcontextprotocol/sdk/server";
    import {
      ListPromptsRequestSchema,
      GetPromptRequestSchema
    } from "@modelcontextprotocol/sdk/types";

    const PROMPTS = {
      "git-commit": {
        name: "git-commit",
        description: "Generate a Git commit message",
        arguments: [
          {
            name: "changes",
            description: "Git diff or description of changes",
            required: true
          }
        ]
      },
      "explain-code": {
        name: "explain-code",
        description: "Explain how code works",
        arguments: [
          {
            name: "code",
            description: "Code to explain",
            required: true
          },
          {
            name: "language",
            description: "Programming language",
            required: false
          }
        ]
      }
    };

    const server = new Server({
      name: "example-prompts-server",
      version: "1.0.0"
    }, {
      capabilities: {
        prompts: {}
      }
    });

    // List available prompts
    server.setRequestHandler(ListPromptsRequestSchema, async () => {
      return {
        prompts: Object.values(PROMPTS)
      };
    });

    // Get specific prompt
    server.setRequestHandler(GetPromptRequestSchema, async (request) => {
      const prompt = PROMPTS[request.params.name];
      if (!prompt) {
        throw new Error(`Prompt not found: ${request.params.name}`);
      }

      if (request.params.name === "git-commit") {
        return {
          messages: [
            {
              role: "user",
              content: {
                type: "text",
                text: `Generate a concise but descriptive commit message for these changes:\n\n${request.params.arguments?.changes}`
              }
            }
          ]
        };
      }

      if (request.params.name === "explain-code") {
        const language = request.params.arguments?.language || "Unknown";
        return {
          messages: [
            {
              role: "user",
              content: {
                type: "text",
                text: `Explain how this ${language} code works:\n\n${request.params.arguments?.code}`
              }
            }
          ]
        };
      }

      throw new Error("Prompt implementation not found");
    });
    ```
  </Tab>

  <Tab title="Python">
    ```python
    from mcp.server import Server
    import mcp.types as types

    # Define available prompts
    PROMPTS = {
        "git-commit": types.Prompt(
            name="git-commit",
            description="Generate a Git commit message",
            arguments=[
                types.PromptArgument(
                    name="changes",
                    description="Git diff or description of changes",
                    required=True
                )
            ],
        ),
        "explain-code": types.Prompt(
            name="explain-code",
            description="Explain how code works",
            arguments=[
                types.PromptArgument(
                    name="code",
                    description="Code to explain",
                    required=True
                ),
                types.PromptArgument(
                    name="language",
                    description="Programming language",
                    required=False
                )
            ],
        )
    }

    # Initialize server
    app = Server("example-prompts-server")

    @app.list_prompts()
    async def list_prompts() -> list[types.Prompt]:
        return list(PROMPTS.values())

    @app.get_prompt()
    async def get_prompt(
        name: str, arguments: dict[str, str] | None = None
    ) -> types.GetPromptResult:
        if name not in PROMPTS:
            raise ValueError(f"Prompt not found: {name}")

        if name == "git-commit":
            changes = arguments.get("changes") if arguments else ""
            return types.GetPromptResult(
                messages=[
                    types.PromptMessage(
                        role="user",
                        content=types.TextContent(
                            type="text",
                            text=f"Generate a concise but descriptive commit message "
                            f"for these changes:\n\n{changes}"
                        )
                    )
                ]
            )

        if name == "explain-code":
            code = arguments.get("code") if arguments else ""
            language = arguments.get("language", "Unknown") if arguments else "Unknown"
            return types.GetPromptResult(
                messages=[
                    types.PromptMessage(
                        role="user",
                        content=types.TextContent(
                            type="text",
                            text=f"Explain how this {language} code works:\n\n{code}"
                        )
                    )
                ]
            )

        raise ValueError("Prompt implementation not found")
    ```
  </Tab>
</Tabs>

## Best practices

When implementing prompts:

1.  Use clear, descriptive prompt names
2.  Provide detailed descriptions for prompts and arguments
3.  Validate all required arguments
4.  Handle missing arguments gracefully
5.  Consider versioning for prompt templates
6.  Cache dynamic content when appropriate
7.  Implement error handling
8.  Document expected argument formats
9.  Consider prompt composability
10. Test prompts with various inputs

## UI integration

Prompts can be surfaced in client UIs as:

*   Slash commands
*   Quick actions
*   Context menu items
*   Command palette entries
*   Guided workflows
*   Interactive forms

## Updates and changes

Servers can notify clients about prompt changes:

1.  Server capability: `prompts.listChanged`
2.  Notification: `notifications/prompts/list_changed`
3.  Client re-fetches prompt list

## Security considerations

When implementing prompts:

*   Validate all arguments
*   Sanitize user input
*   Consider rate limiting
*   Implement access controls
*   Audit prompt usage
*   Handle sensitive data appropriately
*   Validate generated content
*   Implement timeouts
*   Consider prompt injection risks
*   Document security requirements


# Resources
Source: https://modelcontextprotocol.io/docs/concepts/resources

Expose data and content from your servers to LLMs

Resources are a core primitive in the Model Context Protocol (MCP) that allow servers to expose data and content that can be read by clients and used as context for LLM interactions.

<Note>
  Resources are designed to be **application-controlled**, meaning that the client application can decide how and when they should be used.
  Different MCP clients may handle resources differently. For example:

  *   Claude Desktop currently requires users to explicitly select resources before they can be used
  *   Other clients might automatically select resources based on heuristics
  *   Some implementations may even allow the AI model itself to determine which resources to use

  Server authors should be prepared to handle any of these interaction patterns when implementing resource support. In order to expose data to models automatically, server authors should use a **model-controlled** primitive such as [Tools](./tools).
</Note>

## Overview

Resources represent any kind of data that an MCP server wants to make available to clients. This can include:

*   File contents
*   Database records
*   API responses
*   Live system data
*   Screenshots and images
*   Log files
*   And more

Each resource is identified by a unique URI and can contain either text or binary data.

## Resource URIs

Resources are identified using URIs that follow this format:

```
[protocol]://[host]/[path]
```

For example:

*   `file:///home/user/documents/report.pdf`
*   `postgres://database/customers/schema`
*   `screen://localhost/display1`

The protocol and path structure is defined by the MCP server implementation. Servers can define their own custom URI schemes.

## Resource types

Resources can contain two types of content:

### Text resources

Text resources contain UTF-8 encoded text data. These are suitable for:

*   Source code
*   Configuration files
*   Log files
*   JSON/XML data
*   Plain text

### Binary resources

Binary resources contain raw binary data encoded in base64. These are suitable for:

*   Images
*   PDFs
*   Audio files
*   Video files
*   Other non-text formats

## Resource discovery

Clients can discover available resources through two main methods:

### Direct resources

Servers expose a list of concrete resources via the `resources/list` endpoint. Each resource includes:

```typescript
{
  uri: string;           // Unique identifier for the resource
  name: string;          // Human-readable name
  description?: string;  // Optional description
  mimeType?: string;     // Optional MIME type
}
```

### Resource templates

For dynamic resources, servers can expose [URI templates](https://datatracker.ietf.org/doc/html/rfc6570) that clients can use to construct valid resource URIs:

```typescript
{
  uriTemplate: string;   // URI template following RFC 6570
  name: string;          // Human-readable name for this type
  description?: string;  // Optional description
  mimeType?: string;     // Optional MIME type for all matching resources
}
```

## Reading resources

To read a resource, clients make a `resources/read` request with the resource URI.

The server responds with a list of resource contents:

```typescript
{
  contents: [
    {
      uri: string;        // The URI of the resource
      mimeType?: string;  // Optional MIME type

      // One of:
      text?: string;      // For text resources
      blob?: string;      // For binary resources (base64 encoded)
    }
  ]
}
```

<Tip>
  Servers may return multiple resources in response to one `resources/read` request. This could be used, for example, to return a list of files inside a directory when the directory is read.
</Tip>

## Resource updates

MCP supports real-time updates for resources through two mechanisms:

### List changes

Servers can notify clients when their list of available resources changes via the `notifications/resources/list_changed` notification.

### Content changes

Clients can subscribe to updates for specific resources:

1.  Client sends `resources/subscribe` with resource URI
2.  Server sends `notifications/resources/updated` when the resource changes
3.  Client can fetch latest content with `resources/read`
4.  Client can unsubscribe with `resources/unsubscribe`

## Example implementation

Here's a simple example of implementing resource support in an MCP server:

<Tabs>
  <Tab title="TypeScript">
    ```typescript
    const server = new Server({
      name: "example-server",
      version: "1.0.0"
    }, {
      capabilities: {
        resources: {}
      }
    });

    // List available resources
    server.setRequestHandler(ListResourcesRequestSchema, async () => {
      return {
        resources: [
          {
            uri: "file:///logs/app.log",
            name: "Application Logs",
            mimeType: "text/plain"
          }
        ]
      };
    });

    // Read resource contents
    server.setRequestHandler(ReadResourceRequestSchema, async (request) => {
      const uri = request.params.uri;

      if (uri === "file:///logs/app.log") {
        const logContents = await readLogFile();
        return {
          contents: [
            {
              uri,
              mimeType: "text/plain",
              text: logContents
            }
          ]
        };
      }

      throw new Error("Resource not found");
    });
    ```
  </Tab>

  <Tab title="Python">
    ```python
    app = Server("example-server")

    @app.list_resources()
    async def list_resources() -> list[types.Resource]:
        return [
            types.Resource(
                uri="file:///logs/app.log",
                name="Application Logs",
                mimeType="text/plain"
            )
        ]

    @app.read_resource()
    async def read_resource(uri: AnyUrl) -> str:
        if str(uri) == "file:///logs/app.log":
            log_contents = await read_log_file()
            return log_contents

        raise ValueError("Resource not found")

    # Start server
    async with stdio_server() as streams:
        await app.run(
            streams[0],
            streams[1],
            app.create_initialization_options()
        )
    ```
  </Tab>
</Tabs>

## Best practices

When implementing resource support:

1.  Use clear, descriptive resource names and URIs
2.  Include helpful descriptions to guide LLM understanding
3.  Set appropriate MIME types when known
4.  Implement resource templates for dynamic content
5.  Use subscriptions for frequently changing resources
6.  Handle errors gracefully with clear error messages
7.  Consider pagination for large resource lists
8.  Cache resource contents when appropriate
9.  Validate URIs before processing
10. Document your custom URI schemes

## Security considerations

When exposing resources:

*   Validate all resource URIs
*   Implement appropriate access controls
*   Sanitize file paths to prevent directory traversal
*   Be cautious with binary data handling
*   Consider rate limiting for resource reads
*   Audit resource access
*   Encrypt sensitive data in transit
*   Validate MIME types
*   Implement timeouts for long-running reads
*   Handle resource cleanup appropriately


# Roots
Source: https://modelcontextprotocol.io/docs/concepts/roots

Understanding roots in MCP

Roots are a concept in MCP that define the boundaries where servers can operate. They provide a way for clients to inform servers about relevant resources and their locations.

## What are Roots?

A root is a URI that a client suggests a server should focus on. When a client connects to a server, it declares which roots the server should work with. While primarily used for filesystem paths, roots can be any valid URI including HTTP URLs.

For example, roots could be:

```
file:///home/user/projects/myapp
https://api.example.com/v1
```

## Why Use Roots?

Roots serve several important purposes:

1.  **Guidance**: They inform servers about relevant resources and locations
2.  **Clarity**: Roots make it clear which resources are part of your workspace
3.  **Organization**: Multiple roots let you work with different resources simultaneously

## How Roots Work

When a client supports roots, it:

1.  Declares the `roots` capability during connection
2.  Provides a list of suggested roots to the server
3.  Notifies the server when roots change (if supported)

While roots are informational and not strictly enforcing, servers should:

1.  Respect the provided roots
2.  Use root URIs to locate and access resources
3.  Prioritize operations within root boundaries

## Common Use Cases

Roots are commonly used to define:

*   Project directories
*   Repository locations
*   API endpoints
*   Configuration locations
*   Resource boundaries

## Best Practices

When working with roots:

1.  Only suggest necessary resources
2.  Use clear, descriptive names for roots
3.  Monitor root accessibility
4.  Handle root changes gracefully

## Example

Here's how a typical MCP client might expose roots:

```json
{
  "roots": [
    {
      "uri": "file:///home/user/projects/frontend",
      "name": "Frontend Repository"
    },
    {
      "uri": "https://api.example.com/v1",
      "name": "API Endpoint"
    }
  ]
}
```

This configuration suggests the server focus on both a local repository and an API endpoint while keeping them logically separated.


# Sampling
Source: https://modelcontextprotocol.io/docs/concepts/sampling

Let your servers request completions from LLMs

Sampling is a powerful MCP feature that allows servers to request LLM completions through the client, enabling sophisticated agentic behaviors while maintaining security and privacy.

<Info>
  This feature of MCP is not yet supported in the Claude Desktop client.
</Info>

## How sampling works

The sampling flow follows these steps:

1.  Server sends a `sampling/createMessage` request to the client
2.  Client reviews the request and can modify it
3.  Client samples from an LLM
4.  Client reviews the completion
5.  Client returns the result to the server

This human-in-the-loop design ensures users maintain control over what the LLM sees and generates.

## Message format

Sampling requests use a standardized message format:

```typescript
{
  messages: [
    {
      role: "user" | "assistant",
      content: {
        type: "text" | "image",

        // For text:
        text?: string,

        // For images:
        data?: string,             // base64 encoded
        mimeType?: string
      }
    }
  ],
  modelPreferences?: {
    hints?: [{
      name?: string                // Suggested model name/family
    }],
    costPriority?: number,         // 0-1, importance of minimizing cost
    speedPriority?: number,        // 0-1, importance of low latency
    intelligencePriority?: number  // 0-1, importance of capabilities
  },
  systemPrompt?: string,
  includeContext?: "none" | "thisServer" | "allServers",
  temperature?: number,
  maxTokens: number,
  stopSequences?: string[],
  metadata?: Record<string, unknown>
}
```

## Request parameters

### Messages

The `messages` array contains the conversation history to send to the LLM. Each message has:

*   `role`: Either "user" or "assistant"
*   `content`: The message content, which can be:
    *   Text content with a `text` field
    *   Image content with `data` (base64) and `mimeType` fields

### Model preferences

The `modelPreferences` object allows servers to specify their model selection preferences:

*   `hints`: Array of model name suggestions that clients can use to select an appropriate model:
    *   `name`: String that can match full or partial model names (e.g. "claude-3", "sonnet")
    *   Clients may map hints to equivalent models from different providers
    *   Multiple hints are evaluated in preference order

*   Priority values (0-1 normalized):
    *   `costPriority`: Importance of minimizing costs
    *   `speedPriority`: Importance of low latency response
    *   `intelligencePriority`: Importance of advanced model capabilities

Clients make the final model selection based on these preferences and their available models.

### System prompt

An optional `systemPrompt` field allows servers to request a specific system prompt. The client may modify or ignore this.

### Context inclusion

The `includeContext` parameter specifies what MCP context to include:

*   `"none"`: No additional context
*   `"thisServer"`: Include context from the requesting server
*   `"allServers"`: Include context from all connected MCP servers

The client controls what context is actually included.

### Sampling parameters

Fine-tune the LLM sampling with:

*   `temperature`: Controls randomness (0.0 to 1.0)
*   `maxTokens`: Maximum tokens to generate
*   `stopSequences`: Array of sequences that stop generation
*   `metadata`: Additional provider-specific parameters

## Response format

The client returns a completion result:

```typescript
{
  model: string,  // Name of the model used
  stopReason?: "endTurn" | "stopSequence" | "maxTokens" | string,
  role: "user" | "assistant",
  content: {
    type: "text" | "image",
    text?: string,
    data?: string,
    mimeType?: string
  }
}
```

## Example request

Here's an example of requesting sampling from a client:

```json
{
  "method": "sampling/createMessage",
  "params": {
    "messages": [
      {
        "role": "user",
        "content": {
          "type": "text",
          "text": "What files are in the current directory?"
        }
      }
    ],
    "systemPrompt": "You are a helpful file system assistant.",
    "includeContext": "thisServer",
    "maxTokens": 100
  }
}
```

## Best practices

When implementing sampling:

1.  Always provide clear, well-structured prompts
2.  Handle both text and image content appropriately
3.  Set reasonable token limits
4.  Include relevant context through `includeContext`
5.  Validate responses before using them
6.  Handle errors gracefully
7.  Consider rate limiting sampling requests
8.  Document expected sampling behavior
9.  Test with various model parameters
10. Monitor sampling costs

## Human in the loop controls

Sampling is designed with human oversight in mind:

### For prompts

*   Clients should show users the proposed prompt
*   Users should be able to modify or reject prompts
*   System prompts can be filtered or modified
*   Context inclusion is controlled by the client

### For completions

*   Clients should show users the completion
*   Users should be able to modify or reject completions
*   Clients can filter or modify completions
*   Users control which model is used

## Security considerations

When implementing sampling:

*   Validate all message content
*   Sanitize sensitive information
*   Implement appropriate rate limits
*   Monitor sampling usage
*   Encrypt data in transit
*   Handle user data privacy
*   Audit sampling requests
*   Control cost exposure
*   Implement timeouts
*   Handle model errors gracefully

## Common patterns

### Agentic workflows

Sampling enables agentic patterns like:

*   Reading and analyzing resources
*   Making decisions based on context
*   Generating structured data
*   Handling multi-step tasks
*   Providing interactive assistance

### Context management

Best practices for context:

*   Request minimal necessary context
*   Structure context clearly
*   Handle context size limits
*   Update context as needed
*   Clean up stale context

### Error handling

Robust error handling should:

*   Catch sampling failures
*   Handle timeout errors
*   Manage rate limits
*   Validate responses
*   Provide fallback behaviors
*   Log errors appropriately

## Limitations

Be aware of these limitations:

*   Sampling depends on client capabilities
*   Users control sampling behavior
*   Context size has limits
*   Rate limits may apply
*   Costs should be considered
*   Model availability varies
*   Response times vary
*   Not all content types supported


# Tools
Source: https://modelcontextprotocol.io/docs/concepts/tools

Enable LLMs to perform actions through your server

Tools are a powerful primitive in the Model Context Protocol (MCP) that enable servers to expose executable functionality to clients. Through tools, LLMs can interact with external systems, perform computations, and take actions in the real world.

<Note>
  Tools are designed to be **model-controlled**, meaning that tools are exposed from servers to clients with the intention of the AI model being able to automatically invoke them (with a human in the loop to grant approval).
</Note>

## Overview

Tools in MCP allow servers to expose executable functions that can be invoked by clients and used by LLMs to perform actions. Key aspects of tools include:

*   **Discovery**: Clients can list available tools through the `tools/list` endpoint
*   **Invocation**: Tools are called using the `tools/call` endpoint, where servers perform the requested operation and return results
*   **Flexibility**: Tools can range from simple calculations to complex API interactions

Like [resources](/docs/concepts/resources), tools are identified by unique names and can include descriptions to guide their usage. However, unlike resources, tools represent dynamic operations that can modify state or interact with external systems.

## Tool definition structure

Each tool is defined with the following structure:

```typescript
{
  name: string;          // Unique identifier for the tool
  description?: string;  // Human-readable description
  inputSchema: {         // JSON Schema for the tool's parameters
    type: "object",
    properties: { ... }  // Tool-specific parameters
  }
}
```

## Implementing tools

Here's an example of implementing a basic tool in an MCP server:

<Tabs>
  <Tab title="TypeScript">
    ```typescript
    const server = new Server({
      name: "example-server",
      version: "1.0.0"
    }, {
      capabilities: {
        tools: {}
      }
    });

    // Define available tools
    server.setRequestHandler(ListToolsRequestSchema, async () => {
      return {
        tools: [{
          name: "calculate_sum",
          description: "Add two numbers together",
          inputSchema: {
            type: "object",
            properties: {
              a: { type: "number" },
              b: { type: "number" }
            },
            required: ["a", "b"]
          }
        }]
      };
    });

    // Handle tool execution
    server.setRequestHandler(CallToolRequestSchema, async (request) => {
      if (request.params.name === "calculate_sum") {
        const { a, b } = request.params.arguments;
        return {
          content: [
            {
              type: "text",
              text: String(a + b)
            }
          ]
        };
      }
      throw new Error("Tool not found");
    });
    ```
  </Tab>

  <Tab title="Python">
    ```python
    app = Server("example-server")

    @app.list_tools()
    async def list_tools() -> list[types.Tool]:
        return [
            types.Tool(
                name="calculate_sum",
                description="Add two numbers together",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "a": {"type": "number"},
                        "b": {"type": "number"}
                    },
                    "required": ["a", "b"]
                }
            )
        ]

    @app.call_tool()
    async def call_tool(
        name: str,
        arguments: dict
    ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
        if name == "calculate_sum":
            a = arguments["a"]
            b = arguments["b"]
            result = a + b
            return [types.TextContent(type="text", text=str(result))]
        raise ValueError(f"Tool not found: {name}")
    ```
  </Tab>
</Tabs>

## Example tool patterns

Here are some examples of types of tools that a server could provide:

### System operations

Tools that interact with the local system:

```typescript
{
  name: "execute_command",
  description: "Run a shell command",
  inputSchema: {
    type: "object",
    properties: {
      command: { type: "string" },
      args: { type: "array", items: { type: "string" } }
    }
  }
}
```

### API integrations

Tools that wrap external APIs:

```typescript
{
  name: "github_create_issue",
  description: "Create a GitHub issue",
  inputSchema: {
    type: "object",
    properties: {
      title: { type: "string" },
      body: { type: "string" },
      labels: { type: "array", items: { type: "string" } }
    }
  }
}
```

### Data processing

Tools that transform or analyze data:

```typescript
{
  name: "analyze_csv",
  description: "Analyze a CSV file",
  inputSchema: {
    type: "object",
    properties: {
      filepath: { type: "string" },
      operations: {
        type: "array",
        items: {
          enum: ["sum", "average", "count"]
        }
      }
    }
  }
}
```

## Best practices

When implementing tools:

1.  Provide clear, descriptive names and descriptions
2.  Use detailed JSON Schema definitions for parameters
3.  Include examples in tool descriptions to demonstrate how the model should use them
4.  Implement proper error handling and validation
5.  Use progress reporting for long operations
6.  Keep tool operations focused and atomic
7.  Document expected return value structures
8.  Implement proper timeouts
9.  Consider rate limiting for resource-intensive operations
10. Log tool usage for debugging and monitoring

## Security considerations

When exposing tools:

### Input validation

*   Validate all parameters against the schema
*   Sanitize file paths and system commands
*   Validate URLs and external identifiers
*   Check parameter sizes and ranges
*   Prevent command injection

### Access control

*   Implement authentication where needed
*   Use appropriate authorization checks
*   Audit tool usage
*   Rate limit requests
*   Monitor for abuse

### Error handling

*   Don't expose internal errors to clients
*   Log security-relevant errors
*   Handle timeouts appropriately
*   Clean up resources after errors
*   Validate return values

## Tool discovery and updates

MCP supports dynamic tool discovery:

1.  Clients can list available tools at any time
2.  Servers can notify clients when tools change using `notifications/tools/list_changed`
3.  Tools can be added or removed during runtime
4.  Tool definitions can be updated (though this should be done carefully)

## Error handling

Tool errors should be reported within the result object, not as MCP protocol-level errors. This allows the LLM to see and potentially handle the error. When a tool encounters an error:

1.  Set `isError` to `true` in the result
2.  Include error details in the `content` array

Here's an example of proper error handling for tools:

<Tabs>
  <Tab title="TypeScript">
    ```typescript
    try {
      // Tool operation
      const result = performOperation();
      return {
        content: [
          {
            type: "text",
            text: `Operation successful: ${result}`
          }
        ]
      };
    } catch (error) {
      return {
        isError: true,
        content: [
          {
            type: "text",
            text: `Error: ${error.message}`
          }
        ]
      };
    }
    ```
  </Tab>

  <Tab title="Python">
    ```python
    try:
        # Tool operation
        result = perform_operation()
        return types.CallToolResult(
            content=[
                types.TextContent(
                    type="text",
                    text=f"Operation successful: {result}"
                )
            ]
        )
    except Exception as error:
        return types.CallToolResult(
            isError=True,
            content=[
                types.TextContent(
                    type="text",
                    text=f"Error: {str(error)}"
                )
            ]
        )
    ```
  </Tab>
</Tabs>

This approach allows the LLM to see that an error occurred and potentially take corrective action or request human intervention.

## Testing tools

A comprehensive testing strategy for MCP tools should cover:

*   **Functional testing**: Verify tools execute correctly with valid inputs and handle invalid inputs appropriately
*   **Integration testing**: Test tool interaction with external systems using both real and mocked dependencies
*   **Security testing**: Validate authentication, authorization, input sanitization, and rate limiting
*   **Performance testing**: Check behavior under load, timeout handling, and resource cleanup
*   **Error handling**: Ensure tools properly report errors through the MCP protocol and clean up resources


# Transports
Source: https://modelcontextprotocol.io/docs/concepts/transports

Learn about MCP's communication mechanisms

Transports in the Model Context Protocol (MCP) provide the foundation for communication between clients and servers. A transport handles the underlying mechanics of how messages are sent and received.

## Message Format

MCP uses [JSON-RPC](https://www.jsonrpc.org/) 2.0 as its wire format. The transport layer is responsible for converting MCP protocol messages into JSON-RPC format for transmission and converting received JSON-RPC messages back into MCP protocol messages.

There are three types of JSON-RPC messages used:

### Requests

```typescript
{
  jsonrpc: "2.0",
  id: number | string,
  method: string,
  params?: object
}
```

### Responses

```typescript
{
  jsonrpc: "2.0",
  id: number | string,
  result?: object,
  error?: {
    code: number,
    message: string,
    data?: unknown
  }
}
```

### Notifications

```typescript
{
  jsonrpc: "2.0",
  method: string,
  params?: object
}
```

## Built-in Transport Types

MCP includes two standard transport implementations:

### Standard Input/Output (stdio)

The stdio transport enables communication through standard input and output streams. This is particularly useful for local integrations and command-line tools.

Use stdio when:

*   Building command-line tools
*   Implementing local integrations
*   Needing simple process communication
*   Working with shell scripts

<Tabs>
  <Tab title="TypeScript (Server)">
    ```typescript
    const server = new Server({
      name: "example-server",
      version: "1.0.0"
    }, {
      capabilities: {}
    });

    const transport = new StdioServerTransport();
    await server.connect(transport);
    ```
  </Tab>

  <Tab title="TypeScript (Client)">
    ```typescript
    const client = new Client({
      name: "example-client",
      version: "1.0.0"
    }, {
      capabilities: {}
    });

    const transport = new StdioClientTransport({
      command: "./server",
      args: ["--option", "value"]
    });
    await client.connect(transport);
    ```
  </Tab>

  <Tab title="Python (Server)">
    ```python
    app = Server("example-server")

    async with stdio_server() as streams:
        await app.run(
            streams[0],
            streams[1],
            app.create_initialization_options()
        )
    ```
  </Tab>

  <Tab title="Python (Client)">
    ```python
    params = StdioServerParameters(
        command="./server",
        args=["--option", "value"]
    )

    async with stdio_client(params) as streams:
        async with ClientSession(streams[0], streams[1]) as session:
            await session.initialize()
    ```
  </Tab>
</Tabs>

### Server-Sent Events (SSE)

SSE transport enables server-to-client streaming with HTTP POST requests for client-to-server communication.

Use SSE when:

*   Only server-to-client streaming is needed
*   Working with restricted networks
*   Implementing simple updates

<Tabs>
  <Tab title="TypeScript (Server)">
    ```typescript
    import express from "express";

    const app = express();

    const server = new Server({
      name: "example-server",
      version: "1.0.0"
    }, {
      capabilities: {}
    });

    let transport: SSEServerTransport | null = null;

    app.get("/sse", (req, res) => {
      transport = new SSEServerTransport("/messages", res);
      server.connect(transport);
    });

    app.post("/messages", (req, res) => {
      if (transport) {
        transport.handlePostMessage(req, res);
      }
    });

    app.listen(3000);
    ```
  </Tab>

  <Tab title="TypeScript (Client)">
    ```typescript
    const client = new Client({
      name: "example-client",
      version: "1.0.0"
    }, {
      capabilities: {}
    });

    const transport = new SSEClientTransport(
      new URL("http://localhost:3000/sse")
    );
    await client.connect(transport);
    ```
  </Tab>

  <Tab title="Python (Server)">
    ```python
    from mcp.server.sse import SseServerTransport
    from starlette.applications import Starlette
    from starlette.routing import Route

    app = Server("example-server")
    sse = SseServerTransport("/messages")

    async def handle_sse(scope, receive, send):
        async with sse.connect_sse(scope, receive, send) as streams:
            await app.run(streams[0], streams[1], app.create_initialization_options())

    async def handle_messages(scope, receive, send):
        await sse.handle_post_message(scope, receive, send)

    starlette_app = Starlette(
        routes=[
            Route("/sse", endpoint=handle_sse),
            Route("/messages", endpoint=handle_messages, methods=["POST"]),
        ]
    )
    ```
  </Tab>

  <Tab title="Python (Client)">
    ```python
    async with sse_client("http://localhost:8000/sse") as streams:
        async with ClientSession(streams[0], streams[1]) as session:
            await session.initialize()
    ```
  </Tab>
</Tabs>

## Custom Transports

MCP makes it easy to implement custom transports for specific needs. Any transport implementation just needs to conform to the Transport interface:

You can implement custom transports for:

*   Custom network protocols
*   Specialized communication channels
*   Integration with existing systems
*   Performance optimization

<Tabs>
  <Tab title="TypeScript">
    ```typescript
    interface Transport {
      // Start processing messages
      start(): Promise<void>;

      // Send a JSON-RPC message
      send(message: JSONRPCMessage): Promise<void>;

      // Close the connection
      close(): Promise<void>;

      // Callbacks
      onclose?: () => void;
      onerror?: (error: Error) => void;
      onmessage?: (message: JSONRPCMessage) => void;
    }
    ```
  </Tab>

  <Tab title="Python">
    Note that while MCP Servers are often implemented with asyncio, we recommend
    implementing low-level interfaces like transports with `anyio` for wider compatibility.

    ```python
    @contextmanager
    async def create_transport(
        read_stream: MemoryObjectReceiveStream[JSONRPCMessage | Exception],
        write_stream: MemoryObjectSendStream[JSONRPCMessage]
    ):
        """
        Transport interface for MCP.

        Args:
            read_stream: Stream to read incoming messages from
            write_stream: Stream to write outgoing messages to
        """
        async with anyio.create_task_group() as tg:
            try:
                # Start processing messages
                tg.start_soon(lambda: process_messages(read_stream))

                # Send messages
                async with write_stream:
                    yield write_stream

            except Exception as exc:
                # Handle errors
                raise exc
            finally:
                # Clean up
                tg.cancel_scope.cancel()
                await write_stream.aclose()
                await read_stream.aclose()
    ```
  </Tab>
</Tabs>

## Error Handling

Transport implementations should handle various error scenarios:

1.  Connection errors
2.  Message parsing errors
3.  Protocol errors
4.  Network timeouts
5.  Resource cleanup

Example error handling:

<Tabs>
  <Tab title="TypeScript">
    ```typescript
    class ExampleTransport implements Transport {
      async start() {
        try {
          // Connection logic
        } catch (error) {
          this.onerror?.(new Error(`Failed to connect: ${error}`));
          throw error;
        }
      }

      async send(message: JSONRPCMessage) {
        try {
          // Sending logic
        } catch (error) {
          this.onerror?.(new Error(`Failed to send message: ${error}`));
          throw error;
        }
      }
    }
    ```
  </Tab>

  <Tab title="Python">
    Note that while MCP Servers are often implemented with asyncio, we recommend
    implementing low-level interfaces like transports with `anyio` for wider compatibility.

    ```python
    @contextmanager
    async def example_transport(scope: Scope, receive: Receive, send: Send):
        try:
            # Create streams for bidirectional communication
            read_stream_writer, read_stream = anyio.create_memory_object_stream(0)
            write_stream, write_stream_reader = anyio.create_memory_object_stream(0)

            async def message_handler():
                try:
                    async with read_stream_writer:
                        # Message handling logic
                        pass
                except Exception as exc:
                    logger.error(f"Failed to handle message: {exc}")
                    raise exc

            async with anyio.create_task_group() as tg:
                tg.start_soon(message_handler)
                try:
                    # Yield streams for communication
                    yield read_stream, write_stream
                except Exception as exc:
                    logger.error(f"Transport error: {exc}")
                    raise exc
                finally:
                    tg.cancel_scope.cancel()
                    await write_stream.aclose()
                    await read_stream.aclose()
        except Exception as exc:
            logger.error(f"Failed to initialize transport: {exc}")
            raise exc
    ```
  </Tab>
</Tabs>

## Best Practices

When implementing or using MCP transport:

1.  Handle connection lifecycle properly
2.  Implement proper error handling
3.  Clean up resources on connection close
4.  Use appropriate timeouts
5.  Validate messages before sending
6.  Log transport events for debugging
7.  Implement reconnection logic when appropriate
8.  Handle backpressure in message queues
9.  Monitor connection health
10. Implement proper security measures

## Security Considerations

When implementing transport:

### Authentication and Authorization

*   Implement proper authentication mechanisms
*   Validate client credentials
*   Use secure token handling
*   Implement authorization checks

### Data Security

*   Use TLS for network transport
*   Encrypt sensitive data
*   Validate message integrity
*   Implement message size limits
*   Sanitize input data

### Network Security

*   Implement rate limiting
*   Use appropriate timeouts
*   Handle denial of service scenarios
*   Monitor for unusual patterns
*   Implement proper firewall rules

## Debugging Transport

Tips for debugging transport issues:

1.  Enable debug logging
2.  Monitor message flow
3.  Check connection states
4.  Validate message formats
5.  Test error scenarios
6.  Use network analysis tools
7.  Implement health checks
8.  Monitor resource usage
9.  Test edge cases
10. Use proper error tracking


# Debugging
Source: https://modelcontextprotocol.io/docs/tools/debugging

A comprehensive guide to debugging Model Context Protocol (MCP) integrations

Effective debugging is essential when developing MCP servers or integrating them with applications. This guide covers the debugging tools and approaches available in the MCP ecosystem.

<Info>
  This guide is for macOS. Guides for other platforms are coming soon.
</Info>

## Debugging tools overview

MCP provides several tools for debugging at different levels:

1.  **MCP Inspector**
    *   Interactive debugging interface
    *   Direct server testing
    *   See the [Inspector guide](/docs/tools/inspector) for details

2.  **Claude Desktop Developer Tools**
    *   Integration testing
    *   Log collection
    *   Chrome DevTools integration

3.  **Server Logging**
    *   Custom logging implementations
    *   Error tracking
    *   Performance monitoring

## Debugging in Claude Desktop

### Checking server status

The Claude.app interface provides basic server status information:

1.  Click the <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/claude-desktop-mcp-plug-icon.svg" style={{display: 'inline', margin: 0, height: '1.3em'}} /> icon to view:
    *   Connected servers
    *   Available prompts and resources

2.  Click the <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/claude-desktop-mcp-hammer-icon.svg" style={{display: 'inline', margin: 0, height: '1.3em'}} /> icon to view:
    *   Tools made available to the model

### Viewing logs

Review detailed MCP logs from Claude Desktop:

```bash
# Follow logs in real-time
tail -n 20 -F ~/Library/Logs/Claude/mcp*.log
```

The logs capture:

*   Server connection events
*   Configuration issues
*   Runtime errors
*   Message exchanges

### Using Chrome DevTools

Access Chrome's developer tools inside Claude Desktop to investigate client-side errors:

1.  Create a `developer_settings.json` file with `allowDevTools` set to true:

```bash
echo '{"allowDevTools": true}' > ~/Library/Application\ Support/Claude/developer_settings.json
```

2.  Open DevTools: `Command-Option-Shift-i`

Note: You'll see two DevTools windows:

*   Main content window
*   App title bar window

Use the Console panel to inspect client-side errors.

Use the Network panel to inspect:

*   Message payloads
*   Connection timing

## Common issues

### Working directory

When using MCP servers with Claude Desktop:

*   The working directory for servers launched via `claude_desktop_config.json` may be undefined (like `/` on macOS) since Claude Desktop could be started from anywhere
*   Always use absolute paths in your configuration and `.env` files to ensure reliable operation
*   For testing servers directly via command line, the working directory will be where you run the command

For example in `claude_desktop_config.json`, use:

```json
{
  "command": "npx",
  "args": ["-y", "@modelcontextprotocol/server-filesystem", "/Users/username/data"]
}
```

Instead of relative paths like `./data`

### Environment variables

MCP servers inherit only a subset of environment variables automatically, like `USER`, `HOME`, and `PATH`.

To override the default variables or provide your own, you can specify an `env` key in `claude_desktop_config.json`:

```json
{
  "myserver": {
    "command": "mcp-server-myapp",
    "env": {
      "MYAPP_API_KEY": "some_key",
    }
  }
}
```

### Server initialization

Common initialization problems:

1.  **Path Issues**
    *   Incorrect server executable path
    *   Missing required files
    *   Permission problems
    *   Try using an absolute path for `command`

2.  **Configuration Errors**
    *   Invalid JSON syntax
    *   Missing required fields
    *   Type mismatches

3.  **Environment Problems**
    *   Missing environment variables
    *   Incorrect variable values
    *   Permission restrictions

### Connection problems

When servers fail to connect:

1.  Check Claude Desktop logs
2.  Verify server process is running
3.  Test standalone with [Inspector](/docs/tools/inspector)
4.  Verify protocol compatibility

## Implementing logging

### Server-side logging

When building a server that uses the local stdio [transport](/docs/concepts/transports), all messages logged to stderr (standard error) will be captured by the host application (e.g., Claude Desktop) automatically.

<Warning>
  Local MCP servers should not log messages to stdout (standard out), as this will interfere with protocol operation.
</Warning>

For all [transports](/docs/concepts/transports), you can also provide logging to the client by sending a log message notification:

<Tabs>
  <Tab title="Python">
    ```python
    server.request_context.session.send_log_message(
      level="info",
      data="Server started successfully",
    )
    ```
  </Tab>

  <Tab title="TypeScript">
    ```typescript
    server.sendLoggingMessage({
      level: "info",
      data: "Server started successfully",
    });
    ```
  </Tab>
</Tabs>

Important events to log:

*   Initialization steps
*   Resource access
*   Tool execution
*   Error conditions
*   Performance metrics

### Client-side logging

In client applications:

1.  Enable debug logging
2.  Monitor network traffic
3.  Track message exchanges
4.  Record error states

## Debugging workflow

### Development cycle

1.  Initial Development
    *   Use [Inspector](/docs/tools/inspector) for basic testing
    *   Implement core functionality
    *   Add logging points

2.  Integration Testing
    *   Test in Claude Desktop
    *   Monitor logs
    *   Check error handling

### Testing changes

To test changes efficiently:

*   **Configuration changes**: Restart Claude Desktop
*   **Server code changes**: Use Command-R to reload
*   **Quick iteration**: Use [Inspector](/docs/tools/inspector) during development

## Best practices

### Logging strategy

1.  **Structured Logging**
    *   Use consistent formats
    *   Include context
    *   Add timestamps
    *   Track request IDs

2.  **Error Handling**
    *   Log stack traces
    *   Include error context
    *   Track error patterns
    *   Monitor recovery

3.  **Performance Tracking**
    *   Log operation timing
    *   Monitor resource usage
    *   Track message sizes
    *   Measure latency

### Security considerations

When debugging:

1.  **Sensitive Data**
    *   Sanitize logs
    *   Protect credentials
    *   Mask personal information

2.  **Access Control**
    *   Verify permissions
    *   Check authentication
    *   Monitor access patterns

## Getting help

When encountering issues:

1.  **First Steps**
    *   Check server logs
    *   Test with [Inspector](/docs/tools/inspector)
    *   Review configuration
    *   Verify environment

2.  **Support Channels**
    *   GitHub issues
    *   GitHub discussions

3.  **Providing Information**
    *   Log excerpts
    *   Configuration files
    *   Steps to reproduce
    *   Environment details

## Next steps

<CardGroup cols={2}>
  <Card title="MCP Inspector" icon="magnifying-glass" href="/docs/tools/inspector">
    Learn to use the MCP Inspector
  </Card>
</CardGroup>


# Inspector
Source: https://modelcontextprotocol.io/docs/tools/inspector

In-depth guide to using the MCP Inspector for testing and debugging Model Context Protocol servers

The [MCP Inspector](https://github.com/modelcontextprotocol/inspector) is an interactive developer tool for testing and debugging MCP servers. While the [Debugging Guide](/docs/tools/debugging) covers the Inspector as part of the overall debugging toolkit, this document provides a detailed exploration of the Inspector's features and capabilities.

## Getting started

### Installation and basic usage

The Inspector runs directly through `npx` without requiring installation:

```bash
npx @modelcontextprotocol/inspector <command>
```

```bash
npx @modelcontextprotocol/inspector <command> <arg1> <arg2>
```

#### Inspecting servers from NPM or PyPi

A common way to start server packages from [NPM](https://npmjs.com) or [PyPi](https://pypi.com).

<Tabs>
  <Tab title="NPM package">
    ```bash
    npx -y @modelcontextprotocol/inspector npx <package-name> <args>
    # For example
    npx -y @modelcontextprotocol/inspector npx server-postgres postgres://127.0.0.1/testdb
    ```
  </Tab>

  <Tab title="PyPi package">
    ```bash
    npx @modelcontextprotocol/inspector uvx <package-name> <args>
    # For example
    npx @modelcontextprotocol/inspector uvx mcp-server-git --repository ~/code/mcp/servers.git
    ```
  </Tab>
</Tabs>

#### Inspecting locally developed servers

To inspect servers locally developed or downloaded as a repository, the most common
way is:

<Tabs>
  <Tab title="TypeScript">
    ```bash
    npx @modelcontextprotocol/inspector node path/to/server/index.js args...
    ```
  </Tab>

  <Tab title="Python">
    ```bash
    npx @modelcontextprotocol/inspector \
      uv \
      --directory path/to/server \
      run \
      package-name \
      args...
    ```
  </Tab>
</Tabs>

Please carefully read any attached README for the most accurate instructions.

## Feature overview

<Frame caption="The MCP Inspector interface">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/mcp-inspector.png" />
</Frame>

The Inspector provides several features for interacting with your MCP server:

### Server connection pane

*   Allows selecting the [transport](/docs/concepts/transports) for connecting to the server
*   For local servers, supports customizing the command-line arguments and environment

### Resources tab

*   Lists all available resources
*   Shows resource metadata (MIME types, descriptions)
*   Allows resource content inspection
*   Supports subscription testing

### Prompts tab

*   Displays available prompt templates
*   Shows prompt arguments and descriptions
*   Enables prompt testing with custom arguments
*   Previews generated messages

### Tools tab

*   Lists available tools
*   Shows tool schemas and descriptions
*   Enables tool testing with custom inputs
*   Displays tool execution results

### Notifications pane

*   Presents all logs recorded from the server
*   Shows notifications received from the server

## Best practices

### Development workflow

1.  Start Development
    *   Launch Inspector with your server
    *   Verify basic connectivity
    *   Check capability negotiation

2.  Iterative testing
    *   Make server changes
    *   Rebuild the server
    *   Reconnect the Inspector
    *   Test affected features
    *   Monitor messages

3.  Test edge cases
    *   Invalid inputs
    *   Missing prompt arguments
    *   Concurrent operations
    *   Verify error handling and error responses

## Next steps

<CardGroup cols={2}>
  <Card title="Inspector Repository" icon="github" href="https://github.com/modelcontextprotocol/inspector">
    Check out the MCP Inspector source code
  </Card>

  <Card title="Debugging Guide" icon="bug" href="/docs/tools/debugging">
    Learn about broader debugging strategies
  </Card>
</CardGroup>


# Example Servers
Source: https://modelcontextprotocol.io/examples

A list of example servers and implementations

This page showcases various Model Context Protocol (MCP) servers that demonstrate the protocol's capabilities and versatility. These servers enable Large Language Models (LLMs) to securely access tools and data sources.

## Reference implementations

These official reference servers demonstrate core MCP features and SDK usage:

### Data and file systems

* **[Filesystem](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem)** - Secure file operations with configurable access controls
* **[PostgreSQL](https://github.com/modelcontextprotocol/servers/tree/main/src/postgres)** - Read-only database access with schema inspection capabilities
* **[SQLite](https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite)** - Database interaction and business intelligence features
* **[Google Drive](https://github.com/modelcontextprotocol/servers/tree/main/src/gdrive)** - File access and search capabilities for Google Drive

### Development tools

* **[Git](https://github.com/modelcontextprotocol/servers/tree/main/src/git)** - Tools to read, search, and manipulate Git repositories
* **[GitHub](https://github.com/modelcontextprotocol/servers/tree/main/src/github)** - Repository management, file operations, and GitHub API integration
* **[GitLab](https://github.com/modelcontextprotocol/servers/tree/main/src/gitlab)** - GitLab API integration enabling project management
* **[Sentry](https://github.com/modelcontextprotocol/servers/tree/main/src/sentry)** - Retrieving and analyzing issues from Sentry.io

### Web and browser automation

* **[Brave Search](https://github.com/modelcontextprotocol/servers/tree/main/src/brave-search)** - Web and local search using Brave's Search API
* **[Fetch](https://github.com/modelcontextprotocol/servers/tree/main/src/fetch)** - Web content fetching and conversion optimized for LLM usage
* **[Puppeteer](https://github.com/modelcontextprotocol/servers/tree/main/src/puppeteer)** - Browser automation and web scraping capabilities

### Productivity and communication

* **[Slack](https://github.com/modelcontextprotocol/servers/tree/main/src/slack)** - Channel management and messaging capabilities
* **[Google Maps](https://github.com/modelcontextprotocol/servers/tree/main/src/google-maps)** - Location services, directions, and place details
* **[Memory](https://github.com/modelcontextprotocol/servers/tree/main/src/memory)** - Knowledge graph-based persistent memory system

### AI and specialized tools

* **[EverArt](https://github.com/modelcontextprotocol/servers/tree/main/src/everart)** - AI image generation using various models
* **[Sequential Thinking](https://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking)** - Dynamic problem-solving through thought sequences
* **[AWS KB Retrieval](https://github.com/modelcontextprotocol/servers/tree/main/src/aws-kb-retrieval-server)** - Retrieval from AWS Knowledge Base using Bedrock Agent Runtime

## Official integrations

These MCP servers are maintained by companies for their platforms:

* **[Axiom](https://github.com/axiomhq/mcp-server-axiom)** - Query and analyze logs, traces, and event data using natural language
* **[Browserbase](https://github.com/browserbase/mcp-server-browserbase)** - Automate browser interactions in the cloud
* **[Cloudflare](https://github.com/cloudflare/mcp-server-cloudflare)** - Deploy and manage resources on the Cloudflare developer platform
* **[E2B](https://github.com/e2b-dev/mcp-server)** - Execute code in secure cloud sandboxes
* **[Neon](https://github.com/neondatabase/mcp-server-neon)** - Interact with the Neon serverless Postgres platform
* **[Obsidian Markdown Notes](https://github.com/calclavia/mcp-obsidian)** - Read and search through Markdown notes in Obsidian vaults
* **[Qdrant](https://github.com/qdrant/mcp-server-qdrant/)** - Implement semantic memory using the Qdrant vector search engine
* **[Raygun](https://github.com/MindscapeHQ/mcp-server-raygun)** - Access crash reporting and monitoring data
* **[Search1API](https://github.com/fatwang2/search1api-mcp)** - Unified API for search, crawling, and sitemaps
* **[Stripe](https://github.com/stripe/agent-toolkit)** - Interact with the Stripe API
* **[Tinybird](https://github.com/tinybirdco/mcp-tinybird)** - Interface with the Tinybird serverless ClickHouse platform

## Community highlights

A growing ecosystem of community-developed servers extends MCP's capabilities:

* **[Docker](https://github.com/ckreiling/mcp-server-docker)** - Manage containers, images, volumes, and networks
* **[Kubernetes](https://github.com/Flux159/mcp-server-kubernetes)** - Manage pods, deployments, and services
* **[Linear](https://github.com/jerhadf/linear-mcp-server)** - Project management and issue tracking
* **[Snowflake](https://github.com/datawiz168/mcp-snowflake-service)** - Interact with Snowflake databases
* **[Spotify](https://github.com/varunneal/spotify-mcp)** - Control Spotify playback and manage playlists
* **[Todoist](https://github.com/abhiz123/todoist-mcp-server)** - Task management integration

> **Note:** Community servers are untested and should be used at your own risk. They are not affiliated with or endorsed by Anthropic.

For a complete list of community servers, visit the [MCP Servers Repository](https://github.com/modelcontextprotocol/servers).

## Getting started

### Using reference servers

TypeScript-based servers can be used directly with `npx`:

```bash
npx -y @modelcontextprotocol/server-memory
```

Python-based servers can be used with `uvx` (recommended) or `pip`:

```bash
# Using uvx
uvx mcp-server-git

# Using pip
pip install mcp-server-git
python -m mcp_server_git
```

### Configuring with Claude

To use an MCP server with Claude, add it to your configuration:

```json
{
  "mcpServers": {
    "memory": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-memory"]
    },
    "filesystem": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-filesystem", "/path/to/allowed/files"]
    },
    "github": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "<YOUR_TOKEN>"
      }
    }
  }
}
```

## Additional resources

* [MCP Servers Repository](https://github.com/modelcontextprotocol/servers) - Complete collection of reference implementations and community servers
* [Awesome MCP Servers](https://github.com/punkpeye/awesome-mcp-servers) - Curated list of MCP servers
* [MCP CLI](https://github.com/wong2/mcp-cli) - Command-line inspector for testing MCP servers
* [MCP Get](https://mcp-get.com) - Tool for installing and managing MCP servers
* [Supergateway](https://github.com/supercorp-ai/supergateway) - Run MCP stdio servers over SSE

Visit our [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions) to engage with the MCP community.


# Introduction
Source: https://modelcontextprotocol.io/introduction

Get started with the Model Context Protocol (MCP)

<Note>Java SDK released! Check out [what else is new.](/development/updates)</Note>

MCP is an open protocol that standardizes how applications provide context to LLMs. Think of MCP like a USB-C port for AI applications. Just as USB-C provides a standardized way to connect your devices to various peripherals and accessories, MCP provides a standardized way to connect AI models to different data sources and tools.

## Why MCP?

MCP helps you build agents and complex workflows on top of LLMs. LLMs frequently need to integrate with data and tools, and MCP provides:

* A growing list of pre-built integrations that your LLM can directly plug into
* The flexibility to switch between LLM providers and vendors
* Best practices for securing your data within your infrastructure

### General architecture

At its core, MCP follows a client-server architecture where a host application can connect to multiple servers:

```mermaid
flowchart LR
    subgraph "Your Computer"
        Host["Host with MCP Client\n(Claude, IDEs, Tools)"]
        S1["MCP Server A"]
        S2["MCP Server B"]
        S3["MCP Server C"]
        Host <-->|"MCP Protocol"| S1
        Host <-->|"MCP Protocol"| S2
        Host <-->|"MCP Protocol"| S3
        S1 <--> D1[("Local\nData Source A")]
        S2 <--> D2[("Local\nData Source B")]
    end
    subgraph "Internet"
        S3 <-->|"Web APIs"| D3[("Remote\nService C")]
    end
```

* **MCP Hosts**: Programs like Claude Desktop, IDEs, or AI tools that want to access data through MCP
* **MCP Clients**: Protocol clients that maintain 1:1 connections with servers
* **MCP Servers**: Lightweight programs that each expose specific capabilities through the standardized Model Context Protocol
* **Local Data Sources**: Your computer's files, databases, and services that MCP servers can securely access
* **Remote Services**: External systems available over the internet (e.g., through APIs) that MCP servers can connect to

## Get started

Choose the path that best fits your needs:

#### Quick Starts

<CardGroup cols={2}>
  <Card title="For Server Developers" icon="bolt" href="/quickstart/server">
    Get started building your own server to use in Claude for Desktop and other clients
  </Card>

  <Card title="For Client Developers" icon="bolt" href="/quickstart/client">
    Get started building your own client that can integrate with all MCP servers
  </Card>

  <Card title="For Claude Desktop Users" icon="bolt" href="/quickstart/user">
    Get started using pre-built servers in Claude for Desktop
  </Card>
</CardGroup>

#### Examples

<CardGroup cols={2}>
  <Card title="Example Servers" icon="grid" href="/examples">
    Check out our gallery of official MCP servers and implementations
  </Card>

  <Card title="Example Clients" icon="cubes" href="/clients">
    View the list of clients that support MCP integrations
  </Card>
</CardGroup>

## Tutorials

<CardGroup cols={2}>
  <Card title="Building MCP with LLMs" icon="comments" href="/tutorials/building-mcp-with-llms">
    Learn how to use LLMs like Claude to speed up your MCP development
  </Card>

  <Card title="Debugging Guide" icon="bug" href="/docs/tools/debugging">
    Learn how to effectively debug MCP servers and integrations
  </Card>

  <Card title="MCP Inspector" icon="magnifying-glass" href="/docs/tools/inspector">
    Test and inspect your MCP servers with our interactive debugging tool
  </Card>
</CardGroup>

## Explore MCP

Dive deeper into MCP's core concepts and capabilities:

<CardGroup cols={2}>
  <Card title="Core architecture" icon="sitemap" href="/docs/concepts/architecture">
    Understand how MCP connects clients, servers, and LLMs
  </Card>

  <Card title="Resources" icon="database" href="/docs/concepts/resources">
    Expose data and content from your servers to LLMs
  </Card>

  <Card title="Prompts" icon="message" href="/docs/concepts/prompts">
    Create reusable prompt templates and workflows
  </Card>

  <Card title="Tools" icon="wrench" href="/docs/concepts/tools">
    Enable LLMs to perform actions through your server
  </Card>

  <Card title="Sampling" icon="robot" href="/docs/concepts/sampling">
    Let your servers request completions from LLMs
  </Card>

  <Card title="Transports" icon="network-wired" href="/docs/concepts/transports">
    Learn about MCP's communication mechanism
  </Card>
</CardGroup>

## Contributing

Want to contribute? Check out our [Contributing Guide](/development/contributing) to learn how you can help improve MCP.

## Support and Feedback

Here's how to get help or provide feedback:

* For bug reports and feature requests related to the MCP specification, SDKs, or documentation (open source), please [create a GitHub issue](https://github.com/modelcontextprotocol)
* For discussions or Q\&A about the MCP specification, use the [specification discussions](https://github.com/modelcontextprotocol/specification/discussions)
* For discussions or Q\&A about other MCP open source components, use the [organization discussions](https://github.com/orgs/modelcontextprotocol/discussions)
* For bug reports, feature requests, and questions related to Claude.app and claude.ai's MCP integration, please email [mcp-support@anthropic.com](mailto:mcp-support@anthropic.com)


# For Client Developers
Source: https://modelcontextprotocol.io/quickstart/client

Get started building your own client that can integrate with all MCP servers.

In this tutorial, you'll learn how to build a LLM-powered chatbot client that connects to MCP servers. It helps to have gone through the [Server quickstart](/quickstart/server) that guides you through the basic of building your first server.

<Tabs>
  <Tab title="Python">
    [You can find the complete code for this tutorial here.](https://github.com/modelcontextprotocol/quickstart-resources/tree/main/mcp-client)

    ## System Requirements

    Before starting, ensure your system meets these requirements:

    * Mac or Windows computer
    * Latest Python version installed
    * Latest version of `uv` installed

    ## Setting Up Your Environment

    First, create a new Python project with `uv`:

    ```bash
    # Create project directory
    uv init mcp-client
    cd mcp-client

    # Create virtual environment
    uv venv

    # Activate virtual environment
    # On Windows:
    .venv\Scripts\activate
    # On Unix or MacOS:
    source .venv/bin/activate

    # Install required packages
    uv add mcp anthropic python-dotenv

    # Remove boilerplate files
    rm hello.py

    # Create our main file
    touch client.py
    ```

    ## Setting Up Your API Key

    You'll need an Anthropic API key from the [Anthropic Console](https://console.anthropic.com/settings/keys).

    Create a `.env` file to store it:

    ```bash
    # Create .env file
    touch .env
    ```

    Add your key to the `.env` file:

    ```bash
    ANTHROPIC_API_KEY=<your key here>
    ```

    Add `.env` to your `.gitignore`:

    ```bash
    echo ".env" >> .gitignore
    ```

    <Warning>
      Make sure you keep your `ANTHROPIC_API_KEY` secure!
    </Warning>

    ## Creating the Client

    ### Basic Client Structure

    First, let's set up our imports and create the basic client class:

    ```python
    import asyncio
    from typing import Optional
    from contextlib import AsyncExitStack

    from mcp import ClientSession, StdioServerParameters
    from mcp.client.stdio import stdio_client

    from anthropic import Anthropic
    from dotenv import load_dotenv

    load_dotenv()  # load environment variables from .env

    class MCPClient:
        def __init__(self):
            # Initialize session and client objects
            self.session: Optional[ClientSession] = None
            self.exit_stack = AsyncExitStack()
            self.anthropic = Anthropic()
        # methods will go here
    ```

    ### Server Connection Management

    Next, we'll implement the method to connect to an MCP server:

    ```python
    async def connect_to_server(self, server_script_path: str):
        """Connect to an MCP server

        Args:
            server_script_path: Path to the server script (.py or .js)
        """
        is_python = server_script_path.endswith('.py')
        is_js = server_script_path.endswith('.js')
        if not (is_python or is_js):
            raise ValueError("Server script must be a .py or .js file")

        command = "python" if is_python else "node"
        server_params = StdioServerParameters(
            command=command,
            args=[server_script_path],
            env=None
        )

        stdio_transport = await self.exit_stack.enter_async_context(stdio_client(server_params))
        self.stdio, self.write = stdio_transport
        self.session = await self.exit_stack.enter_async_context(ClientSession(self.stdio, self.write))

        await self.session.initialize()

        # List available tools
        response = await self.session.list_tools()
        tools = response.tools
        print("\nConnected to server with tools:", [tool.name for tool in tools])
    ```

    ### Query Processing Logic

    Now let's add the core functionality for processing queries and handling tool calls:

    ```python
    async def process_query(self, query: str) -> str:
        """Process a query using Claude and available tools"""
        messages = [
            {
                "role": "user",
                "content": query
            }
        ]

        response = await self.session.list_tools()
        available_tools = [{
            "name": tool.name,
            "description": tool.description,
            "input_schema": tool.inputSchema
        } for tool in response.tools]

        # Initial Claude API call
        response = self.anthropic.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=1000,
            messages=messages,
            tools=available_tools
        )

        # Process response and handle tool calls
        tool_results = []
        final_text = []

        assistant_message_content = []
        for content in response.content:
            if content.type == 'text':
                final_text.append(content.text)
                assistant_message_content.append(content)
            elif content.type == 'tool_use':
                tool_name = content.name
                tool_args = content.input

                # Execute tool call
                result = await self.session.call_tool(tool_name, tool_args)
                tool_results.append({"call": tool_name, "result": result})
                final_text.append(f"[Calling tool {tool_name} with args {tool_args}]")

                assistant_message_content.append(content)
                messages.append({
                    "role": "assistant",
                    "content": assistant_message_content
                })
                messages.append({
                    "role": "user",
                    "content": [
                        {
                            "type": "tool_result",
                            "tool_use_id": content.id,
                            "content": result.content
                        }
                    ]
                })

                # Get next response from Claude
                response = self.anthropic.messages.create(
                    model="claude-3-5-sonnet-20241022",
                    max_tokens=1000,
                    messages=messages,
                    tools=available_tools
                )

                final_text.append(response.content[0].text)

        return "\n".join(final_text)
    ```

    ### Interactive Chat Interface

    Now we'll add the chat loop and cleanup functionality:

    ```python
    async def chat_loop(self):
        """Run an interactive chat loop"""
        print("\nMCP Client Started!")
        print("Type your queries or 'quit' to exit.")

        while True:
            try:
                query = input("\nQuery: ").strip()

                if query.lower() == 'quit':
                    break

                response = await self.process_query(query)
                print("\n" + response)

            except Exception as e:
                print(f"\nError: {str(e)}")

    async def cleanup(self):
        """Clean up resources"""
        await self.exit_stack.aclose()
    ```

    ### Main Entry Point

    Finally, we'll add the main execution logic:

    ```python
    async def main():
        if len(sys.argv) < 2:
            print("Usage: python client.py <path_to_server_script>")
            sys.exit(1)

        client = MCPClient()
        try:
            await client.connect_to_server(sys.argv[1])
            await client.chat_loop()
        finally:
            await client.cleanup()

    if __name__ == "__main__":
        import sys
        asyncio.run(main())
    ```

    You can find the complete `client.py` file [here.](https://gist.github.com/zckly/f3f28ea731e096e53b39b47bf0a2d4b1)

    ## Key Components Explained

    ### 1. Client Initialization

    * The `MCPClient` class initializes with session management and API clients
    * Uses `AsyncExitStack` for proper resource management
    * Configures the Anthropic client for Claude interactions

    ### 2. Server Connection

    * Supports both Python and Node.js servers
    * Validates server script type
    * Sets up proper communication channels
    * Initializes the session and lists available tools

    ### 3. Query Processing

    * Maintains conversation context
    * Handles Claude's responses and tool calls
    * Manages the message flow between Claude and tools
    * Combines results into a coherent response

    ### 4. Interactive Interface

    * Provides a simple command-line interface
    * Handles user input and displays responses
    * Includes basic error handling
    * Allows graceful exit

    ### 5. Resource Management

    * Proper cleanup of resources
    * Error handling for connection issues
    * Graceful shutdown procedures

    ## Common Customization Points

    1. **Tool Handling**
       * Modify `process_query()` to handle specific tool types
       * Add custom error handling for tool calls
       * Implement tool-specific response formatting

    2. **Response Processing**
       * Customize how tool results are formatted
       * Add response filtering or transformation
       * Implement custom logging

    3. **User Interface**
       * Add a GUI or web interface
       * Implement rich console output
       * Add command history or auto-completion

    ## Running the Client

    To run your client with any MCP server:

    ```bash
    uv run client.py path/to/server.py # python server
    uv run client.py path/to/build/index.js # node server
    ```

    <Note>
      If you're continuing the weather tutorial from the server quickstart, your command might look something like this: `python client.py .../weather/src/weather/server.py`
    </Note>

    The client will:

    1. Connect to the specified server
    2. List available tools
    3. Start an interactive chat session where you can:
       * Enter queries
       * See tool executions
       * Get responses from Claude

    Here's an example of what it should look like if connected to the weather server from the server quickstart:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/client-claude-cli-python.png" />
    </Frame>

    ## How It Works

    When you submit a query:

    1. The client gets the list of available tools from the server
    2. Your query is sent to Claude along with tool descriptions
    3. Claude decides which tools (if any) to use
    4. The client executes any requested tool calls through the server
    5. Results are sent back to Claude
    6. Claude provides a natural language response
    7. The response is displayed to you

    ## Best practices

    1. **Error Handling**
       * Always wrap tool calls in try-catch blocks
       * Provide meaningful error messages
       * Gracefully handle connection issues

    2. **Resource Management**
       * Use `AsyncExitStack` for proper cleanup
       * Close connections when done
       * Handle server disconnections

    3. **Security**
       * Store API keys securely in `.env`
       * Validate server responses
       * Be cautious with tool permissions

    ## Troubleshooting

    ### Server Path Issues

    * Double-check the path to your server script is correct
    * Use the absolute path if the relative path isn't working
    * For Windows users, make sure to use forward slashes (/) or escaped backslashes (\\) in the path
    * Verify the server file has the correct extension (.py for Python or .js for Node.js)

    Example of correct path usage:

    ```bash
    # Relative path
    uv run client.py ./server/weather.py

    # Absolute path
    uv run client.py /Users/username/projects/mcp-server/weather.py

    # Windows path (either format works)
    uv run client.py C:/projects/mcp-server/weather.py
    uv run client.py C:\\projects\\mcp-server\\weather.py
    ```

    ### Response Timing

    * The first response might take up to 30 seconds to return
    * This is normal and happens while:
      * The server initializes
      * Claude processes the query
      * Tools are being executed
    * Subsequent responses are typically faster
    * Don't interrupt the process during this initial waiting period

    ### Common Error Messages

    If you see:

    * `FileNotFoundError`: Check your server path
    * `Connection refused`: Ensure the server is running and the path is correct
    * `Tool execution failed`: Verify the tool's required environment variables are set
    * `Timeout error`: Consider increasing the timeout in your client configuration
  </Tab>

  <Tab title="Java">
    <Note>
      This is a quickstart demo based on Spring AI MCP auto-configuration and boot starters.
      To learn how to create sync and async MCP Clients manually, consult the [Java SDK Client](/sdk/java/mcp-client) documentation
    </Note>

    This example demonstrates how to build an interactive chatbot that combines Spring AI's Model Context Protocol (MCP) with the [Brave Search MCP Server](https://github.com/modelcontextprotocol/servers/tree/main/src/brave-search). The application creates a conversational interface powered by Anthropic's Claude AI model that can perform internet searches through Brave Search, enabling natural language interactions with real-time web data.
    [You can find the complete code for this tutorial here.](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol/web-search/brave-chatbot)

    ## System Requirements

    Before starting, ensure your system meets these requirements:

    * Java 17 or higher
    * Maven 3.6+
    * npx package manager
    * Anthropic API key (Claude)
    * Brave Search API key

    ## Setting Up Your Environment

    1. Install npx (Node Package eXecute):
       First, make sure to install [npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)
       and then run:
       ```bash
       npm install -g npx
       ```

    2. Clone the repository:
       ```bash
       git clone https://github.com/spring-projects/spring-ai-examples.git
       cd model-context-protocol/brave-chatbot
       ```

    3. Set up your API keys:
       ```bash
       export ANTHROPIC_API_KEY='your-anthropic-api-key-here'
       export BRAVE_API_KEY='your-brave-api-key-here'
       ```

    4. Build the application:
       ```bash
       ./mvnw clean install
       ```

    5. Run the application using Maven:
       ```bash
       ./mvnw spring-boot:run
       ```

    <Warning>
      Make sure you keep your `ANTHROPIC_API_KEY` and `BRAVE_API_KEY` keys secure!
    </Warning>

    ## How it Works

    The application integrates Spring AI with the Brave Search MCP server through several components:

    ### MCP Client Configuration

    1. Required dependencies in pom.xml:

    ```xml
    <dependency>
        <groupId>org.springframework.ai</groupId>
        <artifactId>spring-ai-mcp-client-spring-boot-starter</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.ai</groupId>
        <artifactId>spring-ai-anthropic-spring-boot-starter</artifactId>
    </dependency>
    ```

    2. Application properties (application.yml):

    ```yml
    spring:
      ai:
        mcp:
          client:
            enabled: true
            name: brave-search-client
            version: 1.0.0
            type: SYNC
            request-timeout: 20s
            stdio:
              root-change-notification: true
              servers-configuration: classpath:/mcp-servers-config.json
        anthropic:
          api-key: ${ANTHROPIC_API_KEY}
    ```

    This activates the `spring-ai-mcp-client-spring-boot-starter` to create one or more `McpClient`s based on the provided server configuration.

    3. MCP Server Configuration (`mcp-servers-config.json`):

    ```json
    {
      "mcpServers": {
        "brave-search": {
          "command": "npx",
          "args": [
            "-y",
            "@modelcontextprotocol/server-brave-search"
          ],
          "env": {
            "BRAVE_API_KEY": "<PUT YOUR BRAVE API KEY>"
          }
        }
      }
    }
    ```

    ### Chat Implementation

    The chatbot is implemented using Spring AI's ChatClient with MCP tool integration:

    ```java
    var chatClient = chatClientBuilder
        .defaultSystem("You are useful assistant, expert in AI and Java.")
        .defaultTools((Object[]) mcpToolAdapter.toolCallbacks())
        .defaultAdvisors(new MessageChatMemoryAdvisor(new InMemoryChatMemory()))
        .build();
    ```

    Key features:

    * Uses Claude AI model for natural language understanding
    * Integrates Brave Search through MCP for real-time web search capabilities
    * Maintains conversation memory using InMemoryChatMemory
    * Runs as an interactive command-line application

    ### Build and run

    ```bash
    ./mvnw clean install
    java -jar ./target/ai-mcp-brave-chatbot-0.0.1-SNAPSHOT.jar
    ```

    or

    ```bash
    ./mvnw spring-boot:run
    ```

    The application will start an interactive chat session where you can ask questions. The chatbot will use Brave Search when it needs to find information from the internet to answer your queries.

    The chatbot can:

    * Answer questions using its built-in knowledge
    * Perform web searches when needed using Brave Search
    * Remember context from previous messages in the conversation
    * Combine information from multiple sources to provide comprehensive answers

    ### Advanced Configuration

    The MCP client supports additional configuration options:

    * Client customization through `McpSyncClientCustomizer` or `McpAsyncClientCustomizer`
    * Multiple clients with multiple transport types: `STDIO` and `SSE` (Server-Sent Events)
    * Integration with Spring AI's tool execution framework
    * Automatic client initialization and lifecycle management

    For WebFlux-based applications, you can use the WebFlux starter instead:

    ```xml
    <dependency>
        <groupId>org.springframework.ai</groupId>
        <artifactId>spring-ai-mcp-client-webflux-spring-boot-starter</artifactId>
    </dependency>
    ```

    This provides similar functionality but uses a WebFlux-based SSE transport implementation, recommended for production deployments.
  </Tab>
</Tabs>

## Next steps

<CardGroup cols={2}>
  <Card title="Example servers" icon="grid" href="/examples">
    Check out our gallery of official MCP servers and implementations
  </Card>

  <Card title="Clients" icon="cubes" href="/clients">
    View the list of clients that support MCP integrations
  </Card>

  <Card title="Building MCP with LLMs" icon="comments" href="/building-mcp-with-llms">
    Learn how to use LLMs like Claude to speed up your MCP development
  </Card>

  <Card title="Core architecture" icon="sitemap" href="/docs/concepts/architecture">
    Understand how MCP connects clients, servers, and LLMs
  </Card>
</CardGroup>


# For Server Developers
Source: https://modelcontextprotocol.io/quickstart/server

Get started building your own server to use in Claude for Desktop and other clients.

In this tutorial, we'll build a simple MCP weather server and connect it to a host, Claude for Desktop. We'll start with a basic setup, and then progress to more complex use cases.

### What we'll be building

Many LLMs (including Claude) do not currently have the ability to fetch the forecast and severe weather alerts. Let's use MCP to solve that!

We'll build a server that exposes two tools: `get-alerts` and `get-forecast`. Then we'll connect the server to an MCP host (in this case, Claude for Desktop):

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/weather-alerts.png" />
</Frame>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/current-weather.png" />
</Frame>

<Note>
  Servers can connect to any client. We've chosen Claude for Desktop here for simplicity, but we also have guides on [building your own client](/quickstart/client) as well as a [list of other clients here](/clients).
</Note>

<Accordion title="Why Claude for Desktop and not Claude.ai?">
  Because servers are locally run, MCP currently only supports desktop hosts. Remote hosts are in active development.
</Accordion>

### Core MCP Concepts

MCP servers can provide three main types of capabilities:

1. **Resources**: File-like data that can be read by clients (like API responses or file contents)
2. **Tools**: Functions that can be called by the LLM (with user approval)
3. **Prompts**: Pre-written templates that help users accomplish specific tasks

This tutorial will primarily focus on tools.

<Tabs>
  <Tab title="Python">
    Let's get started with building our weather server! [You can find the complete code for what we'll be building here.](https://github.com/modelcontextprotocol/quickstart-resources/tree/main/weather-server-python)

    ### Prerequisite knowledge

    This quickstart assumes you have familiarity with:

    * Python
    * LLMs like Claude

    ### System requirements

    * Python 3.10 or higher installed.
    * You must use the Python MCP SDK 1.2.0 or higher.

    ### Set up your environment

    First, let's install `uv` and set up our Python project and environment:

    <CodeGroup>
      ```bash MacOS/Linux
      curl -LsSf https://astral.sh/uv/install.sh | sh
      ```

      ```powershell Windows
      powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
      ```
    </CodeGroup>

    Make sure to restart your terminal afterwards to ensure that the `uv` command gets picked up.

    Now, let's create and set up our project:

    <CodeGroup>
      ```bash MacOS/Linux
      # Create a new directory for our project
      uv init weather
      cd weather

      # Create virtual environment and activate it
      uv venv
      source .venv/bin/activate

      # Install dependencies
      uv add "mcp[cli]" httpx

      # Create our server file
      touch weather.py
      ```

      ```powershell Windows
      # Create a new directory for our project
      uv init weather
      cd weather

      # Create virtual environment and activate it
      uv venv
      .venv\Scripts\activate

      # Install dependencies
      uv add mcp[cli] httpx

      # Create our server file
      new-item weather.py
      ```
    </CodeGroup>

    Now let's dive into building your server.

    ## Building your server

    ### Importing packages and setting up the instance

    Add these to the top of your `weather.py`:

    ```python
    from typing import Any
    import httpx
    from mcp.server.fastmcp import FastMCP

    # Initialize FastMCP server
    mcp = FastMCP("weather")

    # Constants
    NWS_API_BASE = "https://api.weather.gov"
    USER_AGENT = "weather-app/1.0"
    ```

    The FastMCP class uses Python type hints and docstrings to automatically generate tool definitions, making it easy to create and maintain MCP tools.

    ### Helper functions

    Next, let's add our helper functions for querying and formatting the data from the National Weather Service API:

    ```python
    async def make_nws_request(url: str) -> dict[str, Any] | None:
        """Make a request to the NWS API with proper error handling."""
        headers = {
            "User-Agent": USER_AGENT,
            "Accept": "application/geo+json"
        }
        async with httpx.AsyncClient() as client:
            try:
                response = await client.get(url, headers=headers, timeout=30.0)
                response.raise_for_status()
                return response.json()
            except Exception:
                return None

    def format_alert(feature: dict) -> str:
        """Format an alert feature into a readable string."""
        props = feature["properties"]
        return f"""
    Event: {props.get('event', 'Unknown')}
    Area: {props.get('areaDesc', 'Unknown')}
    Severity: {props.get('severity', 'Unknown')}
    Description: {props.get('description', 'No description available')}
    Instructions: {props.get('instruction', 'No specific instructions provided')}
    """
    ```

    ### Implementing tool execution

    The tool execution handler is responsible for actually executing the logic of each tool. Let's add it:

    ```python
    @mcp.tool()
    async def get_alerts(state: str) -> str:
        """Get weather alerts for a US state.

        Args:
            state: Two-letter US state code (e.g. CA, NY)
        """
        url = f"{NWS_API_BASE}/alerts/active/area/{state}"
        data = await make_nws_request(url)

        if not data or "features" not in data:
            return "Unable to fetch alerts or no alerts found."

        if not data["features"]:
            return "No active alerts for this state."

        alerts = [format_alert(feature) for feature in data["features"]]
        return "\n---\n".join(alerts)

    @mcp.tool()
    async def get_forecast(latitude: float, longitude: float) -> str:
        """Get weather forecast for a location.

        Args:
            latitude: Latitude of the location
            longitude: Longitude of the location
        """
        # First get the forecast grid endpoint
        points_url = f"{NWS_API_BASE}/points/{latitude},{longitude}"
        points_data = await make_nws_request(points_url)

        if not points_data:
            return "Unable to fetch forecast data for this location."

        # Get the forecast URL from the points response
        forecast_url = points_data["properties"]["forecast"]
        forecast_data = await make_nws_request(forecast_url)

        if not forecast_data:
            return "Unable to fetch detailed forecast."

        # Format the periods into a readable forecast
        periods = forecast_data["properties"]["periods"]
        forecasts = []
        for period in periods[:5]:  # Only show next 5 periods
            forecast = f"""
    {period['name']}:
    Temperature: {period['temperature']}°{period['temperatureUnit']}
    Wind: {period['windSpeed']} {period['windDirection']}
    Forecast: {period['detailedForecast']}
    """
            forecasts.append(forecast)

        return "\n---\n".join(forecasts)
    ```

    ### Running the server

    Finally, let's initialize and run the server:

    ```python
    if __name__ == "__main__":
        # Initialize and run the server
        mcp.run(transport='stdio')
    ```

    Your server is complete! Run `uv run weather.py` to confirm that everything's working.

    Let's now test your server from an existing MCP host, Claude for Desktop.

    ## Testing your server with Claude for Desktop

    <Note>
      Claude for Desktop is not yet available on Linux. Linux users can proceed to the [Building a client](/quickstart/client) tutorial to build an MCP client that connects to the server we just built.
    </Note>

    First, make sure you have Claude for Desktop installed. [You can install the latest version
    here.](https://claude.ai/download) If you already have Claude for Desktop, **make sure it's updated to the latest version.**

    We'll need to configure Claude for Desktop for whichever MCP servers you want to use. To do this, open your Claude for Desktop App configuration at `~/Library/Application Support/Claude/claude_desktop_config.json` in a text editor. Make sure to create the file if it doesn't exist.

    For example, if you have [VS Code](https://code.visualstudio.com/) installed:

    <Tabs>
      <Tab title="MacOS/Linux">
        ```bash
        code ~/Library/Application\ Support/Claude/claude_desktop_config.json
        ```
      </Tab>

      <Tab title="Windows">
        ```powershell
        code $env:AppData\Claude\claude_desktop_config.json
        ```
      </Tab>
    </Tabs>

    You'll then add your servers in the `mcpServers` key. The MCP UI elements will only show up in Claude for Desktop if at least one server is properly configured.

    In this case, we'll add our single weather server like so:

    <Tabs>
      <Tab title="MacOS/Linux">
        ```json Python
        {
            "mcpServers": {
                "weather": {
                    "command": "uv",
                    "args": [
                        "--directory",
                        "/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather",
                        "run",
                        "weather.py"
                    ]
                }
            }
        }
        ```
      </Tab>

      <Tab title="Windows">
        ```json Python
        {
            "mcpServers": {
                "weather": {
                    "command": "uv",
                    "args": [
                        "--directory",
                        "C:\\ABSOLUTE\\PATH\\TO\\PARENT\\FOLDER\\weather",
                        "run",
                        "weather.py"
                    ]
                }
            }
        }
        ```
      </Tab>
    </Tabs>

    <Warning>
      You may need to put the full path to the `uv` executable in the `command` field. You can get this by running `which uv` on MacOS/Linux or `where uv` on Windows.
    </Warning>

    <Note>
      Make sure you pass in the absolute path to your server.
    </Note>

    This tells Claude for Desktop:

    1. There's an MCP server named "weather"
    2. To launch it by running `uv --directory /ABSOLUTE/PATH/TO/PARENT/FOLDER/weather run weather`

    Save the file, and restart **Claude for Desktop**.
  </Tab>

  <Tab title="Node">
    Let's get started with building our weather server! [You can find the complete code for what we'll be building here.](https://github.com/modelcontextprotocol/quickstart-resources/tree/main/weather-server-typescript)

    ### Prerequisite knowledge

    This quickstart assumes you have familiarity with:

    * TypeScript
    * LLMs like Claude

    ### System requirements

    For TypeScript, make sure you have the latest version of Node installed.

    ### Set up your environment

    First, let's install Node.js and npm if you haven't already. You can download them from [nodejs.org](https://nodejs.org/).
    Verify your Node.js installation:

    ```bash
    node --version
    npm --version
    ```

    For this tutorial, you'll need Node.js version 16 or higher.

    Now, let's create and set up our project:

    <CodeGroup>
      ```bash MacOS/Linux
      # Create a new directory for our project
      mkdir weather
      cd weather

      # Initialize a new npm project
      npm init -y

      # Install dependencies
      npm install @modelcontextprotocol/sdk zod
      npm install -D @types/node typescript

      # Create our files
      mkdir src
      touch src/index.ts
      ```

      ```powershell Windows
      # Create a new directory for our project
      md weather
      cd weather

      # Initialize a new npm project
      npm init -y

      # Install dependencies
      npm install @modelcontextprotocol/sdk zod
      npm install -D @types/node typescript

      # Create our files
      md src
      new-item src\index.ts
      ```
    </CodeGroup>

    Update your package.json to add type: "module" and a build script:

    ```json package.json
    {
      "type": "module",
      "bin": {
        "weather": "./build/index.js"
      },
      "scripts": {
        "build": "tsc && node -e \"require('fs').chmodSync('build/index.js', '755')\"",
      },
      "files": [
        "build"
      ],
    }
    ```

    Create a `tsconfig.json` in the root of your project:

    ```json tsconfig.json
    {
      "compilerOptions": {
        "target": "ES2022",
        "module": "Node16",
        "moduleResolution": "Node16",
        "outDir": "./build",
        "rootDir": "./src",
        "strict": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true
      },
      "include": ["src/**/*"],
      "exclude": ["node_modules"]
    }
    ```

    Now let's dive into building your server.

    ## Building your server

    ### Importing packages and setting up the instance

    Add these to the top of your `src/index.ts`:

    ```typescript
    import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
    import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
    import { z } from "zod";

    const NWS_API_BASE = "https://api.weather.gov";
    const USER_AGENT = "weather-app/1.0";

    // Create server instance
    const server = new McpServer({
      name: "weather",
      version: "1.0.0",
    });
    ```

    ### Helper functions

    Next, let's add our helper functions for querying and formatting the data from the National Weather Service API:

    ```typescript
    // Helper function for making NWS API requests
    async function makeNWSRequest<T>(url: string): Promise<T | null> {
      const headers = {
        "User-Agent": USER_AGENT,
        Accept: "application/geo+json",
      };

      try {
        const response = await fetch(url, { headers });
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return (await response.json()) as T;
      } catch (error) {
        console.error("Error making NWS request:", error);
        return null;
      }
    }

    interface AlertFeature {
      properties: {
        event?: string;
        areaDesc?: string;
        severity?: string;
        status?: string;
        headline?: string;
      };
    }

    // Format alert data
    function formatAlert(feature: AlertFeature): string {
      const props = feature.properties;
      return [
        `Event: ${props.event || "Unknown"}`,
        `Area: ${props.areaDesc || "Unknown"}`,
        `Severity: ${props.severity || "Unknown"}`,
        `Status: ${props.status || "Unknown"}`,
        `Headline: ${props.headline || "No headline"}`,
        "---",
      ].join("\n");
    }

    interface ForecastPeriod {
      name?: string;
      temperature?: number;
      temperatureUnit?: string;
      windSpeed?: string;
      windDirection?: string;
      shortForecast?: string;
    }

    interface AlertsResponse {
      features: AlertFeature[];
    }

    interface PointsResponse {
      properties: {
        forecast?: string;
      };
    }

    interface ForecastResponse {
      properties: {
        periods: ForecastPeriod[];
      };
    }
    ```

    ### Implementing tool execution

    The tool execution handler is responsible for actually executing the logic of each tool. Let's add it:

    ```typescript
    // Register weather tools
    server.tool(
      "get-alerts",
      "Get weather alerts for a state",
      {
        state: z.string().length(2).describe("Two-letter state code (e.g. CA, NY)"),
      },
      async ({ state }) => {
        const stateCode = state.toUpperCase();
        const alertsUrl = `${NWS_API_BASE}/alerts?area=${stateCode}`;
        const alertsData = await makeNWSRequest<AlertsResponse>(alertsUrl);

        if (!alertsData) {
          return {
            content: [
              {
                type: "text",
                text: "Failed to retrieve alerts data",
              },
            ],
          };
        }

        const features = alertsData.features || [];
        if (features.length === 0) {
          return {
            content: [
              {
                type: "text",
                text: `No active alerts for ${stateCode}`,
              },
            ],
          };
        }

        const formattedAlerts = features.map(formatAlert);
        const alertsText = `Active alerts for ${stateCode}:\n\n${formattedAlerts.join("\n")}`;

        return {
          content: [
            {
              type: "text",
              text: alertsText,
            },
          ],
        };
      },
    );

    server.tool(
      "get-forecast",
      "Get weather forecast for a location",
      {
        latitude: z.number().min(-90).max(90).describe("Latitude of the location"),
        longitude: z.number().min(-180).max(180).describe("Longitude of the location"),
      },
      async ({ latitude, longitude }) => {
        // Get grid point data
        const pointsUrl = `${NWS_API_BASE}/points/${latitude.toFixed(4)},${longitude.toFixed(4)}`;
        const pointsData = await makeNWSRequest<PointsResponse>(pointsUrl);

        if (!pointsData) {
          return {
            content: [
              {
                type: "text",
                text: `Failed to retrieve grid point data for coordinates: ${latitude}, ${longitude}. This location may not be supported by the NWS API (only US locations are supported).`,
              },
            ],
          };
        }

        const forecastUrl = pointsData.properties?.forecast;
        if (!forecastUrl) {
          return {
            content: [
              {
                type: "text",
                text: "Failed to get forecast URL from grid point data",
              },
            ],
          };
        }

        // Get forecast data
        const forecastData = await makeNWSRequest<ForecastResponse>(forecastUrl);
        if (!forecastData) {
          return {
            content: [
              {
                type: "text",
                text: "Failed to retrieve forecast data",
              },
            ],
          };
        }

        const periods = forecastData.properties?.periods || [];
        if (periods.length === 0) {
          return {
            content: [
              {
                type: "text",
                text: "No forecast periods available",
              },
            ],
          };
        }

        // Format forecast periods
        const formattedForecast = periods.map((period: ForecastPeriod) =>
          [
            `${period.name || "Unknown"}:`,
            `Temperature: ${period.temperature || "Unknown"}°${period.temperatureUnit || "F"}`,
            `Wind: ${period.windSpeed || "Unknown"} ${period.windDirection || ""}`,
            `${period.shortForecast || "No forecast available"}`,
            "---",
          ].join("\n"),
        );

        const forecastText = `Forecast for ${latitude}, ${longitude}:\n\n${formattedForecast.join("\n")}`;

        return {
          content: [
            {
              type: "text",
              text: forecastText,
            },
          ],
        };
      },
    );
    ```

    ### Running the server

    Finally, implement the main function to run the server:

    ```typescript
    async function main() {
      const transport = new StdioServerTransport();
      await server.connect(transport);
      console.error("Weather MCP Server running on stdio");
    }

    main().catch((error) => {
      console.error("Fatal error in main():", error);
      process.exit(1);
    });
    ```

    Make sure to run `npm run build` to build your server! This is a very important step in getting your server to connect.

    Let's now test your server from an existing MCP host, Claude for Desktop.

    ## Testing your server with Claude for Desktop

    <Note>
      Claude for Desktop is not yet available on Linux. Linux users can proceed to the [Building a client](/quickstart/client) tutorial to build an MCP client that connects to the server we just built.
    </Note>

    First, make sure you have Claude for Desktop installed. [You can install the latest version
    here.](https://claude.ai/download) If you already have Claude for Desktop, **make sure it's updated to the latest version.**

    We'll need to configure Claude for Desktop for whichever MCP servers you want to use. To do this, open your Claude for Desktop App configuration at `~/Library/Application Support/Claude/claude_desktop_config.json` in a text editor. Make sure to create the file if it doesn't exist.

    For example, if you have [VS Code](https://code.visualstudio.com/) installed:

    <Tabs>
      <Tab title="MacOS/Linux">
        ```bash
        code ~/Library/Application\ Support/Claude/claude_desktop_config.json
        ```
      </Tab>

      <Tab title="Windows">
        ```powershell
        code $env:AppData\Claude\claude_desktop_config.json
        ```
      </Tab>
    </Tabs>

    You'll then add your servers in the `mcpServers` key. The MCP UI elements will only show up in Claude for Desktop if at least one server is properly configured.

    In this case, we'll add our single weather server like so:

    <Tabs>
      <Tab title="MacOS/Linux">
        <CodeGroup>
          ```json Node
          {
              "mcpServers": {
                  "weather": {
                      "command": "node",
                      "args": [
                          "/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather/build/index.js"
                      ]
                  }
              }
          }
          ```
        </CodeGroup>
      </Tab>

      <Tab title="Windows">
        <CodeGroup>
          ```json Node
          {
              "mcpServers": {
                  "weather": {
                      "command": "node",
                      "args": [
                          "C:\\PATH\\TO\\PARENT\\FOLDER\\weather\\build\\index.js"
                      ]
                  }
              }
          }
          ```
        </CodeGroup>
      </Tab>
    </Tabs>

    This tells Claude for Desktop:

    1. There's an MCP server named "weather"
    2. Launch it by running `node /ABSOLUTE/PATH/TO/PARENT/FOLDER/weather/build/index.js`

    Save the file, and restart **Claude for Desktop**.
  </Tab>

  <Tab title="Java">
    <Note>
      This is a quickstart demo based on Spring AI MCP auto-configuraiton and boot starters.
      To learn how to create sync and async MCP Servers, manually, consult the [Java SDK Server](/sdk/java/mcp-server) documentation.
    </Note>

    Let's get started with building our weather server!
    [You can find the complete code for what we'll be building here.](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol/weather/starter-stdio-server)

    For more information, see the [MCP Server Boot Starter](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-server-boot-starter-docs.html) reference documentation.
    For manual MCP Server implementation, refer to the [MCP Server Java SDK documentation](/sdk/java/mcp-server).

    ### System requirements

    * Java 17 or higher installed.
    * [Spring Boot 3.3.x](https://docs.spring.io/spring-boot/installing.html) or higher

    ### Set up your environment

    Use the [Spring Initizer](https://start.spring.io/) to bootstrat the project.

    You will need to add the following dependencies:

    <Tabs>
      <Tab title="Maven">
        ```xml
        <dependencies>
              <dependency>
                  <groupId>org.springframework.ai</groupId>
                  <artifactId>spring-ai-mcp-server-spring-boot-starter</artifactId>
              </dependency>

              <dependency>
                  <groupId>org.springframework</groupId>
                  <artifactId>spring-web</artifactId>
              </dependency>
        </dependencies>
        ```
      </Tab>

      <Tab title="Gradle">
        ```groovy
        dependencies {
          implementation platform("org.springframework.ai:spring-ai-mcp-server-spring-boot-starter")
          implementation platform("org.springframework:spring-web")
        }
        ```
      </Tab>
    </Tabs>

    Then configure your application by setting the applicaiton properties:

    <CodeGroup>
      ```bash application.properties
      spring.main.bannerMode=off
      logging.pattern.console=
      ```

      ```yaml application.yml
      logging:
        pattern:
          console:
      spring:
        main:
          banner-mode: off
      ```
    </CodeGroup>

    The [Server Configuration Properties](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-server-boot-starter-docs.html#_configuration_properties) documents all available properties.

    Now let's dive into building your server.

    ## Building your server

    ### Weather Service

    Let's implement a [WeatheService.java](https://github.com/spring-projects/spring-ai-examples/blob/main/model-context-protocol/weather/starter-stdio-server/src/main/java/org/springframework/ai/mcp/sample/server/WeatherService.java) that uses a REST client to query the data from the National Weather Service API:

    ```java
    @Service
    public class WeatherService {

    	private final RestClient restClient;

    	public WeatherService() {
    		this.restClient = RestClient.builder()
    			.baseUrl("https://api.weather.gov")
    			.defaultHeader("Accept", "application/geo+json")
    			.defaultHeader("User-Agent", "WeatherApiClient/1.0 (your@email.com)")
    			.build();
    	}

      @Tool(description = "Get weather forecast for a specific latitude/longitude")
      public String getWeatherForecastByLocation(
          double latitude,   // Latitude coordinate
          double longitude   // Longitude coordinate
      ) {
          // Returns detailed forecast including:
          // - Temperature and unit
          // - Wind speed and direction
          // - Detailed forecast description
      }

      @Tool(description = "Get weather alerts for a US state")
      public String getAlerts(
          @ToolParam(description = "Two-letter US state code (e.g. CA, NY") String state)
      ) {
          // Returns active alerts including:
          // - Event type
          // - Affected area
          // - Severity
          // - Description
          // - Safety instructions
      }

      // ......
    }
    ```

    The `@Service` annotation with auto-register the service in your applicaiton context.
    The Spring AI `@Tool` annotation, making it easy to create and maintain MCP tools.

    The auto-configuration will automatically register these tools with the MCP server.

    ### Create your Boot Applicaiton

    ```java
    @SpringBootApplication
    public class McpServerApplication {

    	public static void main(String[] args) {
    		SpringApplication.run(McpServerApplication.class, args);
    	}

    	@Bean
    	public ToolCallbackProvider weatherTools(WeatherService weatherService) {
    		return  MethodToolCallbackProvider.builder().toolObjects(weatherService).build();
    	}
    }
    ```

    Uses the the `MethodToolCallbackProvider` utils to convert the `@Tools` into actionalble callbackes used by the MCP server.

    ### Running the server

    Finally, let's build the server:

    ```bash
    ./mvnw clean install
    ```

    This will generate a `mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar` file within the `target` folder.

    Let's now test your server from an existing MCP host, Claude for Desktop.

    ## Testing your server with Claude for Desktop

    <Note>
      Claude for Desktop is not yet available on Linux.
    </Note>

    First, make sure you have Claude for Desktop installed.
    [You can install the latest version here.](https://claude.ai/download) If you already have Claude for Desktop, **make sure it's updated to the latest version.**

    We'll need to configure Claude for Desktop for whichever MCP servers you want to use.
    To do this, open your Claude for Desktop App configuration at `~/Library/Application Support/Claude/claude_desktop_config.json` in a text editor.
    Make sure to create the file if it doesn't exist.

    For example, if you have [VS Code](https://code.visualstudio.com/) installed:

    <Tabs>
      <Tab title="MacOS/Linux">
        ```bash
        code ~/Library/Application\ Support/Claude/claude_desktop_config.json
        ```
      </Tab>

      <Tab title="Windows">
        ```powershell
        code $env:AppData\Claude\claude_desktop_config.json
        ```
      </Tab>
    </Tabs>

    You'll then add your servers in the `mcpServers` key.
    The MCP UI elements will only show up in Claude for Desktop if at least one server is properly configured.

    In this case, we'll add our single weather server like so:

    <Tabs>
      <Tab title="MacOS/Linux">
        ```json java
        {
          "mcpServers": {
            "spring-ai-mcp-weather": {
              "command": "java",
              "args": [
                "-Dspring.ai.mcp.server.stdio=true",
                "-jar",
                "/ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar"
              ]
            }
          }
        }
        ```
      </Tab>

      <Tab title="Windows">
        ```json java
        {
          "mcpServers": {
            "spring-ai-mcp-weather": {
              "command": "java",
              "args": [
                "-Dspring.ai.mcp.server.transport=STDIO",
                "-jar",
                "C:\\ABSOLUTE\\PATH\\TO\\PARENT\\FOLDER\\weather\\mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar"
              ]
            }
          }
        }
        ```
      </Tab>
    </Tabs>

    <Note>
      Make sure you pass in the absolute path to your server.
    </Note>

    This tells Claude for Desktop:

    1. There's an MCP server named "my-weather-server"
    2. To launch it by running `java -jar /ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar`

    Save the file, and restart **Claude for Desktop**.

    ## Testing your server with Java client

    ### Create a MCP Client manually

    Use the `McpClient` to connect to the server:

    ```java
    var stdioParams = ServerParameters.builder("java")
      .args("-jar", "/ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar")
      .build();

    var stdioTransport = new StdioClientTransport(stdioParams);

    var mcpClient = McpClient.sync(stdioTransport).build();

    mcpClient.initialize();

    ListToolsResult toolsList = mcpClient.listTools();

    CallToolResult weather = mcpClient.callTool(
      new CallToolRequest("getWeatherForecastByLocation",
          Map.of("latitude", "47.6062", "longitude", "-122.3321")));

    CallToolResult alert = mcpClient.callTool(
      new CallToolRequest("getAlerts", Map.of("state", "NY")));

    mcpClient.closeGracefully();
    ```

    ### Use MCP Client Boot Starter

    Create a new boot starter applicaiton using the `spring-ai-mcp-client-spring-boot-starter` dependency:

    ```xml
    <dependency>
        <groupId>org.springframework.ai</groupId>
        <artifactId>spring-ai-mcp-client-spring-boot-starter</artifactId>
    </dependency>
    ```

    and set the `spring.ai.mcp.client.stdio.servers-configuration` property to point to your `claude_desktop_config.json`.
    You can re-use the existing Anthropic Destop configuration:

    ```properties
    spring.ai.mcp.client.stdio.servers-configuration=file:PATH/TO/claude_desktop_config.json
    ```

    When you stasrt your client applicaiton, the auto-configuration will create, automatically MCP clients from the claude\_desktop\_config.json.

    For more information, see the [MCP Client Boot Starters](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-server-boot-client-docs.html) reference documentation.

    ## More Java MCP Server examples

    The [starter-webflux-server](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol/weather/starter-webflux-server) demonstrates how to create a MCP server using SSE transport.
    It showcases how to define and register MCP Tools, Resources, and Prompts, using the Spring Boot's auto-configuration capabilities.
  </Tab>
</Tabs>

### Test with commands

Let's make sure Claude for Desktop is picking up the two tools we've exposed in our `weather` server. You can do this by looking for the hammer <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/claude-desktop-mcp-hammer-icon.svg" style={{display: 'inline', margin: 0, height: '1.3em'}} /> icon:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/visual-indicator-mcp-tools.png" />
</Frame>

After clicking on the hammer icon, you should see two tools listed:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/available-mcp-tools.png" />
</Frame>

If your server isn't being picked up by Claude for Desktop, proceed to the [Troubleshooting](#troubleshooting) section for debugging tips.

If the hammer icon has shown up, you can now test your server by running the following commands in Claude for Desktop:

* What's the weather in Sacramento?
* What are the active weather alerts in Texas?

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/current-weather.png" />
</Frame>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/weather-alerts.png" />
</Frame>

<Note>
  Since this is the US National Weather service, the queries will only work for US locations.
</Note>

## What's happening under the hood

When you ask a question:

1. The client sends your question to Claude
2. Claude analyzes the available tools and decides which one(s) to use
3. The client executes the chosen tool(s) through the MCP server
4. The results are sent back to Claude
5. Claude formulates a natural language response
6. The response is displayed to you!

## Troubleshooting

<AccordionGroup>
  <Accordion title="Claude for Desktop Integration Issues">
    **Getting logs from Claude for Desktop**

    Claude.app logging related to MCP is written to log files in `~/Library/Logs/Claude`:

    * `mcp.log` will contain general logging about MCP connections and connection failures.
    * Files named `mcp-server-SERVERNAME.log` will contain error (stderr) logging from the named server.

    You can run the following command to list recent logs and follow along with any new ones:

    ```bash
    # Check Claude's logs for errors
    tail -n 20 -f ~/Library/Logs/Claude/mcp*.log
    ```

    **Server not showing up in Claude**

    1. Check your `claude_desktop_config.json` file syntax
    2. Make sure the path to your project is absolute and not relative
    3. Restart Claude for Desktop completely

    **Tool calls failing silently**

    If Claude attempts to use the tools but they fail:

    1. Check Claude's logs for errors
    2. Verify your server builds and runs without errors
    3. Try restarting Claude for Desktop

    **None of this is working. What do I do?**

    Please refer to our [debugging guide](/docs/tools/debugging) for better debugging tools and more detailed guidance.
  </Accordion>

  <Accordion title="Weather API Issues">
    **Error: Failed to retrieve grid point data**

    This usually means either:

    1. The coordinates are outside the US
    2. The NWS API is having issues
    3. You're being rate limited

    Fix:

    * Verify you're using US coordinates
    * Add a small delay between requests
    * Check the NWS API status page

    **Error: No active alerts for \[STATE]**

    This isn't an error - it just means there are no current weather alerts for that state. Try a different state or check during severe weather.
  </Accordion>
</AccordionGroup>

<Note>
  For more advanced troubleshooting, check out our guide on [Debugging MCP](/docs/tools/debugging)
</Note>

## Next steps

<CardGroup cols={2}>
  <Card title="Building a client" icon="outlet" href="/quickstart/client">
    Learn how to build your own MCP client that can connect to your server
  </Card>

  <Card title="Example servers" icon="grid" href="/examples">
    Check out our gallery of official MCP servers and implementations
  </Card>

  <Card title="Debugging Guide" icon="bug" href="/docs/tools/debugging">
    Learn how to effectively debug MCP servers and integrations
  </Card>

  <Card title="Building MCP with LLMs" icon="comments" href="/building-mcp-with-llms">
    Learn how to use LLMs like Claude to speed up your MCP development
  </Card>
</CardGroup>


# For Claude Desktop Users
Source: https://modelcontextprotocol.io/quickstart/user

Get started using pre-built servers in Claude for Desktop.

In this tutorial, you will extend [Claude for Desktop](https://claude.ai/download) so that it can read from your computer's file system, write new files, move files, and even search files.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/quickstart-filesystem.png" />
</Frame>

Don't worry — it will ask you for your permission before executing these actions!

## 1. Download Claude for Desktop

Start by downloading [Claude for Desktop](https://claude.ai/download), choosing either macOS or Windows. (Linux is not yet supported for Claude for Desktop.)

Follow the installation instructions.

If you already have Claude for Desktop, make sure it's on the latest version by clicking on the Claude menu on your computer and selecting "Check for Updates..."

<Accordion title="Why Claude for Desktop and not Claude.ai?">
  Because servers are locally run, MCP currently only supports desktop hosts. Remote hosts are in active development.
</Accordion>

## 2. Add the Filesystem MCP Server

To add this filesystem functionality, we will be installing a pre-built [Filesystem MCP Server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem) to Claude for Desktop. This is one of dozens of [servers](https://github.com/modelcontextprotocol/servers/tree/main) created by Anthropic and the community.

Get started by opening up the Claude menu on your computer and select "Settings..." Please note that these are not the Claude Account Settings found in the app window itself.

This is what it should look like on a Mac:

<Frame style={{ textAlign: 'center' }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/quickstart-menu.png" width="400" />
</Frame>

Click on "Developer" in the lefthand bar of the Settings pane, and then click on "Edit Config":

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/quickstart-developer.png" />
</Frame>

This will create a configuration file at:

* macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`
* Windows: `%APPDATA%\Claude\claude_desktop_config.json`

if you don't already have one, and will display the file in your file system.

Open up the configuration file in any text editor. Replace the file contents with this:

<Tabs>
  <Tab title="MacOS/Linux">
    ```json
    {
      "mcpServers": {
        "filesystem": {
          "command": "npx",
          "args": [
            "-y",
            "@modelcontextprotocol/server-filesystem",
            "/Users/username/Desktop",
            "/Users/username/Downloads"
          ]
        }
      }
    }
    ```
  </Tab>

  <Tab title="Windows">
    ```json
    {
      "mcpServers": {
        "filesystem": {
          "command": "npx",
          "args": [
            "-y",
            "@modelcontextprotocol/server-filesystem",
            "C:\\Users\\username\\Desktop",
            "C:\\Users\\username\\Downloads"
          ]
        }
      }
    }
    ```
  </Tab>
</Tabs>

Make sure to replace `username` with your computer's username. The paths should point to valid directories that you want Claude to be able to access and modify. It's set up to work for Desktop and Downloads, but you can add more paths as well.

You will also need [Node.js](https://nodejs.org) on your computer for this to run properly. To verify you have Node installed, open the command line on your computer.

* On macOS, open the Terminal from your Applications folder
* On Windows, press Windows + R, type "cmd", and press Enter

Once in the command line, verify you have Node installed by entering in the following command:

```bash
node --version
```

If you get an error saying "command not found" or "node is not recognized", download Node from [nodejs.org](https://nodejs.org/).

<Tip>
  **How does the configuration file work?**

  This configuration file tells Claude for Desktop which MCP servers to start up every time you start the application. In this case, we have added one server called "filesystem" that will use the Node `npx` command to install and run `@modelcontextprotocol/server-filesystem`. This server, described [here](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem), will let you access your file system in Claude for Desktop.
</Tip>

<Warning>
  **Command Privileges**

  Claude for Desktop will run the commands in the configuration file with the permissions of your user account, and access to your local files. Only add commands if you understand and trust the source.
</Warning>

## 3. Restart Claude

After updating your configuration file, you need to restart Claude for Desktop.

Upon restarting, you should see a hammer <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/claude-desktop-mcp-hammer-icon.svg" style={{display: 'inline', margin: 0, height: '1.3em'}} /> icon in the bottom right corner of the input box:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/quickstart-hammer.png" />
</Frame>

After clicking on the hammer icon, you should see the tools that come with the Filesystem MCP Server:

<Frame style={{ textAlign: 'center' }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/quickstart-tools.png" width="400" />
</Frame>

If your server isn't being picked up by Claude for Desktop, proceed to the [Troubleshooting](#troubleshooting) section for debugging tips.

## 4. Try it out!

You can now talk to Claude and ask it about your filesystem. It should know when to call the relevant tools.

Things you might try asking Claude:

* Can you write a poem and save it to my desktop?
* What are some work-related files in my downloads folder?
* Can you take all the images on my desktop and move them to a new folder called "Images"?

As needed, Claude will call the relevant tools and seek your approval before taking an action:

<Frame style={{ textAlign: 'center' }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/quickstart-approve.png" width="500" />
</Frame>

## Troubleshooting

<AccordionGroup>
  <Accordion title="Server not showing up in Claude / hammer icon missing">
    1. Restart Claude for Desktop completely
    2. Check your `claude_desktop_config.json` file syntax
    3. Make sure the file paths included in `claude_desktop_config.json` are valid and that they are absolute and not relative
    4. Look at [logs](#getting-logs-from-claude-for-desktop) to see why the server is not connecting
    5. In your command line, try manually running the server (replacing `username` as you did in `claude_desktop_config.json`) to see if you get any errors:

    <Tabs>
      <Tab title="MacOS/Linux">
        ```bash
        npx -y @modelcontextprotocol/server-filesystem /Users/username/Desktop /Users/username/Downloads
        ```
      </Tab>

      <Tab title="Windows">
        ```bash
        npx -y @modelcontextprotocol/server-filesystem C:\Users\username\Desktop C:\Users\username\Downloads
        ```
      </Tab>
    </Tabs>
  </Accordion>

  <Accordion title="Getting logs from Claude for Desktop">
    Claude.app logging related to MCP is written to log files in:

    * macOS: `~/Library/Logs/Claude`

    * Windows: `%APPDATA%\Claude\logs`

    * `mcp.log` will contain general logging about MCP connections and connection failures.

    * Files named `mcp-server-SERVERNAME.log` will contain error (stderr) logging from the named server.

    You can run the following command to list recent logs and follow along with any new ones (on Windows, it will only show recent logs):

    <Tabs>
      <Tab title="MacOS/Linux">
        ```bash
        # Check Claude's logs for errors
        tail -n 20 -f ~/Library/Logs/Claude/mcp*.log
        ```
      </Tab>

      <Tab title="Windows">
        ```bash
        type "%APPDATA%\Claude\logs\mcp*.log"
        ```
      </Tab>
    </Tabs>
  </Accordion>

  <Accordion title="Tool calls failing silently">
    If Claude attempts to use the tools but they fail:

    1. Check Claude's logs for errors
    2. Verify your server builds and runs without errors
    3. Try restarting Claude for Desktop
  </Accordion>

  <Accordion title="None of this is working. What do I do?">
    Please refer to our [debugging guide](/docs/tools/debugging) for better debugging tools and more detailed guidance.
  </Accordion>

  <Accordion title="ENOENT error and `${APPDATA}` in paths on Windows">
    If your configured server fails to load, and you see within its logs an error referring to `${APPDATA}` within a path, you may need to add the expanded value of `%APPDATA%` to your `env` key in `claude_desktop_config.json`:

    ```json
    {
      "brave-search": {
        "command": "npx",
        "args": ["-y", "@modelcontextprotocol/server-brave-search"],
        "env": {
          "APPDATA": "C:\\Users\\user\\AppData\\Roaming\\",
          "BRAVE_API_KEY": "..."
        }
      }
    }
    ```

    With this change in place, launch Claude Desktop once again.

    <Warning>
      **NPM should be installed globally**

      The `npx` command may continue to fail if you have not installed NPM globally. If NPM is already installed globally, you will find `%APPDATA%\npm` exists on your system. If not, you can install NPM globally by running the following command:

      ```bash
      npm install -g npm
      ```
    </Warning>
  </Accordion>
</AccordionGroup>

## Next steps

<CardGroup cols={2}>
  <Card title="Explore other servers" icon="grid" href="/examples">
    Check out our gallery of official MCP servers and implementations
  </Card>

  <Card title="Build your own server" icon="code" href="/quickstart/server">
    Now build your own custom server to use in Claude for Desktop and other clients
  </Card>
</CardGroup>


# MCP Client
Source: https://modelcontextprotocol.io/sdk/java/mcp-client

Learn how to use the Model Context Protocol (MCP) client to interact with MCP servers

# Model Context Protocol Client

The MCP Client is a key component in the Model Context Protocol (MCP) architecture, responsible for establishing and managing connections with MCP servers. It implements the client-side of the protocol, handling:

* Protocol version negotiation to ensure compatibility with servers
* Capability negotiation to determine available features
* Message transport and JSON-RPC communication
* Tool discovery and execution
* Resource access and management
* Prompt system interactions
* Optional features like roots management and sampling support

The client provides both synchronous and asynchronous APIs for flexibility in different application contexts.

<Tabs>
  <Tab title="Sync API">
    ```java
    // Create a sync client with custom configuration
    McpSyncClient client = McpClient.sync(transport)
        .requestTimeout(Duration.ofSeconds(10))
        .capabilities(ClientCapabilities.builder()
            .roots(true)      // Enable roots capability
            .sampling()       // Enable sampling capability
            .build())
        .sampling(request -> new CreateMessageResult(response))
        .build();

    // Initialize connection
    client.initialize();

    // List available tools
    ListToolsResult tools = client.listTools();

    // Call a tool
    CallToolResult result = client.callTool(
        new CallToolRequest("calculator",
            Map.of("operation", "add", "a", 2, "b", 3))
    );

    // List and read resources
    ListResourcesResult resources = client.listResources();
    ReadResourceResult resource = client.readResource(
        new ReadResourceRequest("resource://uri")
    );

    // List and use prompts
    ListPromptsResult prompts = client.listPrompts();
    GetPromptResult prompt = client.getPrompt(
        new GetPromptRequest("greeting", Map.of("name", "Spring"))
    );

    // Add/remove roots
    client.addRoot(new Root("file:///path", "description"));
    client.removeRoot("file:///path");

    // Close client
    client.closeGracefully();
    ```
  </Tab>

  <Tab title="Async API">
    ```java
    // Create an async client with custom configuration
    McpAsyncClient client = McpClient.async(transport)
        .requestTimeout(Duration.ofSeconds(10))
        .capabilities(ClientCapabilities.builder()
            .roots(true)      // Enable roots capability
            .sampling()       // Enable sampling capability
            .build())
        .sampling(request -> Mono.just(new CreateMessageResult(response)))
        .toolsChangeConsumer(tools -> Mono.fromRunnable(() -> {
            logger.info("Tools updated: {}", tools);
        }))
        .resourcesChangeConsumer(resources -> Mono.fromRunnable(() -> {
            logger.info("Resources updated: {}", resources);
        }))
        .promptsChangeConsumer(prompts -> Mono.fromRunnable(() -> {
            logger.info("Prompts updated: {}", prompts);
        }))
        .build();

    // Initialize connection and use features
    client.initialize()
        .flatMap(initResult -> client.listTools())
        .flatMap(tools -> {
            return client.callTool(new CallToolRequest(
                "calculator",
                Map.of("operation", "add", "a", 2, "b", 3)
            ));
        })
        .flatMap(result -> {
            return client.listResources()
                .flatMap(resources ->
                    client.readResource(new ReadResourceRequest("resource://uri"))
                );
        })
        .flatMap(resource -> {
            return client.listPrompts()
                .flatMap(prompts ->
                    client.getPrompt(new GetPromptRequest(
                        "greeting",
                        Map.of("name", "Spring")
                    ))
                );
        })
        .flatMap(prompt -> {
            return client.addRoot(new Root("file:///path", "description"))
                .then(client.removeRoot("file:///path"));
        })
        .doFinally(signalType -> {
            client.closeGracefully().subscribe();
        })
        .subscribe();
    ```
  </Tab>
</Tabs>

## Client Transport

The transport layer handles the communication between MCP clients and servers, providing different implementations for various use cases. The client transport manages message serialization, connection establishment, and protocol-specific communication patterns.

<Tabs>
  <Tab title="STDIO">
    Creates transport for in-process based communication

    ```java
    ServerParameters params = ServerParameters.builder("npx")
        .args("-y", "@modelcontextprotocol/server-everything", "dir")
        .build();
    McpTransport transport = new StdioClientTransport(params);
    ```
  </Tab>

  <Tab title="SSE (HttpClient)">
    Creates a framework agnostic (pure Java API) SSE client transport. Included in the core mcp module.

    ```java
    McpTransport transport = new HttpClientSseClientTransport("http://your-mcp-server");
    ```
  </Tab>

  <Tab title="SSE (WebFlux)">
    Creates WebFlux-based SSE client transport. Requires the mcp-webflux-sse-transport dependency.

    ```java
    WebClient.Builder webClientBuilder = WebClient.builder()
        .baseUrl("http://your-mcp-server");
    McpTransport transport = new WebFluxSseClientTransport(webClientBuilder);
    ```
  </Tab>
</Tabs>

## Client Capabilities

The client can be configured with various capabilities:

```java
var capabilities = ClientCapabilities.builder()
    .roots(true)      // Enable filesystem roots support with list changes notifications
    .sampling()       // Enable LLM sampling support
    .build();
```

### Roots Support

Roots define the boundaries of where servers can operate within the filesystem:

```java
// Add a root dynamically
client.addRoot(new Root("file:///path", "description"));

// Remove a root
client.removeRoot("file:///path");

// Notify server of roots changes
client.rootsListChangedNotification();
```

The roots capability allows servers to:

* Request the list of accessible filesystem roots
* Receive notifications when the roots list changes
* Understand which directories and files they have access to

### Sampling Support

Sampling enables servers to request LLM interactions ("completions" or "generations") through the client:

```java
// Configure sampling handler
Function<CreateMessageRequest, CreateMessageResult> samplingHandler = request -> {
    // Sampling implementation that interfaces with LLM
    return new CreateMessageResult(response);
};

// Create client with sampling support
var client = McpClient.sync(transport)
    .capabilities(ClientCapabilities.builder()
        .sampling()
        .build())
    .sampling(samplingHandler)
    .build();
```

This capability allows:

* Servers to leverage AI capabilities without requiring API keys
* Clients to maintain control over model access and permissions
* Support for both text and image-based interactions
* Optional inclusion of MCP server context in prompts

## Using MCP Clients

### Tool Execution

Tools are server-side functions that clients can discover and execute. The MCP client provides methods to list available tools and execute them with specific parameters. Each tool has a unique name and accepts a map of parameters.

<Tabs>
  <Tab title="Sync API">
    ```java
    // List available tools and their names
    var tools = client.listTools();
    tools.forEach(tool -> System.out.println(tool.getName()));

    // Execute a tool with parameters
    var result = client.callTool("calculator", Map.of(
        "operation", "add",
        "a", 1,
        "b", 2
    ));
    ```
  </Tab>

  <Tab title="Async API">
    ```java
    // List available tools asynchronously
    client.listTools()
        .doOnNext(tools -> tools.forEach(tool ->
            System.out.println(tool.getName())))
        .subscribe();

    // Execute a tool asynchronously
    client.callTool("calculator", Map.of(
            "operation", "add",
            "a", 1,
            "b", 2
        ))
        .subscribe();
    ```
  </Tab>
</Tabs>

### Resource Access

Resources represent server-side data sources that clients can access using URI templates. The MCP client provides methods to discover available resources and retrieve their contents through a standardized interface.

<Tabs>
  <Tab title="Sync API">
    ```java
    // List available resources and their names
    var resources = client.listResources();
    resources.forEach(resource -> System.out.println(resource.getName()));

    // Retrieve resource content using a URI template
    var content = client.getResource("file", Map.of(
        "path", "/path/to/file.txt"
    ));
    ```
  </Tab>

  <Tab title="Async API">
    ```java
    // List available resources asynchronously
    client.listResources()
        .doOnNext(resources -> resources.forEach(resource ->
            System.out.println(resource.getName())))
        .subscribe();

    // Retrieve resource content asynchronously
    client.getResource("file", Map.of(
            "path", "/path/to/file.txt"
        ))
        .subscribe();
    ```
  </Tab>
</Tabs>

### Prompt System

The prompt system enables interaction with server-side prompt templates. These templates can be discovered and executed with custom parameters, allowing for dynamic text generation based on predefined patterns.

<Tabs>
  <Tab title="Sync API">
    ```java
    // List available prompt templates
    var prompts = client.listPrompts();
    prompts.forEach(prompt -> System.out.println(prompt.getName()));

    // Execute a prompt template with parameters
    var response = client.executePrompt("echo", Map.of(
        "text", "Hello, World!"
    ));
    ```
  </Tab>

  <Tab title="Async API">
    ```java
    // List available prompt templates asynchronously
    client.listPrompts()
        .doOnNext(prompts -> prompts.forEach(prompt ->
            System.out.println(prompt.getName())))
        .subscribe();

    // Execute a prompt template asynchronously
    client.executePrompt("echo", Map.of(
            "text", "Hello, World!"
        ))
        .subscribe();
    ```
  </Tab>
</Tabs>


# Overview
Source: https://modelcontextprotocol.io/sdk/java/mcp-overview

Introduction to the Model Context Protocol (MCP) Java SDK

Java SDK for the [Model Context Protocol](https://modelcontextprotocol.org/docs/concepts/architecture)
enables standardized integration between AI models and tools.

## Features

* MCP Client and MCP Server implementations supporting:
  * Protocol [version compatibility negotiation](https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/lifecycle/#initialization)
  * [Tool](https://spec.modelcontextprotocol.io/specification/2024-11-05/server/tools/) discovery, execution, list change notifications
  * [Resource](https://spec.modelcontextprotocol.io/specification/2024-11-05/server/resources/) management with URI templates
  * [Roots](https://spec.modelcontextprotocol.io/specification/2024-11-05/client/roots/) list management and notifications
  * [Prompt](https://spec.modelcontextprotocol.io/specification/2024-11-05/server/prompts/) handling and management
  * [Sampling](https://spec.modelcontextprotocol.io/specification/2024-11-05/client/sampling/) support for AI model interactions
* Multiple transport implementations:
  * Default transports:
    * Stdio-based transport for process-based communication
    * Java HttpClient-based SSE client transport for HTTP SSE Client-side streaming
    * Servlet-based SSE server transport for HTTP SSE Server streaming
  * Spring-based transports:
    * WebFlux SSE client and server transports for reactive HTTP streaming
    * WebMVC SSE transport for servlet-based HTTP streaming
* Supports Synchronous and Asynchronous programming paradigms

## Architecture

The SDK follows a layered architecture with clear separation of concerns:

![MCP Stack Architecture](https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/java/mcp-stack.svg)

* **Client/Server Layer (McpClient/McpServer)**: Both use McpSession for sync/async operations,
  with McpClient handling client-side protocol operations and McpServer managing server-side protocol operations.
* **Session Layer (McpSession)**: Manages communication patterns and state using DefaultMcpSession implementation.
* **Transport Layer (McpTransport)**: Handles JSON-RPC message serialization/deserialization via:
  * StdioTransport (stdin/stdout) in the core module
  * HTTP SSE transports in dedicated transport modules (Java HttpClient, Spring WebFlux, Spring WebMVC)

The MCP Client is a key component in the Model Context Protocol (MCP) architecture, responsible for establishing and managing connections with MCP servers.
It implements the client-side of the protocol.

![Java MCP Client Architecture](https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/java/java-mcp-client-architecture.jpg)

The MCP Server is a foundational component in the Model Context Protocol (MCP) architecture that provides tools, resources, and capabilities to clients.
It implements the server-side of the protocol.

![Java MCP Server Architecture](https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/java/java-mcp-server-architecture.jpg)

Key Interactions:

* **Client/Server Initialization**: Transport setup, protocol compatibility check, capability negotiation, and implementation details exchange.
* **Message Flow**: JSON-RPC message handling with validation, type-safe response processing, and error handling.
* **Resource Management**: Resource discovery, URI template-based access, subscription system, and content retrieval.

## Dependencies

Add the following Maven dependency to your project:

<Tabs>
  <Tab title="Maven">
    The core MCP functionality:

    ```xml
    <dependency>
        <groupId>io.modelcontextprotocol.sdk</groupId>
        <artifactId>mcp</artifactId>
    </dependency>
    ```

    For HTTP SSE transport implementations, add one of the following dependencies:

    ```xml
    <!-- Spring WebFlux-based SSE client and server transport -->
    <dependency>
        <groupId>io.modelcontextprotocol.sdk</groupId>
        <artifactId>mcp-spring-webflux</artifactId>
    </dependency>

    <!-- Spring WebMVC-based SSE server transport -->
    <dependency>
        <groupId>io.modelcontextprotocol.sdk</groupId>
        <artifactId>mcp-spring-webmvc</artifactId>
    </dependency>
    ```
  </Tab>

  <Tab title="Gradle">
    The core MCP functionality:

    ```groovy
    dependencies {
      implementation platform("io.modelcontextprotocol.sdk:mcp")
      //...
    }
    ```

    For HTTP SSE transport implementations, add one of the following dependencies:

    ```groovy
    // Spring WebFlux-based SSE client and server transport
    dependencies {
      implementation platform("io.modelcontextprotocol.sdk:mcp-spring-webflux")
    }

    // Spring WebMVC-based SSE server transport
    dependencies {
      implementation platform("io.modelcontextprotocol.sdk:mcp-spring-webmvc")
    }
    ```
  </Tab>
</Tabs>

### Bill of Materials (BOM)

The Bill of Materials (BOM) declares the recommended versions of all the dependencies used by a given release.
Using the BOM from your application's build script avoids the need for you to specify and maintain the dependency versions yourself.
Instead, the version of the BOM you're using determines the utilized dependency versions.
It also ensures that you're using supported and tested versions of the dependencies by default, unless you choose to override them.

Add the BOM to your project:

<Tabs>
  <Tab title="Maven">
    ```xml
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>io.modelcontextprotocol.sdk</groupId>
                <artifactId>mcp-bom</artifactId>
                <version>0.7.0</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    ```
  </Tab>

  <Tab title="Gradle">
    ```groovy
    dependencies {
      implementation platform("io.modelcontextprotocol.sdk:mcp-bom:0.7.0")
      //...
    }
    ```

    Gradle users can also use the Spring AI MCP BOM by leveraging Gradle (5.0+) native support for declaring dependency constraints using a Maven BOM.
    This is implemented by adding a 'platform' dependency handler method to the dependencies section of your Gradle build script.
    As shown in the snippet above this can then be followed by version-less declarations of the Starter Dependencies for the one or more spring-ai modules you wish to use, e.g. spring-ai-openai.
  </Tab>
</Tabs>

Replace the version number with the version of the BOM you want to use.

### Available Dependencies

The following dependencies are available and managed by the BOM:

* Core Dependencies
  * `io.modelcontextprotocol.sdk:mcp` - Core MCP library providing the base functionality and APIs for Model Context Protocol implementation.
* Transport Dependencies
  * `io.modelcontextprotocol.sdk:mcp-spring-webflux` - WebFlux-based Server-Sent Events (SSE) transport implementation for reactive applications.
  * `io.modelcontextprotocol.sdk:mcp-spring-webmvc` - WebMVC-based Server-Sent Events (SSE) transport implementation for servlet-based applications.
* Testing Dependencies
  * `io.modelcontextprotocol.sdk:mcp-test` - Testing utilities and support for MCP-based applications.


# MCP Server
Source: https://modelcontextprotocol.io/sdk/java/mcp-server

Learn how to implement and configure a Model Context Protocol (MCP) server

## Overview

The MCP Server is a foundational component in the Model Context Protocol (MCP) architecture that provides tools, resources, and capabilities to clients. It implements the server-side of the protocol, responsible for:

* Exposing tools that clients can discover and execute
* Managing resources with URI-based access patterns
* Providing prompt templates and handling prompt requests
* Supporting capability negotiation with clients
* Implementing server-side protocol operations
* Managing concurrent client connections
* Providing structured logging and notifications

The server supports both synchronous and asynchronous APIs, allowing for flexible integration in different application contexts.

<Tabs>
  <Tab title="Sync API">
    ```java
    // Create a server with custom configuration
    McpSyncServer syncServer = McpServer.sync(transport)
        .serverInfo("my-server", "1.0.0")
        .capabilities(ServerCapabilities.builder()
            .resources(true)     // Enable resource support
            .tools(true)         // Enable tool support
            .prompts(true)       // Enable prompt support
            .logging()           // Enable logging support
            .build())
        .build();

    // Initialize the server
    syncServer.initialize();

    // Register tools, resources, and prompts
    syncServer.addTool(syncToolRegistration);
    syncServer.addResource(syncResourceRegistration);
    syncServer.addPrompt(syncPromptRegistration);

    // Send logging notifications
    syncServer.loggingNotification(LoggingMessageNotification.builder()
        .level(LoggingLevel.INFO)
        .logger("custom-logger")
        .data("Server initialized")
        .build());

    // Close the server when done
    syncServer.close();
    ```
  </Tab>

  <Tab title="Async API">
    ```java
    // Create an async server with custom configuration
    McpAsyncServer asyncServer = McpServer.async(transport)
        .serverInfo("my-server", "1.0.0")
        .capabilities(ServerCapabilities.builder()
            .resources(true)     // Enable resource support
            .tools(true)         // Enable tool support
            .prompts(true)       // Enable prompt support
            .logging()           // Enable logging support
            .build())
        .build();

    // Initialize the server
    asyncServer.initialize()
        .doOnSuccess(v -> logger.info("Server initialized"))
        .subscribe();

    // Register tools, resources, and prompts
    asyncServer.addTool(asyncToolRegistration)
        .doOnSuccess(v -> logger.info("Tool registered"))
        .subscribe();

    asyncServer.addResource(asyncResourceRegistration)
        .doOnSuccess(v -> logger.info("Resource registered"))
        .subscribe();

    asyncServer.addPrompt(asyncPromptRegistration)
        .doOnSuccess(v -> logger.info("Prompt registered"))
        .subscribe();

    // Send logging notifications
    asyncServer.loggingNotification(LoggingMessageNotification.builder()
        .level(LoggingLevel.INFO)
        .logger("custom-logger")
        .data("Server initialized")
        .build());

    // Close the server when done
    asyncServer.close()
        .doOnSuccess(v -> logger.info("Server closed"))
        .subscribe();
    ```
  </Tab>
</Tabs>

## Server Transport

The transport layer in the MCP SDK is responsible for handling the communication between clients and servers. It provides different implementations to support various communication protocols and patterns. The SDK includes several built-in transport implementations:

<Tabs>
  <Tab title="STDIO">
    <>
      Create in-process based transport:

      ```java
      StdioServerTransport transport = new StdioServerTransport(new ObjectMapper());
      ```

      Provides bidirectional JSON-RPC message handling over standard input/output streams with non-blocking message processing, serialization/deserialization, and graceful shutdown support.

      Key features:

      <ul>
        <li>Bidirectional communication through stdin/stdout</li>
        <li>Process-based integration support</li>
        <li>Simple setup and configuration</li>
        <li>Lightweight implementation</li>
      </ul>
    </>
  </Tab>

  <Tab title="SSE (WebFlux)">
    <>
      <p>Creates WebFlux-based SSE server transport.<br />Requires the <code>mcp-spring-webflux</code> dependency.</p>

      ```java
      @Configuration
      class McpConfig {
          @Bean
          WebFluxSseServerTransport webFluxSseServerTransport(ObjectMapper mapper) {
              return new WebFluxSseServerTransport(mapper, "/mcp/message");
          }

          @Bean
          RouterFunction<?> mcpRouterFunction(WebFluxSseServerTransport transport) {
              return transport.getRouterFunction();
          }
      }
      ```

      <p>Implements the MCP HTTP with SSE transport specification, providing:</p>

      <ul>
        <li>Reactive HTTP streaming with WebFlux</li>
        <li>Concurrent client connections through SSE endpoints</li>
        <li>Message routing and session management</li>
        <li>Graceful shutdown capabilities</li>
      </ul>
    </>
  </Tab>

  <Tab title="SSE (WebMvc)">
    <>
      <p>Creates WebMvc-based SSE server transport.<br />Requires the <code>mcp-spring-webmvc</code> dependency.</p>

      ```java
      @Configuration
      @EnableWebMvc
      class McpConfig {
          @Bean
          WebMvcSseServerTransport webMvcSseServerTransport(ObjectMapper mapper) {
              return new WebMvcSseServerTransport(mapper, "/mcp/message");
          }

          @Bean
          RouterFunction<ServerResponse> mcpRouterFunction(WebMvcSseServerTransport transport) {
              return transport.getRouterFunction();
          }
      }
      ```

      <p>Implements the MCP HTTP with SSE transport specification, providing:</p>

      <ul>
        <li>Server-side event streaming</li>
        <li>Integration with Spring WebMVC</li>
        <li>Support for traditional web applications</li>
        <li>Synchronous operation handling</li>
      </ul>
    </>
  </Tab>

  <Tab title="SSE (Servlet)">
    <>
      <p>
        Creates a Servlet-based SSE server transport. It is included in the core <code>mcp</code> module.<br />
        The <code>HttpServletSseServerTransport</code> can be used with any Servlet container.<br />
        To use it with a Spring Web application, you can register it as a Servlet bean:
      </p>

      ```java
      @Configuration
      @EnableWebMvc
      public class McpServerConfig implements WebMvcConfigurer {

          @Bean
          public HttpServletSseServerTransport servletSseServerTransport() {
              return new HttpServletSseServerTransport(new ObjectMapper(), "/mcp/message");
          }

          @Bean
          public ServletRegistrationBean customServletBean(HttpServletSseServerTransport servlet) {
              return new ServletRegistrationBean(servlet);
          }
      }
      ```

      <p>
        Implements the MCP HTTP with SSE transport specification using the traditional Servlet API, providing:
      </p>

      <ul>
        <li>Asynchronous message handling using Servlet 6.0 async support</li>
        <li>Session management for multiple client connections</li>

        <li>
          Two types of endpoints:

          <ul>
            <li>SSE endpoint (<code>/sse</code>) for server-to-client events</li>
            <li>Message endpoint (configurable) for client-to-server requests</li>
          </ul>
        </li>

        <li>Error handling and response formatting</li>
        <li>Graceful shutdown support</li>
      </ul>
    </>
  </Tab>
</Tabs>

## Server Capabilities

The server can be configured with various capabilities:

```java
var capabilities = ServerCapabilities.builder()
    .resources(false, true)  // Resource support with list changes notifications
    .tools(true)            // Tool support with list changes notifications
    .prompts(true)          // Prompt support with list changes notifications
    .logging()              // Enable logging support (enabled by default with loging level INFO)
    .build();
```

### Logging Support

The server provides structured logging capabilities that allow sending log messages to clients with different severity levels:

```java
// Send a log message to clients
server.loggingNotification(LoggingMessageNotification.builder()
    .level(LoggingLevel.INFO)
    .logger("custom-logger")
    .data("Custom log message")
    .build());
```

Clients can control the minimum logging level they receive through the `mcpClient.setLoggingLevel(level)` request. Messages below the set level will be filtered out.
Supported logging levels (in order of increasing severity): DEBUG (0), INFO (1), NOTICE (2), WARNING (3), ERROR (4), CRITICAL (5), ALERT (6), EMERGENCY (7)

### Tool Registration

<Tabs>
  <Tab title="Sync">
    ```java
    // Sync tool registration
    var syncToolRegistration = new McpServerFeatures.SyncToolRegistration(
        new Tool("calculator", "Basic calculator", Map.of(
            "operation", "string",
            "a", "number",
            "b", "number"
        )),
        arguments -> {
            // Tool implementation
            return new CallToolResult(result, false);
        }
    );
    ```
  </Tab>

  <Tab title="Async">
    ```java
    // Async tool registration
    var asyncToolRegistration = new McpServerFeatures.AsyncToolRegistration(
        new Tool("calculator", "Basic calculator", Map.of(
            "operation", "string",
            "a", "number",
            "b", "number"
        )),
        arguments -> {
            // Tool implementation
            return Mono.just(new CallToolResult(result, false));
        }
    );
    ```
  </Tab>
</Tabs>

### Resource Registration

<Tabs>
  <Tab title="Sync">
    ```java
    // Sync resource registration
    var syncResourceRegistration = new McpServerFeatures.SyncResourceRegistration(
        new Resource("custom://resource", "name", "description", "mime-type", null),
        request -> {
            // Resource read implementation
            return new ReadResourceResult(contents);
        }
    );
    ```
  </Tab>

  <Tab title="Async">
    ```java
    // Async resource registration
    var asyncResourceRegistration = new McpServerFeatures.AsyncResourceRegistration(
        new Resource("custom://resource", "name", "description", "mime-type", null),
        request -> {
            // Resource read implementation
            return Mono.just(new ReadResourceResult(contents));
        }
    );
    ```
  </Tab>
</Tabs>

### Prompt Registration

<Tabs>
  <Tab title="Sync">
    ```java
    // Sync prompt registration
    var syncPromptRegistration = new McpServerFeatures.SyncPromptRegistration(
        new Prompt("greeting", "description", List.of(
            new PromptArgument("name", "description", true)
        )),
        request -> {
            // Prompt implementation
            return new GetPromptResult(description, messages);
        }
    );
    ```
  </Tab>

  <Tab title="Async">
    ```java
    // Async prompt registration
    var asyncPromptRegistration = new McpServerFeatures.AsyncPromptRegistration(
        new Prompt("greeting", "description", List.of(
            new PromptArgument("name", "description", true)
        )),
        request -> {
            // Prompt implementation
            return Mono.just(new GetPromptResult(description, messages));
        }
    );
    ```
  </Tab>
</Tabs>

## Error Handling

The SDK provides comprehensive error handling through the McpError class, covering protocol compatibility, transport communication, JSON-RPC messaging, tool execution, resource management, prompt handling, timeouts, and connection issues. This unified error handling approach ensures consistent and reliable error management across both synchronous and asynchronous operations.


# Building MCP with LLMs
Source: https://modelcontextprotocol.io/tutorials/building-mcp-with-llms

Speed up your MCP development using LLMs such as Claude!

This guide will help you use LLMs to help you build custom Model Context Protocol (MCP) servers and clients. We'll be focusing on Claude for this tutorial, but you can do this with any frontier LLM.

## Preparing the documentation

Before starting, gather the necessary documentation to help Claude understand MCP:

1.  Visit [https://modelcontextprotocol.io/llms-full.txt](https://modelcontextprotocol.io/llms-full.txt) and copy the full documentation text
2.  Navigate to either the [MCP TypeScript SDK](https://github.com/modelcontextprotocol/typescript-sdk) or [Python SDK repository](https://github.com/modelcontextprotocol/python-sdk)
3.  Copy the README files and other relevant documentation
4.  Paste these documents into your conversation with Claude

## Describing your server

Once you've provided the documentation, clearly describe to Claude what kind of server you want to build. Be specific about:

*   What resources your server will expose
*   What tools it will provide
*   Any prompts it should offer
*   What external systems it needs to interact with

For example:

```
Build an MCP server that:
- Connects to my company's PostgreSQL database
- Exposes table schemas as resources
- Provides tools for running read-only SQL queries
- Includes prompts for common data analysis tasks
```

## Working with Claude

When working with Claude on MCP servers:

1.  Start with the core functionality first, then iterate to add more features
2.  Ask Claude to explain any parts of the code you don't understand
3.  Request modifications or improvements as needed
4.  Have Claude help you test the server and handle edge cases

Claude can help implement all the key MCP features:

*   Resource management and exposure
*   Tool definitions and implementations
*   Prompt templates and handlers
*   Error handling and logging
*   Connection and transport setup

## Best practices

When building MCP servers with Claude:

*   Break down complex servers into smaller pieces
*   Test each component thoroughly before moving on
*   Keep security in mind - validate inputs and limit access appropriately
*   Document your code well for future maintenance
*   Follow MCP protocol specifications carefully

## Next steps

After Claude helps you build your server:

1.  Review the generated code carefully
2.  Test the server with the MCP Inspector tool
3.  Connect it to Claude.app or other MCP clients
4.  Iterate based on real usage and feedback

Remember that Claude can help you modify and improve your server as requirements change over time.

Need more guidance? Just ask Claude specific questions about implementing MCP features or troubleshooting issues that arise.

================
File: pyproject.toml
================
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "supabase-mcp-server"
dynamic = ["version"]
description = "Unofficial Supabase MCP server that enables Cursor and Windsurf to manage your database and execute SQL queries"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "mcp[cli]>=1.2.1",
    "psycopg2>=2.9.10",
    "supabase>=2.13.0",
    "tenacity>=9.0.0",
]
authors = [
    {name = "Alexander Zuev", email = "azuev@outlook.com"}
]
keywords = ["supabase", "mcp", "cursor", "windsurf"]
license = "Apache-2.0"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database :: Database Engines/Servers",
]

[project.urls]
Homepage = "https://github.com/alexander-zuev/supabase-mcp-server"
Repository = "https://github.com/alexander-zuev/supabase-mcp-server.git"
Changelog = "https://github.com/alexander-zuev/supabase-mcp-server/blob/main/CHANGELOG.MD"
Documentation = "https://github.com/alexander-zuev/supabase-mcp-server#readme"



[tool.hatch.build.targets.wheel]
packages = ["supabase_mcp"]

[tool.uv]
package = true

[tool.hatch.version]
source = "vcs"
raw-options = { version_scheme = "no-guess-dev" }

[tool.hatch.build.hooks.vcs]
version-file = "supabase_mcp/_version.py"

[project.scripts]
supabase-mcp-server = "supabase_mcp.main:run"
supabase-mcp-inspector = "supabase_mcp.main:inspector"


# Configure PyPI publishing
[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple/"
publish-url = "https://upload.pypi.org/legacy/"

[tool.ruff]
target-version = "py312"
line-length = 120
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"


[tool.mypy]
python_version = "3.12"
strict = true
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true

[tool.pytest]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v -ra -q"
asyncio_mode = "strict"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
markers = [
    "unit: marks a test as a unit test",
    "integration: marks a test as an integration test that requires database access"
]

[dependency-groups]
dev = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.3",
    "pytest-mock>=3.14.0",
]

================
File: README.md
================
# Supabase MCP Server

<p align="center">
  <picture>
    <source media="(prefers-color-scheme: dark)" srcset="https://github.com/user-attachments/assets/4a363bcd-7c15-47fa-a72a-d159916517f7" />
    <source media="(prefers-color-scheme: light)" srcset="https://github.com/user-attachments/assets/d255388e-cb1b-42ea-a7b2-0928f031e0df" />
    <img alt="Supabase" src="https://github.com/user-attachments/assets/d255388e-cb1b-42ea-a7b2-0928f031e0df" height="40" />
  </picture>
  &nbsp;&nbsp;
  <picture>
    <source media="(prefers-color-scheme: dark)" srcset="https://github.com/user-attachments/assets/38db1bcd-50df-4a49-a106-1b5afd924cb2" />
    <source media="(prefers-color-scheme: light)" srcset="https://github.com/user-attachments/assets/82603097-07c9-42bb-9cbc-fb8f03560926" />
    <img alt="MCP" src="https://github.com/user-attachments/assets/82603097-07c9-42bb-9cbc-fb8f03560926" height="40" />
  </picture>
</p>

<p align="center">
  <strong>Let Cursor & Windsurf manage your Supabase and run SQL queries. Autonomously. In a safe way.</strong>
</p>

[![Star History Chart](https://api.star-history.com/svg?repos=alexander-zuev/supabase-mcp-server&type=Date)](https://star-history.com/#alexander-zuev/supabase-mcp-server&Date)

<p align="center">
  <a href="https://pypi.org/project/supabase-mcp-server/"><img src="https://img.shields.io/pypi/v/supabase-mcp-server.svg" alt="PyPI version" /></a>
  <a href="https://github.com/alexander-zuev/supabase-mcp-server/actions"><img src="https://github.com/alexander-zuev/supabase-mcp-server/workflows/CI/badge.svg" alt="CI Status" /></a>
  <a href="https://www.python.org/downloads/"><img src="https://img.shields.io/badge/python-3.12%2B-blue.svg" alt="Python 3.12+" /></a>
  <a href="https://github.com/astral-sh/uv"><img src="https://img.shields.io/badge/uv-package%20manager-blueviolet" alt="uv package manager" /></a>
  <a href="https://pepy.tech/project/supabase-mcp-server"><img src="https://static.pepy.tech/badge/supabase-mcp-server" alt="PyPI Downloads" /></a>
  <a href="https://smithery.ai/badge/@alexander-zuev/supabase-mcp-server"><img src="https://smithery.ai/badge/@alexander-zuev/supabase-mcp-server" alt="Smithery.ai Downloads" /></a>
  <a href="https://modelcontextprotocol.io/introduction"><img src="https://img.shields.io/badge/MCP-Server-orange" alt="MCP Server" /></a>
  <a href="LICENSE"><img src="https://img.shields.io/badge/license-Apache%202.0-blue.svg" alt="License" /></a>
</p>

A feature-rich MCP server that enables Cursor and Windsurf to safely interact with Supabase databases. It provides tools for database management, SQL query execution, and Supabase Management API access with built-in safety controls.

## Table of contents
<p align="center">
  <a href="#getting-started">Getting started</a> •
  <a href="#feature-overview">Feature overview</a> •
  <a href="#troubleshooting">Troubleshooting</a> •
  <a href="#roadmap">Roadmap</a>
</p>

## ✨ Key features
- 💻 Compatible with Cursor, Windsurf, Cline and other MCP clients supporting `stdio` protocol
- 🔐 Control read-only and read-write modes of SQL query execution
- 🔄 Robust transaction handling for both direct and pooled database connections
- 💻 Manage your Supabase projects with Supabase Management API
- 🧑‍💻 Manage users with Supabase Auth Admin methods via Python SDK
- 🔨 Pre-built tools to help Cursor & Windsurf work with MCP more effectively
- 📦 Dead-simple install & setup via package manager (uv, pipx, etc.)

## Getting Started

### Prerequisites
Installing the server requires the following on your system:
- Python 3.12+
- PostgresSQL 16+

If you plan to install via `uv`, ensure it's [installed](https://docs.astral.sh/uv/getting-started/installation/#__tabbed_1_1).

### PostgreSQL Installation
> ⚠️ **Important**: PostgreSQL must be installed BEFORE installing project dependencies, as psycopg2 requires PostgreSQL development libraries during compilation.

**MacOS**
```bash
brew install postgresql@16
```

**Windows**
  - Download and install PostgreSQL 16+ from https://www.postgresql.org/download/windows/
  - Ensure "PostgreSQL Server" and "Command Line Tools" are selected during installation

### Step 1. MCP Server Installation

Since v0.2.0 I introduced support for package installation. You can use your favorite Python package manager to install the server via:

```bash
# if pipx is installed (recommended)
pipx install supabase-mcp-server

# if uv is installed
uv pip install supabase-mcp-server
```

`pipx` is recommended because it creates isolated environments for each package.

You can also install the server manually by cloning the repository and running `pipx` install -editable . from the root directory.

> ⚠️ If you run into psycopg2 compilation issues, you might be missing PostgreSQL development packages. See above.

#### Installing from source
If you would like to install from source, for example for local development:
```bash
uv venv
# On Mac
source .venv/bin/activate
# On Windows
.venv\Scripts\activate
# Install package in editable mode
uv pip install -e .
```

#### Installing via Smithery.ai
Please report any issues with Smithery, as I haven't tested it yet.

To install Supabase MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@alexander-zuev/supabase-mcp):

```bash
npx -y @smithery/cli install @alexander-zuev/supabase-mcp --client claude
```

### Step 2. Configuration

After installing the package, you'll need to configure your database connection settings. The server supports both local and remote Supabase instances.

#### Local Supabase instance (Default)
 Server is pre-configured to connect to the local Supabase instance using default settings:
- `Host`: 127.0.0.1:54322
- `Password`: postgres
- `API URL` : http://127.0.0.1:54321


>💡 As long as you didn't modify the default settings and you want to connect to the local instance, you don't need to set environment variables.

#### Remote Supabase instance

> ⚠️ **IMPORTANT WARNING**: Session pooling connections are not supported and there are no plans to support it yet. Let me know if you feel there is a use case for supporting this in an MCP server

For remote Supabase projects, you need to configure:
- `SUPABASE_PROJECT_REF` - Your project reference (found in project URL)
- `SUPABASE_DB_PASSWORD` - Your database password
- `SUPABASE_REGION` - (Optional) Defaults to `us-east-1`
- `SUPABASE_ACCESS_TOKEN` - (Optional) For Management API access
- `SUPABASE_SERVICE_ROLE_KEY` - (Optional) For Auth Admin SDK access

You can get your SUPABASE_PROJECT_REF from your project's dashboard URL:
- `https://supabase.com/dashboard/project/<supabase-project-ref>`

The server supports all Supabase regions:
- `us-west-1` - West US (North California)
- `us-east-1` - East US (North Virginia) - default
- `us-east-2` - East US (Ohio)
- `ca-central-1` - Canada (Central)
- `eu-west-1` - West EU (Ireland)
- `eu-west-2` - West Europe (London)
- `eu-west-3` - West EU (Paris)
- `eu-central-1` - Central EU (Frankfurt)
- `eu-central-2` - Central Europe (Zurich)
- `eu-north-1` - North EU (Stockholm)
- `ap-south-1` - South Asia (Mumbai)
- `ap-southeast-1` - Southeast Asia (Singapore)
- `ap-northeast-1` - Northeast Asia (Tokyo)
- `ap-northeast-2` - Northeast Asia (Seoul)
- `ap-southeast-2` - Oceania (Sydney)
- `sa-east-1` - South America (São Paulo)

Method of MCP configuration differs between Cursor and Windsurf. Read the relevant section to understand how to configure connection.

##### Cursor
Since v0.46 there are two ways to configure MCP servers in Cursor:
- per project basis -> create `mcp.json` in your project / repo folder and `.env` to configure connection
- globally -> create an MCP server in Settings and configure using `.env` which is supported by this MCP server only


You can create project-specific MCP by:
- creating .cursor folder in your repo, if doesn't exist
- creating or updating `mcp.json` file with the following settings

> ⚠ **Environment variables**: If you are configuring MCP server on a per-project basis you still need to create .env file for connection settings to be picked up. I wasn't able to configure mcp.json to pick up my env vars 😔

```json
{
	"mcpServers": {
	  "supabase": {
		"command": "supabase-mcp-server"
	  }
	}
}
```

Alternatively, if you want to configure MCP servers globally (i.e. not for each project), you can use configure connection settings by updating an `.env` file in a global config folder by running the following commands:
```bash
# Create config directory and navigate to it
# On macOS/Linux
mkdir -p ~/.config/supabase-mcp
cd ~/.config/supabase-mcp

# On Windows (in PowerShell)
mkdir -Force "$env:APPDATA\supabase-mcp"
cd "$env:APPDATA\supabase-mcp"
```
This creates the necessary config folder where your environment file will be stored.

```bash
# Create and edit .env file
# On macOS/Linux
nano ~/.config/supabase-mcp/.env

# On Windows (PowerShell)
notepad "$env:APPDATA\supabase-mcp\.env"
```

This will open the .env file. Once the file is open, copy & paste the following:
```bash
SUPABASE_PROJECT_REF=your-project-ref
SUPABASE_DB_PASSWORD=your-db-password
SUPABASE_REGION=us-east-1  # optional, defaults to us-east-1
SUPABASE_ACCESS_TOKEN=your-access-token  # optional, for management API
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key # optional, for Auth Admin SDK
```

Verify the file exists - you should see the values you have just set:
```bash
# On macOS/Linux
cat ~/.config/supabase-mcp/.env

# On Windows (PowerShell)
Get-Content "$env:APPDATA\supabase-mcp\.env"
```

You can find global config file:
   - Windows: `%APPDATA%/supabase-mcp/.env`
   - macOS/Linux: `~/.config/supabase-mcp/.env`


##### Windsurf
Windsurf supports de facto standard .json format for MCP Servers configuration. You can configure the server in mcp_config.json file:
```json
{
    "mcpServers": {
      "supabase": {
        "command": "/Users/username/.local/bin/supabase-mcp-server",  // update path
        "env": {
          "SUPABASE_PROJECT_REF": "your-project-ref",
          "SUPABASE_DB_PASSWORD": "your-db-password",
          "SUPABASE_REGION": "us-east-1",  // optional, defaults to us-east-1
          "SUPABASE_ACCESS_TOKEN": "your-access-token",  // optional, for management API
          "SUPABASE_SERVICE_ROLE_KEY": "your-service-role-key"  // optional, for Auth Admin SDK
        }
      }
    }
}
```
> 💡 **Finding the server path**:
> - macOS/Linux: Run `which supabase-mcp-server`
> - Windows: Run `where supabase-mcp-server`

#### Configuration Precedence
The server looks for configuration in this order:
1. Environment variables (highest priority)
2. Local `.env` file in current directory
3. Global config file:
   - Windows: `%APPDATA%/supabase-mcp/.env`
   - macOS/Linux: `~/.config/supabase-mcp/.env`
4. Default settings (local development)

### Step 3. Running MCP Server in Cursor/Windsurf

In general, any MCP client that supports `stdio` protocol should work with this MCP server (Cline, for example) but I haven't tested it with anything except Cursor/Windsurf.

#### Cursor
Go to Settings -> Features -> MCP Servers and add a new server with this configuration:
```bash
# can be set to any name
name: supabase
type: command
# if you installed with pipx
command: supabase-mcp-server
# if you installed with uv
command: uv run supabase-mcp-server
```

If configuration is correct, you should see a green dot indicator and the number of tools exposed by the server.
![How successful Cursor config looks like](https://github.com/user-attachments/assets/45df080a-8199-4aca-b59c-a84dc7fe2c09)

#### Windsurf
Go to Cascade -> Click on the hammer icon -> Configure -> Fill in the configuration:
```json
{
    "mcpServers": {
      "supabase": {
        "command": "/Users/username/.local/bin/supabase-mcp-server",  // update path
        "env": {
          "SUPABASE_PROJECT_REF": "your-project-ref",
          "SUPABASE_DB_PASSWORD": "your-db-password",
          "SUPABASE_REGION": "us-east-1",  // optional, defaults to us-east-1
          "SUPABASE_ACCESS_TOKEN": "your-access-token",  // optional, for management API
          "SUPABASE_SERVICE_ROLE_KEY": "your-service-role-key"  // optional, for Auth Admin SDK
        }
      }
    }
}
```
If configuration is correct, you should see green dot indicator and clickable supabase server in the list of available servers.

![How successful Windsurf config looks like](https://github.com/user-attachments/assets/322b7423-8c71-410b-bcab-aff1b143faa4)

### Troubleshooting

Here are some tips & tricks that might help you:
- **Debug installation** - run `supabase-mcp-server` directly from the terminal to see if it works. If it doesn't, there might be an issue with the installation.
- **MCP Server configuration** - if the above step works, it means the server is installed and configured correctly. As long as you provided the right command, IDE should be able to connect. Make sure to provide the right path to the server executable.
- **Environment variables** - to connect to the right database, make sure you either set env variables in `mcp_config.json` or in `.env` file placed in a global config directory (`~/.config/supabase-mcp/.env` on macOS/Linux or `%APPDATA%\supabase-mcp\.env` on Windows).
- **Accessing logs** - The MCP server writes detailed logs to a file:
  - Log file location:
    - macOS/Linux: `~/.local/share/supabase-mcp/mcp_server.log`
    - Windows: `%USERPROFILE%\.local\share\supabase-mcp\mcp_server.log`
  - Logs include connection status, configuration details, and operation results
  - View logs using any text editor or terminal commands:
    ```bash
    # On macOS/Linux
    cat ~/.local/share/supabase-mcp/mcp_server.log

    # On Windows (PowerShell)
    Get-Content "$env:USERPROFILE\.local\share\supabase-mcp\mcp_server.log"
    ```

If you are stuck or any of the instructions above are incorrect, please raise an issue.

### MCP Inspector
A super useful tool to help debug MCP server issues is MCP Inspector. If you installed from source, you can run `supabase-mcp-inspector` from the project repo and it will run the inspector instance. Coupled with logs this will give you complete overview over what's happening in the server.
> 📝 Running `supabase-mcp-inspector`, if installed from package, doesn't work properly - I will validate and fix in the cominng release.

## Feature Overview

### Database query tools

Since v0.3.0 server supports both read-only and data modification operations:

- **Read operations**: SELECT queries for data retrieval
- **Data Manipulation Language (DML)**: INSERT, UPDATE, DELETE operations for data changes
- **Data Definition Language (DDL)**: CREATE, ALTER, DROP operations for schema changes*

*Note: DDL operations require:
1. Read-write mode enabled via `live_dangerously`
2. Sufficient permissions for the connected database role

#### Transaction Handling

The server supports two approaches for executing write operations:

1. **Explicit Transaction Control** (Recommended):
   ```sql
   BEGIN;
   CREATE TABLE public.test_table (id SERIAL PRIMARY KEY, name TEXT);
   COMMIT;
   ```

2. **Single Statements**:
   ```sql
   CREATE TABLE public.test_table (id SERIAL PRIMARY KEY, name TEXT);
   ```

For DDL operations (CREATE/ALTER/DROP), tool description appropriately guides Cursor/Windsurft to use explicit transaction control with BEGIN/COMMIT blocks.

#### Connection Types

This MCP server uses::
- **Direct Database Connection**: when connecting to a local Supabase instance
- **Transaction Pooler Connections**: when connecting to a remote Supabase instance


When connecting via Supabase's Transaction Pooler, some complex transaction patterns may not work as expected. For schema changes in these environments, use explicit transaction blocks or consider using Supabase migrations or the SQL Editor in the dashboard.

Available database tools:
- `get_db_schemas` - Lists all database schemas with their sizes and table counts
- `get_tables` - Lists all tables in a schema with their sizes, row counts, and metadata
- `get_table_schema` - Gets detailed table structure including columns, keys, and relationships
- `execute_sql_query` - Executes raw SQL queries with comprehensive support for all PostgreSQL operations:
  - Supports all query types (SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP, etc.)
  - Handles transaction control statements (BEGIN, COMMIT, ROLLBACK)


- Supported modes:
  - `read-only` - only read-only queries are allowed (default mode)
  - `read-write` - all SQL operations are allowed when explicitly enabled
- Safety features:
  - Starts in read-only mode by default
  - Requires explicit mode switch for write operations
  - Automatically resets to read-only mode after write operations
  - Intelligent transaction state detection to prevent errors
  - SQL query validation [TODO]

### Management API tools
Since v0.3.0 server supports sending arbitrary requests to Supabase Management API with auto-injection of project ref and safety mode control:
  - Includes the following tools:
    - `send_management_api_request` to send arbitrary requests to Supabase Management API, with auto-injection of project ref and safety mode control
    - `get_management_api_spec` to get the enriched API specification with safety information
    - `get_management_api_safety_rules` to get all safety rules including blocked and unsafe operations with human-readable explanations
    - `live_dangerously` to switch between safe and unsafe modes
  - Safety features:
    - Divides API methods into `safe`, `unsafe` and `blocked` categories based on the risk of the operation
    - Allows to switch between safe and unsafe modes dynamically
    - Blocked operations (delete project, delete database) are not allowed regardless of the mode
  - **Note**: Management API tools only work with remote Supabase instances and are not compatible with local Supabase development setups.

### Auth Admin tools
I was planning to add support for Python SDK methods to the MCP server. Upon consideration I decided to only add support for Auth admin methods as I often found myself manually creating test users which was prone to errors and time consuming. Now I can just ask Cursor to create a test user and it will be done seamlessly. Check out the full Auth Admin SDK method docs to know what it can do.

Since v0.3.6 server supports direct access to Supabase Auth Admin methods via Python SDK:
  - Includes the following tools:
    - `get_auth_admin_methods_spec` to retrieve documentation for all available Auth Admin methods
    - `call_auth_admin_method` to directly invoke Auth Admin methods with proper parameter handling
  - Supported methods:
    - `get_user_by_id`: Retrieve a user by their ID
    - `list_users`: List all users with pagination
    - `create_user`: Create a new user
    - `delete_user`: Delete a user by their ID
    - `invite_user_by_email`: Send an invite link to a user's email
    - `generate_link`: Generate an email link for various authentication purposes
    - `update_user_by_id`: Update user attributes by ID
    - `delete_factor`: Delete a factor on a user (currently not implemented in SDK)

#### Why use Auth Admin SDK instead of raw SQL queries?

The Auth Admin SDK provides several key advantages over direct SQL manipulation:
- **Functionality**: Enables operations not possible with SQL alone (invites, magic links, MFA)
- **Accuracy**: More reliable then creating and executing raw SQL queries on auth schemas
- **Simplicity**: Offers clear methods with proper validation and error handling

  - Response format:
    - All methods return structured Python objects instead of raw dictionaries
    - Object attributes can be accessed using dot notation (e.g., `user.id` instead of `user["id"]`)
  - Edge cases and limitations:
    - UUID validation: Many methods require valid UUID format for user IDs and will return specific validation errors
    - Email configuration: Methods like `invite_user_by_email` and `generate_link` require email sending to be configured in your Supabase project
    - Link types: When generating links, different link types have different requirements:
      - `signup` links don't require the user to exist
      - `magiclink` and `recovery` links require the user to already exist in the system
    - Error handling: The server provides detailed error messages from the Supabase API, which may differ from the dashboard interface
    - Method availability: Some methods like `delete_factor` are exposed in the API but not fully implemented in the SDK

## Roadmap

- 📦 Simplified installation via package manager - ✅ (v0.2.0)
- 🌎 Support for different Supabase regions - ✅ (v0.2.2)
- 🎮 Programmatic access to Supabase management API with safety controls - ✅ (v0.3.0)
- 👷‍♂️ Read and read-write database SQL queries with safety controls - ✅ (v0.3.0)
- 🔄 Robust transaction handling for both direct and pooled connections - ✅ (v0.3.2)
- 🐍 Support methods and objects available in native Python SDK - ✅ (v0.3.6)
- 🔍 Stronger SQL query validation (read vs write operations)
- 📝 Automatic versioning of DDL queries(?)
- 🪵 Tools / resources to more easily access database, edge functions logs (?)
- 👨‍💻 Supabase CLI integration (?)
- 📖 Radically improved knowledge and tools of api spec
  - Resources to more easily access and check api spec
  - Atomic url paths and ops (right now LLM trips more often then not)
- Better support for local database management



### Connect to Supabase logs

I'm planning to research, if it's possible to connect to Supabase db logs which might be useful for debugging (if not already supported.)


---

Enjoy! ☺️

================
File: smithery.yaml
================
# Smithery configuration file: https://smithery.ai/docs/config#smitheryyaml

startCommand:
  type: stdio
  configSchema:
    # JSON Schema defining the configuration options for the MCP.
    type: object
    required:
      - supabaseProjectRef
      - supabaseDbPassword
    properties:
      supabaseProjectRef:
        type: string
        description: The project reference of Supabase project you want to connect to.
      supabaseDbPassword:
        type: string
        description: The database password of Supabase project you want to connect to.
      supabaseRegion:
        type: string
        description: Region where your Supabase project is hosted.
        default: "us-east-1"
        enum:
          - "us-west-1"
          - "us-east-1"
          - "us-east-2"
          - "ca-central-1"
          - "eu-west-1"
          - "eu-west-2"
          - "eu-west-3"
          - "eu-central-1"
          - "eu-central-2"
          - "eu-north-1"
          - "ap-south-1"
          - "ap-southeast-1"
          - "ap-northeast-1"
          - "ap-northeast-2"
          - "ap-southeast-2"
          - "sa-east-1"
      supabaseAccessToken:
        type: string
        description: Your Supabase access token (required for Management API tools).
      supabaseServiceRoleKey:
        type: string
        description: Your Supabase service role key (required for Auth Admin SDK tools).
  commandFunction:
    # A function that produces the CLI command to start the MCP on stdio.
    |-
    (config) => ({
      command: 'supabase-mcp-server',
      args: [],
      env: {
        SUPABASE_PROJECT_REF: config.supabaseProjectRef,
        SUPABASE_DB_PASSWORD: config.supabaseDbPassword,
        SUPABASE_REGION: config.supabaseRegion,
        SUPABASE_ACCESS_TOKEN: config.supabaseAccessToken,
        SUPABASE_SERVICE_ROLE_KEY: config.supabaseServiceRoleKey
      }
    })

================
File: uv.lock
================
version = 1
revision = 1
requires-python = ">=3.12"

[[package]]
name = "aiohappyeyeballs"
version = "2.4.6"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/08/07/508f9ebba367fc3370162e53a3cfd12f5652ad79f0e0bfdf9f9847c6f159/aiohappyeyeballs-2.4.6.tar.gz", hash = "sha256:9b05052f9042985d32ecbe4b59a77ae19c006a78f1344d7fdad69d28ded3d0b0", size = 21726 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/44/4c/03fb05f56551828ec67ceb3665e5dc51638042d204983a03b0a1541475b6/aiohappyeyeballs-2.4.6-py3-none-any.whl", hash = "sha256:147ec992cf873d74f5062644332c539fcd42956dc69453fe5204195e560517e1", size = 14543 },
]

[[package]]
name = "aiohttp"
version = "3.11.12"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "aiohappyeyeballs" },
    { name = "aiosignal" },
    { name = "attrs" },
    { name = "frozenlist" },
    { name = "multidict" },
    { name = "propcache" },
    { name = "yarl" },
]
sdist = { url = "https://files.pythonhosted.org/packages/37/4b/952d49c73084fb790cb5c6ead50848c8e96b4980ad806cf4d2ad341eaa03/aiohttp-3.11.12.tar.gz", hash = "sha256:7603ca26d75b1b86160ce1bbe2787a0b706e592af5b2504e12caa88a217767b0", size = 7673175 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/4d/d0/94346961acb476569fca9a644cc6f9a02f97ef75961a6b8d2b35279b8d1f/aiohttp-3.11.12-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:e392804a38353900c3fd8b7cacbea5132888f7129f8e241915e90b85f00e3250", size = 704837 },
    { url = "https://files.pythonhosted.org/packages/a9/af/05c503f1cc8f97621f199ef4b8db65fb88b8bc74a26ab2adb74789507ad3/aiohttp-3.11.12-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:8fa1510b96c08aaad49303ab11f8803787c99222288f310a62f493faf883ede1", size = 464218 },
    { url = "https://files.pythonhosted.org/packages/f2/48/b9949eb645b9bd699153a2ec48751b985e352ab3fed9d98c8115de305508/aiohttp-3.11.12-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:dc065a4285307607df3f3686363e7f8bdd0d8ab35f12226362a847731516e42c", size = 456166 },
    { url = "https://files.pythonhosted.org/packages/14/fb/980981807baecb6f54bdd38beb1bd271d9a3a786e19a978871584d026dcf/aiohttp-3.11.12-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:cddb31f8474695cd61fc9455c644fc1606c164b93bff2490390d90464b4655df", size = 1682528 },
    { url = "https://files.pythonhosted.org/packages/90/cb/77b1445e0a716914e6197b0698b7a3640590da6c692437920c586764d05b/aiohttp-3.11.12-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:9dec0000d2d8621d8015c293e24589d46fa218637d820894cb7356c77eca3259", size = 1737154 },
    { url = "https://files.pythonhosted.org/packages/ff/24/d6fb1f4cede9ccbe98e4def6f3ed1e1efcb658871bbf29f4863ec646bf38/aiohttp-3.11.12-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:e3552fe98e90fdf5918c04769f338a87fa4f00f3b28830ea9b78b1bdc6140e0d", size = 1793435 },
    { url = "https://files.pythonhosted.org/packages/17/e2/9f744cee0861af673dc271a3351f59ebd5415928e20080ab85be25641471/aiohttp-3.11.12-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:6dfe7f984f28a8ae94ff3a7953cd9678550dbd2a1f9bda5dd9c5ae627744c78e", size = 1692010 },
    { url = "https://files.pythonhosted.org/packages/90/c4/4a1235c1df544223eb57ba553ce03bc706bdd065e53918767f7fa1ff99e0/aiohttp-3.11.12-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:a481a574af914b6e84624412666cbfbe531a05667ca197804ecc19c97b8ab1b0", size = 1619481 },
    { url = "https://files.pythonhosted.org/packages/60/70/cf12d402a94a33abda86dd136eb749b14c8eb9fec1e16adc310e25b20033/aiohttp-3.11.12-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:1987770fb4887560363b0e1a9b75aa303e447433c41284d3af2840a2f226d6e0", size = 1641578 },
    { url = "https://files.pythonhosted.org/packages/1b/25/7211973fda1f5e833fcfd98ccb7f9ce4fbfc0074e3e70c0157a751d00db8/aiohttp-3.11.12-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:a4ac6a0f0f6402854adca4e3259a623f5c82ec3f0c049374133bcb243132baf9", size = 1684463 },
    { url = "https://files.pythonhosted.org/packages/93/60/b5905b4d0693f6018b26afa9f2221fefc0dcbd3773fe2dff1a20fb5727f1/aiohttp-3.11.12-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:c96a43822f1f9f69cc5c3706af33239489a6294be486a0447fb71380070d4d5f", size = 1646691 },
    { url = "https://files.pythonhosted.org/packages/b4/fc/ba1b14d6fdcd38df0b7c04640794b3683e949ea10937c8a58c14d697e93f/aiohttp-3.11.12-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:a5e69046f83c0d3cb8f0d5bd9b8838271b1bc898e01562a04398e160953e8eb9", size = 1702269 },
    { url = "https://files.pythonhosted.org/packages/5e/39/18c13c6f658b2ba9cc1e0c6fb2d02f98fd653ad2addcdf938193d51a9c53/aiohttp-3.11.12-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:68d54234c8d76d8ef74744f9f9fc6324f1508129e23da8883771cdbb5818cbef", size = 1734782 },
    { url = "https://files.pythonhosted.org/packages/9f/d2/ccc190023020e342419b265861877cd8ffb75bec37b7ddd8521dd2c6deb8/aiohttp-3.11.12-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:c9fd9dcf9c91affe71654ef77426f5cf8489305e1c66ed4816f5a21874b094b9", size = 1694740 },
    { url = "https://files.pythonhosted.org/packages/3f/54/186805bcada64ea90ea909311ffedcd74369bfc6e880d39d2473314daa36/aiohttp-3.11.12-cp312-cp312-win32.whl", hash = "sha256:0ed49efcd0dc1611378beadbd97beb5d9ca8fe48579fc04a6ed0844072261b6a", size = 411530 },
    { url = "https://files.pythonhosted.org/packages/3d/63/5eca549d34d141bcd9de50d4e59b913f3641559460c739d5e215693cb54a/aiohttp-3.11.12-cp312-cp312-win_amd64.whl", hash = "sha256:54775858c7f2f214476773ce785a19ee81d1294a6bedc5cc17225355aab74802", size = 437860 },
    { url = "https://files.pythonhosted.org/packages/c3/9b/cea185d4b543ae08ee478373e16653722c19fcda10d2d0646f300ce10791/aiohttp-3.11.12-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:413ad794dccb19453e2b97c2375f2ca3cdf34dc50d18cc2693bd5aed7d16f4b9", size = 698148 },
    { url = "https://files.pythonhosted.org/packages/91/5c/80d47fe7749fde584d1404a68ade29bcd7e58db8fa11fa38e8d90d77e447/aiohttp-3.11.12-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:4a93d28ed4b4b39e6f46fd240896c29b686b75e39cc6992692e3922ff6982b4c", size = 460831 },
    { url = "https://files.pythonhosted.org/packages/8e/f9/de568f8a8ca6b061d157c50272620c53168d6e3eeddae78dbb0f7db981eb/aiohttp-3.11.12-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:d589264dbba3b16e8951b6f145d1e6b883094075283dafcab4cdd564a9e353a0", size = 453122 },
    { url = "https://files.pythonhosted.org/packages/8b/fd/b775970a047543bbc1d0f66725ba72acef788028fce215dc959fd15a8200/aiohttp-3.11.12-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:e5148ca8955affdfeb864aca158ecae11030e952b25b3ae15d4e2b5ba299bad2", size = 1665336 },
    { url = "https://files.pythonhosted.org/packages/82/9b/aff01d4f9716245a1b2965f02044e4474fadd2bcfe63cf249ca788541886/aiohttp-3.11.12-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:525410e0790aab036492eeea913858989c4cb070ff373ec3bc322d700bdf47c1", size = 1718111 },
    { url = "https://files.pythonhosted.org/packages/e0/a9/166fd2d8b2cc64f08104aa614fad30eee506b563154081bf88ce729bc665/aiohttp-3.11.12-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:9bd8695be2c80b665ae3f05cb584093a1e59c35ecb7d794d1edd96e8cc9201d7", size = 1775293 },
    { url = "https://files.pythonhosted.org/packages/13/c5/0d3c89bd9e36288f10dc246f42518ce8e1c333f27636ac78df091c86bb4a/aiohttp-3.11.12-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f0203433121484b32646a5f5ea93ae86f3d9559d7243f07e8c0eab5ff8e3f70e", size = 1677338 },
    { url = "https://files.pythonhosted.org/packages/72/b2/017db2833ef537be284f64ead78725984db8a39276c1a9a07c5c7526e238/aiohttp-3.11.12-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:40cd36749a1035c34ba8d8aaf221b91ca3d111532e5ccb5fa8c3703ab1b967ed", size = 1603365 },
    { url = "https://files.pythonhosted.org/packages/fc/72/b66c96a106ec7e791e29988c222141dd1219d7793ffb01e72245399e08d2/aiohttp-3.11.12-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:a7442662afebbf7b4c6d28cb7aab9e9ce3a5df055fc4116cc7228192ad6cb484", size = 1618464 },
    { url = "https://files.pythonhosted.org/packages/3f/50/e68a40f267b46a603bab569d48d57f23508801614e05b3369898c5b2910a/aiohttp-3.11.12-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:8a2fb742ef378284a50766e985804bd6adb5adb5aa781100b09befdbfa757b65", size = 1657827 },
    { url = "https://files.pythonhosted.org/packages/c5/1d/aafbcdb1773d0ba7c20793ebeedfaba1f3f7462f6fc251f24983ed738aa7/aiohttp-3.11.12-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:2cee3b117a8d13ab98b38d5b6bdcd040cfb4181068d05ce0c474ec9db5f3c5bb", size = 1616700 },
    { url = "https://files.pythonhosted.org/packages/b0/5e/6cd9724a2932f36e2a6b742436a36d64784322cfb3406ca773f903bb9a70/aiohttp-3.11.12-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:f6a19bcab7fbd8f8649d6595624856635159a6527861b9cdc3447af288a00c00", size = 1685643 },
    { url = "https://files.pythonhosted.org/packages/8b/38/ea6c91d5c767fd45a18151675a07c710ca018b30aa876a9f35b32fa59761/aiohttp-3.11.12-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:e4cecdb52aaa9994fbed6b81d4568427b6002f0a91c322697a4bfcc2b2363f5a", size = 1715487 },
    { url = "https://files.pythonhosted.org/packages/8e/24/e9edbcb7d1d93c02e055490348df6f955d675e85a028c33babdcaeda0853/aiohttp-3.11.12-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:30f546358dfa0953db92ba620101fefc81574f87b2346556b90b5f3ef16e55ce", size = 1672948 },
    { url = "https://files.pythonhosted.org/packages/25/be/0b1fb737268e003198f25c3a68c2135e76e4754bf399a879b27bd508a003/aiohttp-3.11.12-cp313-cp313-win32.whl", hash = "sha256:ce1bb21fc7d753b5f8a5d5a4bae99566386b15e716ebdb410154c16c91494d7f", size = 410396 },
    { url = "https://files.pythonhosted.org/packages/68/fd/677def96a75057b0a26446b62f8fbb084435b20a7d270c99539c26573bfd/aiohttp-3.11.12-cp313-cp313-win_amd64.whl", hash = "sha256:f7914ab70d2ee8ab91c13e5402122edbc77821c66d2758abb53aabe87f013287", size = 436234 },
]

[[package]]
name = "aiosignal"
version = "1.3.2"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "frozenlist" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ba/b5/6d55e80f6d8a08ce22b982eafa278d823b541c925f11ee774b0b9c43473d/aiosignal-1.3.2.tar.gz", hash = "sha256:a8c255c66fafb1e499c9351d0bf32ff2d8a0321595ebac3b93713656d2436f54", size = 19424 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ec/6a/bc7e17a3e87a2985d3e8f4da4cd0f481060eb78fb08596c42be62c90a4d9/aiosignal-1.3.2-py2.py3-none-any.whl", hash = "sha256:45cde58e409a301715980c2b01d0c28bdde3770d8290b5eb2173759d9acb31a5", size = 7597 },
]

[[package]]
name = "annotated-types"
version = "0.7.0"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/ee/67/531ea369ba64dcff5ec9c3402f9f51bf748cec26dde048a2f973a4eea7f5/annotated_types-0.7.0.tar.gz", hash = "sha256:aff07c09a53a08bc8cfccb9c85b05f1aa9a2a6f23728d790723543408344ce89", size = 16081 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/78/b6/6307fbef88d9b5ee7421e68d78a9f162e0da4900bc5f5793f6d3d0e34fb8/annotated_types-0.7.0-py3-none-any.whl", hash = "sha256:1f02e8b43a8fbbc3f3e0d4f0f4bfc8131bcb4eebe8849b8e5c773f3a1c582a53", size = 13643 },
]

[[package]]
name = "anyio"
version = "4.8.0"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "idna" },
    { name = "sniffio" },
    { name = "typing-extensions", marker = "python_full_version < '3.13'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a3/73/199a98fc2dae33535d6b8e8e6ec01f8c1d76c9adb096c6b7d64823038cde/anyio-4.8.0.tar.gz", hash = "sha256:1d9fe889df5212298c0c0723fa20479d1b94883a2df44bd3897aa91083316f7a", size = 181126 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/46/eb/e7f063ad1fec6b3178a3cd82d1a3c4de82cccf283fc42746168188e1cdd5/anyio-4.8.0-py3-none-any.whl", hash = "sha256:b5011f270ab5eb0abf13385f851315585cc37ef330dd88e27ec3d34d651fd47a", size = 96041 },
]

[[package]]
name = "attrs"
version = "25.1.0"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/49/7c/fdf464bcc51d23881d110abd74b512a42b3d5d376a55a831b44c603ae17f/attrs-25.1.0.tar.gz", hash = "sha256:1c97078a80c814273a76b2a298a932eb681c87415c11dee0a6921de7f1b02c3e", size = 810562 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/fc/30/d4986a882011f9df997a55e6becd864812ccfcd821d64aac8570ee39f719/attrs-25.1.0-py3-none-any.whl", hash = "sha256:c75a69e28a550a7e93789579c22aa26b0f5b83b75dc4e08fe092980051e1090a", size = 63152 },
]

[[package]]
name = "certifi"
version = "2025.1.31"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/1c/ab/c9f1e32b7b1bf505bf26f0ef697775960db7932abeb7b516de930ba2705f/certifi-2025.1.31.tar.gz", hash = "sha256:3d5da6925056f6f18f119200434a4780a94263f10d1c21d032a6f6b2baa20651", size = 167577 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/38/fc/bce832fd4fd99766c04d1ee0eead6b0ec6486fb100ae5e74c1d91292b982/certifi-2025.1.31-py3-none-any.whl", hash = "sha256:ca78db4565a652026a4db2bcdf68f2fb589ea80d0be70e03929ed730746b84fe", size = 166393 },
]

[[package]]
name = "click"
version = "8.1.8"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b9/2e/0090cbf739cee7d23781ad4b89a9894a41538e4fcf4c31dcdd705b78eb8b/click-8.1.8.tar.gz", hash = "sha256:ed53c9d8990d83c2a27deae68e4ee337473f6330c040a31d4225c9574d16096a", size = 226593 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7e/d4/7ebdbd03970677812aac39c869717059dbb71a4cfc033ca6e5221787892c/click-8.1.8-py3-none-any.whl", hash = "sha256:63c132bbbed01578a06712a2d1f497bb62d9c1c0d329b7903a866228027263b2", size = 98188 },
]

[[package]]
name = "colorama"
version = "0.4.6"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/d8/53/6f443c9a4a8358a93a6792e2acffb9d9d5cb0a5cfd8802644b7b1c9a02e4/colorama-0.4.6.tar.gz", hash = "sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44", size = 27697 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d1/d6/3965ed04c63042e047cb6a3e6ed1a63a35087b6a609aa3a15ed8ac56c221/colorama-0.4.6-py2.py3-none-any.whl", hash = "sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6", size = 25335 },
]

[[package]]
name = "deprecation"
version = "2.1.0"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "packaging" },
]
sdist = { url = "https://files.pythonhosted.org/packages/5a/d3/8ae2869247df154b64c1884d7346d412fed0c49df84db635aab2d1c40e62/deprecation-2.1.0.tar.gz", hash = "sha256:72b3bde64e5d778694b0cf68178aed03d15e15477116add3fb773e581f9518ff", size = 173788 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/02/c3/253a89ee03fc9b9682f1541728eb66db7db22148cd94f89ab22528cd1e1b/deprecation-2.1.0-py2.py3-none-any.whl", hash = "sha256:a10811591210e1fb0e768a8c25517cabeabcba6f0bf96564f8ff45189f90b14a", size = 11178 },
]

[[package]]
name = "frozenlist"
version = "1.5.0"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/8f/ed/0f4cec13a93c02c47ec32d81d11c0c1efbadf4a471e3f3ce7cad366cbbd3/frozenlist-1.5.0.tar.gz", hash = "sha256:81d5af29e61b9c8348e876d442253723928dce6433e0e76cd925cd83f1b4b817", size = 39930 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/79/73/fa6d1a96ab7fd6e6d1c3500700963eab46813847f01ef0ccbaa726181dd5/frozenlist-1.5.0-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:31115ba75889723431aa9a4e77d5f398f5cf976eea3bdf61749731f62d4a4a21", size = 94026 },
    { url = "https://files.pythonhosted.org/packages/ab/04/ea8bf62c8868b8eada363f20ff1b647cf2e93377a7b284d36062d21d81d1/frozenlist-1.5.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:7437601c4d89d070eac8323f121fcf25f88674627505334654fd027b091db09d", size = 54150 },
    { url = "https://files.pythonhosted.org/packages/d0/9a/8e479b482a6f2070b26bda572c5e6889bb3ba48977e81beea35b5ae13ece/frozenlist-1.5.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:7948140d9f8ece1745be806f2bfdf390127cf1a763b925c4a805c603df5e697e", size = 51927 },
    { url = "https://files.pythonhosted.org/packages/e3/12/2aad87deb08a4e7ccfb33600871bbe8f0e08cb6d8224371387f3303654d7/frozenlist-1.5.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:feeb64bc9bcc6b45c6311c9e9b99406660a9c05ca8a5b30d14a78555088b0b3a", size = 282647 },
    { url = "https://files.pythonhosted.org/packages/77/f2/07f06b05d8a427ea0060a9cef6e63405ea9e0d761846b95ef3fb3be57111/frozenlist-1.5.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:683173d371daad49cffb8309779e886e59c2f369430ad28fe715f66d08d4ab1a", size = 289052 },
    { url = "https://files.pythonhosted.org/packages/bd/9f/8bf45a2f1cd4aa401acd271b077989c9267ae8463e7c8b1eb0d3f561b65e/frozenlist-1.5.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:7d57d8f702221405a9d9b40f9da8ac2e4a1a8b5285aac6100f3393675f0a85ee", size = 291719 },
    { url = "https://files.pythonhosted.org/packages/41/d1/1f20fd05a6c42d3868709b7604c9f15538a29e4f734c694c6bcfc3d3b935/frozenlist-1.5.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:30c72000fbcc35b129cb09956836c7d7abf78ab5416595e4857d1cae8d6251a6", size = 267433 },
    { url = "https://files.pythonhosted.org/packages/af/f2/64b73a9bb86f5a89fb55450e97cd5c1f84a862d4ff90d9fd1a73ab0f64a5/frozenlist-1.5.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:000a77d6034fbad9b6bb880f7ec073027908f1b40254b5d6f26210d2dab1240e", size = 283591 },
    { url = "https://files.pythonhosted.org/packages/29/e2/ffbb1fae55a791fd6c2938dd9ea779509c977435ba3940b9f2e8dc9d5316/frozenlist-1.5.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:5d7f5a50342475962eb18b740f3beecc685a15b52c91f7d975257e13e029eca9", size = 273249 },
    { url = "https://files.pythonhosted.org/packages/2e/6e/008136a30798bb63618a114b9321b5971172a5abddff44a100c7edc5ad4f/frozenlist-1.5.0-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:87f724d055eb4785d9be84e9ebf0f24e392ddfad00b3fe036e43f489fafc9039", size = 271075 },
    { url = "https://files.pythonhosted.org/packages/ae/f0/4e71e54a026b06724cec9b6c54f0b13a4e9e298cc8db0f82ec70e151f5ce/frozenlist-1.5.0-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:6e9080bb2fb195a046e5177f10d9d82b8a204c0736a97a153c2466127de87784", size = 285398 },
    { url = "https://files.pythonhosted.org/packages/4d/36/70ec246851478b1c0b59f11ef8ade9c482ff447c1363c2bd5fad45098b12/frozenlist-1.5.0-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:9b93d7aaa36c966fa42efcaf716e6b3900438632a626fb09c049f6a2f09fc631", size = 294445 },
    { url = "https://files.pythonhosted.org/packages/37/e0/47f87544055b3349b633a03c4d94b405956cf2437f4ab46d0928b74b7526/frozenlist-1.5.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:52ef692a4bc60a6dd57f507429636c2af8b6046db8b31b18dac02cbc8f507f7f", size = 280569 },
    { url = "https://files.pythonhosted.org/packages/f9/7c/490133c160fb6b84ed374c266f42800e33b50c3bbab1652764e6e1fc498a/frozenlist-1.5.0-cp312-cp312-win32.whl", hash = "sha256:29d94c256679247b33a3dc96cce0f93cbc69c23bf75ff715919332fdbb6a32b8", size = 44721 },
    { url = "https://files.pythonhosted.org/packages/b1/56/4e45136ffc6bdbfa68c29ca56ef53783ef4c2fd395f7cbf99a2624aa9aaa/frozenlist-1.5.0-cp312-cp312-win_amd64.whl", hash = "sha256:8969190d709e7c48ea386db202d708eb94bdb29207a1f269bab1196ce0dcca1f", size = 51329 },
    { url = "https://files.pythonhosted.org/packages/da/3b/915f0bca8a7ea04483622e84a9bd90033bab54bdf485479556c74fd5eaf5/frozenlist-1.5.0-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:7a1a048f9215c90973402e26c01d1cff8a209e1f1b53f72b95c13db61b00f953", size = 91538 },
    { url = "https://files.pythonhosted.org/packages/c7/d1/a7c98aad7e44afe5306a2b068434a5830f1470675f0e715abb86eb15f15b/frozenlist-1.5.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:dd47a5181ce5fcb463b5d9e17ecfdb02b678cca31280639255ce9d0e5aa67af0", size = 52849 },
    { url = "https://files.pythonhosted.org/packages/3a/c8/76f23bf9ab15d5f760eb48701909645f686f9c64fbb8982674c241fbef14/frozenlist-1.5.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:1431d60b36d15cda188ea222033eec8e0eab488f39a272461f2e6d9e1a8e63c2", size = 50583 },
    { url = "https://files.pythonhosted.org/packages/1f/22/462a3dd093d11df623179d7754a3b3269de3b42de2808cddef50ee0f4f48/frozenlist-1.5.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:6482a5851f5d72767fbd0e507e80737f9c8646ae7fd303def99bfe813f76cf7f", size = 265636 },
    { url = "https://files.pythonhosted.org/packages/80/cf/e075e407fc2ae7328155a1cd7e22f932773c8073c1fc78016607d19cc3e5/frozenlist-1.5.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:44c49271a937625619e862baacbd037a7ef86dd1ee215afc298a417ff3270608", size = 270214 },
    { url = "https://files.pythonhosted.org/packages/a1/58/0642d061d5de779f39c50cbb00df49682832923f3d2ebfb0fedf02d05f7f/frozenlist-1.5.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:12f78f98c2f1c2429d42e6a485f433722b0061d5c0b0139efa64f396efb5886b", size = 273905 },
    { url = "https://files.pythonhosted.org/packages/ab/66/3fe0f5f8f2add5b4ab7aa4e199f767fd3b55da26e3ca4ce2cc36698e50c4/frozenlist-1.5.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:ce3aa154c452d2467487765e3adc730a8c153af77ad84096bc19ce19a2400840", size = 250542 },
    { url = "https://files.pythonhosted.org/packages/f6/b8/260791bde9198c87a465224e0e2bb62c4e716f5d198fc3a1dacc4895dbd1/frozenlist-1.5.0-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9b7dc0c4338e6b8b091e8faf0db3168a37101943e687f373dce00959583f7439", size = 267026 },
    { url = "https://files.pythonhosted.org/packages/2e/a4/3d24f88c527f08f8d44ade24eaee83b2627793fa62fa07cbb7ff7a2f7d42/frozenlist-1.5.0-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:45e0896250900b5aa25180f9aec243e84e92ac84bd4a74d9ad4138ef3f5c97de", size = 257690 },
    { url = "https://files.pythonhosted.org/packages/de/9a/d311d660420b2beeff3459b6626f2ab4fb236d07afbdac034a4371fe696e/frozenlist-1.5.0-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:561eb1c9579d495fddb6da8959fd2a1fca2c6d060d4113f5844b433fc02f2641", size = 253893 },
    { url = "https://files.pythonhosted.org/packages/c6/23/e491aadc25b56eabd0f18c53bb19f3cdc6de30b2129ee0bc39cd387cd560/frozenlist-1.5.0-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:df6e2f325bfee1f49f81aaac97d2aa757c7646534a06f8f577ce184afe2f0a9e", size = 267006 },
    { url = "https://files.pythonhosted.org/packages/08/c4/ab918ce636a35fb974d13d666dcbe03969592aeca6c3ab3835acff01f79c/frozenlist-1.5.0-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:140228863501b44b809fb39ec56b5d4071f4d0aa6d216c19cbb08b8c5a7eadb9", size = 276157 },
    { url = "https://files.pythonhosted.org/packages/c0/29/3b7a0bbbbe5a34833ba26f686aabfe982924adbdcafdc294a7a129c31688/frozenlist-1.5.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:7707a25d6a77f5d27ea7dc7d1fc608aa0a478193823f88511ef5e6b8a48f9d03", size = 264642 },
    { url = "https://files.pythonhosted.org/packages/ab/42/0595b3dbffc2e82d7fe658c12d5a5bafcd7516c6bf2d1d1feb5387caa9c1/frozenlist-1.5.0-cp313-cp313-win32.whl", hash = "sha256:31a9ac2b38ab9b5a8933b693db4939764ad3f299fcaa931a3e605bc3460e693c", size = 44914 },
    { url = "https://files.pythonhosted.org/packages/17/c4/b7db1206a3fea44bf3b838ca61deb6f74424a8a5db1dd53ecb21da669be6/frozenlist-1.5.0-cp313-cp313-win_amd64.whl", hash = "sha256:11aabdd62b8b9c4b84081a3c246506d1cddd2dd93ff0ad53ede5defec7886b28", size = 51167 },
    { url = "https://files.pythonhosted.org/packages/c6/c8/a5be5b7550c10858fcf9b0ea054baccab474da77d37f1e828ce043a3a5d4/frozenlist-1.5.0-py3-none-any.whl", hash = "sha256:d994863bba198a4a518b467bb971c56e1db3f180a25c6cf7bb1949c267f748c3", size = 11901 },
]

[[package]]
name = "gotrue"
version = "2.11.3"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "httpx", extra = ["http2"] },
    { name = "pydantic" },
]
sdist = { url = "https://files.pythonhosted.org/packages/64/c3/c53a34f3fa23c2840f124df028c7757ef58e5c775efd6347bcf37a5e00b9/gotrue-2.11.3.tar.gz", hash = "sha256:14b03eb856b94a96fab73c8d41970ad645a74326ee4da95e66395e6b2c208ff7", size = 41872 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d3/f6/b868acd6556f599c12e73680201caf61f1a86d4c5897189e44fe1682fc5a/gotrue-2.11.3-py3-none-any.whl", hash = "sha256:8ad90771ff6b8ede180cf6242c5b0246b9288ad58b57ce0387ef94166e84284b", size = 49107 },
]

[[package]]
name = "h11"
version = "0.14.0"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/f5/38/3af3d3633a34a3316095b39c8e8fb4853a28a536e55d347bd8d8e9a14b03/h11-0.14.0.tar.gz", hash = "sha256:8f19fbbe99e72420ff35c00b27a34cb9937e902a8b810e2c88300c6f0a3b699d", size = 100418 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/95/04/ff642e65ad6b90db43e668d70ffb6736436c7ce41fcc549f4e9472234127/h11-0.14.0-py3-none-any.whl", hash = "sha256:e3fe4ac4b851c468cc8363d500db52c2ead036020723024a109d37346efaa761", size = 58259 },
]

[[package]]
name = "h2"
version = "4.2.0"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "hpack" },
    { name = "hyperframe" },
]
sdist = { url = "https://files.pythonhosted.org/packages/1b/38/d7f80fd13e6582fb8e0df8c9a653dcc02b03ca34f4d72f34869298c5baf8/h2-4.2.0.tar.gz", hash = "sha256:c8a52129695e88b1a0578d8d2cc6842bbd79128ac685463b887ee278126ad01f", size = 2150682 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d0/9e/984486f2d0a0bd2b024bf4bc1c62688fcafa9e61991f041fb0e2def4a982/h2-4.2.0-py3-none-any.whl", hash = "sha256:479a53ad425bb29af087f3458a61d30780bc818e4ebcf01f0b536ba916462ed0", size = 60957 },
]

[[package]]
name = "hpack"
version = "4.1.0"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/2c/48/71de9ed269fdae9c8057e5a4c0aa7402e8bb16f2c6e90b3aa53327b113f8/hpack-4.1.0.tar.gz", hash = "sha256:ec5eca154f7056aa06f196a557655c5b009b382873ac8d1e66e79e87535f1dca", size = 51276 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/07/c6/80c95b1b2b94682a72cbdbfb85b81ae2daffa4291fbfa1b1464502ede10d/hpack-4.1.0-py3-none-any.whl", hash = "sha256:157ac792668d995c657d93111f46b4535ed114f0c9c8d672271bbec7eae1b496", size = 34357 },
]

[[package]]
name = "httpcore"
version = "1.0.7"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "certifi" },
    { name = "h11" },
]
sdist = { url = "https://files.pythonhosted.org/packages/6a/41/d7d0a89eb493922c37d343b607bc1b5da7f5be7e383740b4753ad8943e90/httpcore-1.0.7.tar.gz", hash = "sha256:8551cb62a169ec7162ac7be8d4817d561f60e08eaa485234898414bb5a8a0b4c", size = 85196 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/87/f5/72347bc88306acb359581ac4d52f23c0ef445b57157adedb9aee0cd689d2/httpcore-1.0.7-py3-none-any.whl", hash = "sha256:a3fff8f43dc260d5bd363d9f9cf1830fa3a458b332856f34282de498ed420edd", size = 78551 },
]

[[package]]
name = "httpx"
version = "0.28.1"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "anyio" },
    { name = "certifi" },
    { name = "httpcore" },
    { name = "idna" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b1/df/48c586a5fe32a0f01324ee087459e112ebb7224f646c0b5023f5e79e9956/httpx-0.28.1.tar.gz", hash = "sha256:75e98c5f16b0f35b567856f597f06ff2270a374470a5c2392242528e3e3e42fc", size = 141406 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/2a/39/e50c7c3a983047577ee07d2a9e53faf5a69493943ec3f6a384bdc792deb2/httpx-0.28.1-py3-none-any.whl", hash = "sha256:d909fcccc110f8c7faf814ca82a9a4d816bc5a6dbfea25d6591d6985b8ba59ad", size = 73517 },
]

[package.optional-dependencies]
http2 = [
    { name = "h2" },
]

[[package]]
name = "httpx-sse"
version = "0.4.0"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/4c/60/8f4281fa9bbf3c8034fd54c0e7412e66edbab6bc74c4996bd616f8d0406e/httpx-sse-0.4.0.tar.gz", hash = "sha256:1e81a3a3070ce322add1d3529ed42eb5f70817f45ed6ec915ab753f961139721", size = 12624 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e1/9b/a181f281f65d776426002f330c31849b86b31fc9d848db62e16f03ff739f/httpx_sse-0.4.0-py3-none-any.whl", hash = "sha256:f329af6eae57eaa2bdfd962b42524764af68075ea87370a2de920af5341e318f", size = 7819 },
]

[[package]]
name = "hyperframe"
version = "6.1.0"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/02/e7/94f8232d4a74cc99514c13a9f995811485a6903d48e5d952771ef6322e30/hyperframe-6.1.0.tar.gz", hash = "sha256:f630908a00854a7adeabd6382b43923a4c4cd4b821fcb527e6ab9e15382a3b08", size = 26566 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/48/30/47d0bf6072f7252e6521f3447ccfa40b421b6824517f82854703d0f5a98b/hyperframe-6.1.0-py3-none-any.whl", hash = "sha256:b03380493a519fce58ea5af42e4a42317bf9bd425596f7a0835ffce80f1a42e5", size = 13007 },
]

[[package]]
name = "idna"
version = "3.10"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/f1/70/7703c29685631f5a7590aa73f1f1d3fa9a380e654b86af429e0934a32f7d/idna-3.10.tar.gz", hash = "sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9", size = 190490 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/76/c6/c88e154df9c4e1a2a66ccf0005a88dfb2650c1dffb6f5ce603dfbd452ce3/idna-3.10-py3-none-any.whl", hash = "sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3", size = 70442 },
]

[[package]]
name = "iniconfig"
version = "2.0.0"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/d7/4b/cbd8e699e64a6f16ca3a8220661b5f83792b3017d0f79807cb8708d33913/iniconfig-2.0.0.tar.gz", hash = "sha256:2d91e135bf72d31a410b17c16da610a82cb55f6b0477d1a902134b24a455b8b3", size = 4646 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ef/a6/62565a6e1cf69e10f5727360368e451d4b7f58beeac6173dc9db836a5b46/iniconfig-2.0.0-py3-none-any.whl", hash = "sha256:b6a85871a79d2e3b22d2d1b94ac2824226a63c6b741c88f7ae975f18b6778374", size = 5892 },
]

[[package]]
name = "markdown-it-py"
version = "3.0.0"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "mdurl" },
]
sdist = { url = "https://files.pythonhosted.org/packages/38/71/3b932df36c1a044d397a1f92d1cf91ee0a503d91e470cbd670aa66b07ed0/markdown-it-py-3.0.0.tar.gz", hash = "sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb", size = 74596 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/42/d7/1ec15b46af6af88f19b8e5ffea08fa375d433c998b8a7639e76935c14f1f/markdown_it_py-3.0.0-py3-none-any.whl", hash = "sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1", size = 87528 },
]

[[package]]
name = "mcp"
version = "1.2.1"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "anyio" },
    { name = "httpx" },
    { name = "httpx-sse" },
    { name = "pydantic" },
    { name = "pydantic-settings" },
    { name = "sse-starlette" },
    { name = "starlette" },
    { name = "uvicorn" },
]
sdist = { url = "https://files.pythonhosted.org/packages/fc/30/51e4555826126e3954fa2ab1e934bf74163c5fe05e98f38ca4d0f8abbf63/mcp-1.2.1.tar.gz", hash = "sha256:c9d43dbfe943aa1530e2be8f54b73af3ebfb071243827b4483d421684806cb45", size = 103968 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/4c/0d/6770742a84c8aa1d36c0d628896a380584c5759612e66af7446af07d8775/mcp-1.2.1-py3-none-any.whl", hash = "sha256:579bf9c9157850ebb1344f3ca6f7a3021b0123c44c9f089ef577a7062522f0fd", size = 66453 },
]

[package.optional-dependencies]
cli = [
    { name = "python-dotenv" },
    { name = "typer" },
]

[[package]]
name = "mdurl"
version = "0.1.2"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/d6/54/cfe61301667036ec958cb99bd3efefba235e65cdeb9c84d24a8293ba1d90/mdurl-0.1.2.tar.gz", hash = "sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba", size = 8729 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b3/38/89ba8ad64ae25be8de66a6d463314cf1eb366222074cfda9ee839c56a4b4/mdurl-0.1.2-py3-none-any.whl", hash = "sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8", size = 9979 },
]

[[package]]
name = "multidict"
version = "6.1.0"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/d6/be/504b89a5e9ca731cd47487e91c469064f8ae5af93b7259758dcfc2b9c848/multidict-6.1.0.tar.gz", hash = "sha256:22ae2ebf9b0c69d206c003e2f6a914ea33f0a932d4aa16f236afc049d9958f4a", size = 64002 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/fd/16/92057c74ba3b96d5e211b553895cd6dc7cc4d1e43d9ab8fafc727681ef71/multidict-6.1.0-cp312-cp312-macosx_10_9_universal2.whl", hash = "sha256:b04772ed465fa3cc947db808fa306d79b43e896beb677a56fb2347ca1a49c1fa", size = 48713 },
    { url = "https://files.pythonhosted.org/packages/94/3d/37d1b8893ae79716179540b89fc6a0ee56b4a65fcc0d63535c6f5d96f217/multidict-6.1.0-cp312-cp312-macosx_10_9_x86_64.whl", hash = "sha256:6180c0ae073bddeb5a97a38c03f30c233e0a4d39cd86166251617d1bbd0af436", size = 29516 },
    { url = "https://files.pythonhosted.org/packages/a2/12/adb6b3200c363062f805275b4c1e656be2b3681aada66c80129932ff0bae/multidict-6.1.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:071120490b47aa997cca00666923a83f02c7fbb44f71cf7f136df753f7fa8761", size = 29557 },
    { url = "https://files.pythonhosted.org/packages/47/e9/604bb05e6e5bce1e6a5cf80a474e0f072e80d8ac105f1b994a53e0b28c42/multidict-6.1.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:50b3a2710631848991d0bf7de077502e8994c804bb805aeb2925a981de58ec2e", size = 130170 },
    { url = "https://files.pythonhosted.org/packages/7e/13/9efa50801785eccbf7086b3c83b71a4fb501a4d43549c2f2f80b8787d69f/multidict-6.1.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:b58c621844d55e71c1b7f7c498ce5aa6985d743a1a59034c57a905b3f153c1ef", size = 134836 },
    { url = "https://files.pythonhosted.org/packages/bf/0f/93808b765192780d117814a6dfcc2e75de6dcc610009ad408b8814dca3ba/multidict-6.1.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:55b6d90641869892caa9ca42ff913f7ff1c5ece06474fbd32fb2cf6834726c95", size = 133475 },
    { url = "https://files.pythonhosted.org/packages/d3/c8/529101d7176fe7dfe1d99604e48d69c5dfdcadb4f06561f465c8ef12b4df/multidict-6.1.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:4b820514bfc0b98a30e3d85462084779900347e4d49267f747ff54060cc33925", size = 131049 },
    { url = "https://files.pythonhosted.org/packages/ca/0c/fc85b439014d5a58063e19c3a158a889deec399d47b5269a0f3b6a2e28bc/multidict-6.1.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:10a9b09aba0c5b48c53761b7c720aaaf7cf236d5fe394cd399c7ba662d5f9966", size = 120370 },
    { url = "https://files.pythonhosted.org/packages/db/46/d4416eb20176492d2258fbd47b4abe729ff3b6e9c829ea4236f93c865089/multidict-6.1.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:1e16bf3e5fc9f44632affb159d30a437bfe286ce9e02754759be5536b169b305", size = 125178 },
    { url = "https://files.pythonhosted.org/packages/5b/46/73697ad7ec521df7de5531a32780bbfd908ded0643cbe457f981a701457c/multidict-6.1.0-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:76f364861c3bfc98cbbcbd402d83454ed9e01a5224bb3a28bf70002a230f73e2", size = 119567 },
    { url = "https://files.pythonhosted.org/packages/cd/ed/51f060e2cb0e7635329fa6ff930aa5cffa17f4c7f5c6c3ddc3500708e2f2/multidict-6.1.0-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:820c661588bd01a0aa62a1283f20d2be4281b086f80dad9e955e690c75fb54a2", size = 129822 },
    { url = "https://files.pythonhosted.org/packages/df/9e/ee7d1954b1331da3eddea0c4e08d9142da5f14b1321c7301f5014f49d492/multidict-6.1.0-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:0e5f362e895bc5b9e67fe6e4ded2492d8124bdf817827f33c5b46c2fe3ffaca6", size = 128656 },
    { url = "https://files.pythonhosted.org/packages/77/00/8538f11e3356b5d95fa4b024aa566cde7a38aa7a5f08f4912b32a037c5dc/multidict-6.1.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:3ec660d19bbc671e3a6443325f07263be452c453ac9e512f5eb935e7d4ac28b3", size = 125360 },
    { url = "https://files.pythonhosted.org/packages/be/05/5d334c1f2462d43fec2363cd00b1c44c93a78c3925d952e9a71caf662e96/multidict-6.1.0-cp312-cp312-win32.whl", hash = "sha256:58130ecf8f7b8112cdb841486404f1282b9c86ccb30d3519faf301b2e5659133", size = 26382 },
    { url = "https://files.pythonhosted.org/packages/a3/bf/f332a13486b1ed0496d624bcc7e8357bb8053823e8cd4b9a18edc1d97e73/multidict-6.1.0-cp312-cp312-win_amd64.whl", hash = "sha256:188215fc0aafb8e03341995e7c4797860181562380f81ed0a87ff455b70bf1f1", size = 28529 },
    { url = "https://files.pythonhosted.org/packages/22/67/1c7c0f39fe069aa4e5d794f323be24bf4d33d62d2a348acdb7991f8f30db/multidict-6.1.0-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:d569388c381b24671589335a3be6e1d45546c2988c2ebe30fdcada8457a31008", size = 48771 },
    { url = "https://files.pythonhosted.org/packages/3c/25/c186ee7b212bdf0df2519eacfb1981a017bda34392c67542c274651daf23/multidict-6.1.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:052e10d2d37810b99cc170b785945421141bf7bb7d2f8799d431e7db229c385f", size = 29533 },
    { url = "https://files.pythonhosted.org/packages/67/5e/04575fd837e0958e324ca035b339cea174554f6f641d3fb2b4f2e7ff44a2/multidict-6.1.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:f90c822a402cb865e396a504f9fc8173ef34212a342d92e362ca498cad308e28", size = 29595 },
    { url = "https://files.pythonhosted.org/packages/d3/b2/e56388f86663810c07cfe4a3c3d87227f3811eeb2d08450b9e5d19d78876/multidict-6.1.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:b225d95519a5bf73860323e633a664b0d85ad3d5bede6d30d95b35d4dfe8805b", size = 130094 },
    { url = "https://files.pythonhosted.org/packages/6c/ee/30ae9b4186a644d284543d55d491fbd4239b015d36b23fea43b4c94f7052/multidict-6.1.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:23bfd518810af7de1116313ebd9092cb9aa629beb12f6ed631ad53356ed6b86c", size = 134876 },
    { url = "https://files.pythonhosted.org/packages/84/c7/70461c13ba8ce3c779503c70ec9d0345ae84de04521c1f45a04d5f48943d/multidict-6.1.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:5c09fcfdccdd0b57867577b719c69e347a436b86cd83747f179dbf0cc0d4c1f3", size = 133500 },
    { url = "https://files.pythonhosted.org/packages/4a/9f/002af221253f10f99959561123fae676148dd730e2daa2cd053846a58507/multidict-6.1.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:bf6bea52ec97e95560af5ae576bdac3aa3aae0b6758c6efa115236d9e07dae44", size = 131099 },
    { url = "https://files.pythonhosted.org/packages/82/42/d1c7a7301d52af79d88548a97e297f9d99c961ad76bbe6f67442bb77f097/multidict-6.1.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:57feec87371dbb3520da6192213c7d6fc892d5589a93db548331954de8248fd2", size = 120403 },
    { url = "https://files.pythonhosted.org/packages/68/f3/471985c2c7ac707547553e8f37cff5158030d36bdec4414cb825fbaa5327/multidict-6.1.0-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:0c3f390dc53279cbc8ba976e5f8035eab997829066756d811616b652b00a23a3", size = 125348 },
    { url = "https://files.pythonhosted.org/packages/67/2c/e6df05c77e0e433c214ec1d21ddd203d9a4770a1f2866a8ca40a545869a0/multidict-6.1.0-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:59bfeae4b25ec05b34f1956eaa1cb38032282cd4dfabc5056d0a1ec4d696d3aa", size = 119673 },
    { url = "https://files.pythonhosted.org/packages/c5/cd/bc8608fff06239c9fb333f9db7743a1b2eafe98c2666c9a196e867a3a0a4/multidict-6.1.0-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:b2f59caeaf7632cc633b5cf6fc449372b83bbdf0da4ae04d5be36118e46cc0aa", size = 129927 },
    { url = "https://files.pythonhosted.org/packages/44/8e/281b69b7bc84fc963a44dc6e0bbcc7150e517b91df368a27834299a526ac/multidict-6.1.0-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:37bb93b2178e02b7b618893990941900fd25b6b9ac0fa49931a40aecdf083fe4", size = 128711 },
    { url = "https://files.pythonhosted.org/packages/12/a4/63e7cd38ed29dd9f1881d5119f272c898ca92536cdb53ffe0843197f6c85/multidict-6.1.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:4e9f48f58c2c523d5a06faea47866cd35b32655c46b443f163d08c6d0ddb17d6", size = 125519 },
    { url = "https://files.pythonhosted.org/packages/38/e0/4f5855037a72cd8a7a2f60a3952d9aa45feedb37ae7831642102604e8a37/multidict-6.1.0-cp313-cp313-win32.whl", hash = "sha256:3a37ffb35399029b45c6cc33640a92bef403c9fd388acce75cdc88f58bd19a81", size = 26426 },
    { url = "https://files.pythonhosted.org/packages/7e/a5/17ee3a4db1e310b7405f5d25834460073a8ccd86198ce044dfaf69eac073/multidict-6.1.0-cp313-cp313-win_amd64.whl", hash = "sha256:e9aa71e15d9d9beaad2c6b9319edcdc0a49a43ef5c0a4c8265ca9ee7d6c67774", size = 28531 },
    { url = "https://files.pythonhosted.org/packages/99/b7/b9e70fde2c0f0c9af4cc5277782a89b66d35948ea3369ec9f598358c3ac5/multidict-6.1.0-py3-none-any.whl", hash = "sha256:48e171e52d1c4d33888e529b999e5900356b9ae588c2f09a52dcefb158b27506", size = 10051 },
]

[[package]]
name = "packaging"
version = "24.2"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/d0/63/68dbb6eb2de9cb10ee4c9c14a0148804425e13c4fb20d61cce69f53106da/packaging-24.2.tar.gz", hash = "sha256:c228a6dc5e932d346bc5739379109d49e8853dd8223571c7c5b55260edc0b97f", size = 163950 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/88/ef/eb23f262cca3c0c4eb7ab1933c3b1f03d021f2c48f54763065b6f0e321be/packaging-24.2-py3-none-any.whl", hash = "sha256:09abb1bccd265c01f4a3aa3f7a7db064b36514d2cba19a2f694fe6150451a759", size = 65451 },
]

[[package]]
name = "pluggy"
version = "1.5.0"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/96/2d/02d4312c973c6050a18b314a5ad0b3210edb65a906f868e31c111dede4a6/pluggy-1.5.0.tar.gz", hash = "sha256:2cffa88e94fdc978c4c574f15f9e59b7f4201d439195c3715ca9e2486f1d0cf1", size = 67955 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/88/5f/e351af9a41f866ac3f1fac4ca0613908d9a41741cfcf2228f4ad853b697d/pluggy-1.5.0-py3-none-any.whl", hash = "sha256:44e1ad92c8ca002de6377e165f3e0f1be63266ab4d554740532335b9d75ea669", size = 20556 },
]

[[package]]
name = "postgrest"
version = "0.19.3"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "deprecation" },
    { name = "httpx", extra = ["http2"] },
    { name = "pydantic" },
]
sdist = { url = "https://files.pythonhosted.org/packages/63/80/b0306469da7ad89db165ce4c76de2f12eccc7fadb900cab9cbaff760a587/postgrest-0.19.3.tar.gz", hash = "sha256:28a70f03bf3a975aa865a10487b1ce09b7195f56453f7c318a70d3117a3d323c", size = 15095 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b0/82/f1825a85745912cdd8956aad8ebc4b797d2f891c380c2b8825b35914dbd1/postgrest-0.19.3-py3-none-any.whl", hash = "sha256:03a7e638962454d10bb712c35e63a8a4bc452917917a4e9eb7427bd5b3c6c485", size = 22198 },
]

[[package]]
name = "propcache"
version = "0.2.1"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/20/c8/2a13f78d82211490855b2fb303b6721348d0787fdd9a12ac46d99d3acde1/propcache-0.2.1.tar.gz", hash = "sha256:3f77ce728b19cb537714499928fe800c3dda29e8d9428778fc7c186da4c09a64", size = 41735 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/4c/28/1d205fe49be8b1b4df4c50024e62480a442b1a7b818e734308bb0d17e7fb/propcache-0.2.1-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:081a430aa8d5e8876c6909b67bd2d937bfd531b0382d3fdedb82612c618bc41a", size = 79588 },
    { url = "https://files.pythonhosted.org/packages/21/ee/fc4d893f8d81cd4971affef2a6cb542b36617cd1d8ce56b406112cb80bf7/propcache-0.2.1-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:d2ccec9ac47cf4e04897619c0e0c1a48c54a71bdf045117d3a26f80d38ab1fb0", size = 45825 },
    { url = "https://files.pythonhosted.org/packages/4a/de/bbe712f94d088da1d237c35d735f675e494a816fd6f54e9db2f61ef4d03f/propcache-0.2.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:14d86fe14b7e04fa306e0c43cdbeebe6b2c2156a0c9ce56b815faacc193e320d", size = 45357 },
    { url = "https://files.pythonhosted.org/packages/7f/14/7ae06a6cf2a2f1cb382586d5a99efe66b0b3d0c6f9ac2f759e6f7af9d7cf/propcache-0.2.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:049324ee97bb67285b49632132db351b41e77833678432be52bdd0289c0e05e4", size = 241869 },
    { url = "https://files.pythonhosted.org/packages/cc/59/227a78be960b54a41124e639e2c39e8807ac0c751c735a900e21315f8c2b/propcache-0.2.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:1cd9a1d071158de1cc1c71a26014dcdfa7dd3d5f4f88c298c7f90ad6f27bb46d", size = 247884 },
    { url = "https://files.pythonhosted.org/packages/84/58/f62b4ffaedf88dc1b17f04d57d8536601e4e030feb26617228ef930c3279/propcache-0.2.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:98110aa363f1bb4c073e8dcfaefd3a5cea0f0834c2aab23dda657e4dab2f53b5", size = 248486 },
    { url = "https://files.pythonhosted.org/packages/1c/07/ebe102777a830bca91bbb93e3479cd34c2ca5d0361b83be9dbd93104865e/propcache-0.2.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:647894f5ae99c4cf6bb82a1bb3a796f6e06af3caa3d32e26d2350d0e3e3faf24", size = 243649 },
    { url = "https://files.pythonhosted.org/packages/ed/bc/4f7aba7f08f520376c4bb6a20b9a981a581b7f2e385fa0ec9f789bb2d362/propcache-0.2.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:bfd3223c15bebe26518d58ccf9a39b93948d3dcb3e57a20480dfdd315356baff", size = 229103 },
    { url = "https://files.pythonhosted.org/packages/fe/d5/04ac9cd4e51a57a96f78795e03c5a0ddb8f23ec098b86f92de028d7f2a6b/propcache-0.2.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:d71264a80f3fcf512eb4f18f59423fe82d6e346ee97b90625f283df56aee103f", size = 226607 },
    { url = "https://files.pythonhosted.org/packages/e3/f0/24060d959ea41d7a7cc7fdbf68b31852331aabda914a0c63bdb0e22e96d6/propcache-0.2.1-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:e73091191e4280403bde6c9a52a6999d69cdfde498f1fdf629105247599b57ec", size = 221153 },
    { url = "https://files.pythonhosted.org/packages/77/a7/3ac76045a077b3e4de4859a0753010765e45749bdf53bd02bc4d372da1a0/propcache-0.2.1-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:3935bfa5fede35fb202c4b569bb9c042f337ca4ff7bd540a0aa5e37131659348", size = 222151 },
    { url = "https://files.pythonhosted.org/packages/e7/af/5e29da6f80cebab3f5a4dcd2a3240e7f56f2c4abf51cbfcc99be34e17f0b/propcache-0.2.1-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:f508b0491767bb1f2b87fdfacaba5f7eddc2f867740ec69ece6d1946d29029a6", size = 233812 },
    { url = "https://files.pythonhosted.org/packages/8c/89/ebe3ad52642cc5509eaa453e9f4b94b374d81bae3265c59d5c2d98efa1b4/propcache-0.2.1-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:1672137af7c46662a1c2be1e8dc78cb6d224319aaa40271c9257d886be4363a6", size = 238829 },
    { url = "https://files.pythonhosted.org/packages/e9/2f/6b32f273fa02e978b7577159eae7471b3cfb88b48563b1c2578b2d7ca0bb/propcache-0.2.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:b74c261802d3d2b85c9df2dfb2fa81b6f90deeef63c2db9f0e029a3cac50b518", size = 230704 },
    { url = "https://files.pythonhosted.org/packages/5c/2e/f40ae6ff5624a5f77edd7b8359b208b5455ea113f68309e2b00a2e1426b6/propcache-0.2.1-cp312-cp312-win32.whl", hash = "sha256:d09c333d36c1409d56a9d29b3a1b800a42c76a57a5a8907eacdbce3f18768246", size = 40050 },
    { url = "https://files.pythonhosted.org/packages/3b/77/a92c3ef994e47180862b9d7d11e37624fb1c00a16d61faf55115d970628b/propcache-0.2.1-cp312-cp312-win_amd64.whl", hash = "sha256:c214999039d4f2a5b2073ac506bba279945233da8c786e490d411dfc30f855c1", size = 44117 },
    { url = "https://files.pythonhosted.org/packages/0f/2a/329e0547cf2def8857157f9477669043e75524cc3e6251cef332b3ff256f/propcache-0.2.1-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:aca405706e0b0a44cc6bfd41fbe89919a6a56999157f6de7e182a990c36e37bc", size = 77002 },
    { url = "https://files.pythonhosted.org/packages/12/2d/c4df5415e2382f840dc2ecbca0eeb2293024bc28e57a80392f2012b4708c/propcache-0.2.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:12d1083f001ace206fe34b6bdc2cb94be66d57a850866f0b908972f90996b3e9", size = 44639 },
    { url = "https://files.pythonhosted.org/packages/d0/5a/21aaa4ea2f326edaa4e240959ac8b8386ea31dedfdaa636a3544d9e7a408/propcache-0.2.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:d93f3307ad32a27bda2e88ec81134b823c240aa3abb55821a8da553eed8d9439", size = 44049 },
    { url = "https://files.pythonhosted.org/packages/4e/3e/021b6cd86c0acc90d74784ccbb66808b0bd36067a1bf3e2deb0f3845f618/propcache-0.2.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:ba278acf14471d36316159c94a802933d10b6a1e117b8554fe0d0d9b75c9d536", size = 224819 },
    { url = "https://files.pythonhosted.org/packages/3c/57/c2fdeed1b3b8918b1770a133ba5c43ad3d78e18285b0c06364861ef5cc38/propcache-0.2.1-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:4e6281aedfca15301c41f74d7005e6e3f4ca143584ba696ac69df4f02f40d629", size = 229625 },
    { url = "https://files.pythonhosted.org/packages/9d/81/70d4ff57bf2877b5780b466471bebf5892f851a7e2ca0ae7ffd728220281/propcache-0.2.1-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:5b750a8e5a1262434fb1517ddf64b5de58327f1adc3524a5e44c2ca43305eb0b", size = 232934 },
    { url = "https://files.pythonhosted.org/packages/3c/b9/bb51ea95d73b3fb4100cb95adbd4e1acaf2cbb1fd1083f5468eeb4a099a8/propcache-0.2.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:bf72af5e0fb40e9babf594308911436c8efde3cb5e75b6f206c34ad18be5c052", size = 227361 },
    { url = "https://files.pythonhosted.org/packages/f1/20/3c6d696cd6fd70b29445960cc803b1851a1131e7a2e4ee261ee48e002bcd/propcache-0.2.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:b2d0a12018b04f4cb820781ec0dffb5f7c7c1d2a5cd22bff7fb055a2cb19ebce", size = 213904 },
    { url = "https://files.pythonhosted.org/packages/a1/cb/1593bfc5ac6d40c010fa823f128056d6bc25b667f5393781e37d62f12005/propcache-0.2.1-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:e800776a79a5aabdb17dcc2346a7d66d0777e942e4cd251defeb084762ecd17d", size = 212632 },
    { url = "https://files.pythonhosted.org/packages/6d/5c/e95617e222be14a34c709442a0ec179f3207f8a2b900273720501a70ec5e/propcache-0.2.1-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:4160d9283bd382fa6c0c2b5e017acc95bc183570cd70968b9202ad6d8fc48dce", size = 207897 },
    { url = "https://files.pythonhosted.org/packages/8e/3b/56c5ab3dc00f6375fbcdeefdede5adf9bee94f1fab04adc8db118f0f9e25/propcache-0.2.1-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:30b43e74f1359353341a7adb783c8f1b1c676367b011709f466f42fda2045e95", size = 208118 },
    { url = "https://files.pythonhosted.org/packages/86/25/d7ef738323fbc6ebcbce33eb2a19c5e07a89a3df2fded206065bd5e868a9/propcache-0.2.1-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:58791550b27d5488b1bb52bc96328456095d96206a250d28d874fafe11b3dfaf", size = 217851 },
    { url = "https://files.pythonhosted.org/packages/b3/77/763e6cef1852cf1ba740590364ec50309b89d1c818e3256d3929eb92fabf/propcache-0.2.1-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:0f022d381747f0dfe27e99d928e31bc51a18b65bb9e481ae0af1380a6725dd1f", size = 222630 },
    { url = "https://files.pythonhosted.org/packages/4f/e9/0f86be33602089c701696fbed8d8c4c07b6ee9605c5b7536fd27ed540c5b/propcache-0.2.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:297878dc9d0a334358f9b608b56d02e72899f3b8499fc6044133f0d319e2ec30", size = 216269 },
    { url = "https://files.pythonhosted.org/packages/cc/02/5ac83217d522394b6a2e81a2e888167e7ca629ef6569a3f09852d6dcb01a/propcache-0.2.1-cp313-cp313-win32.whl", hash = "sha256:ddfab44e4489bd79bda09d84c430677fc7f0a4939a73d2bba3073036f487a0a6", size = 39472 },
    { url = "https://files.pythonhosted.org/packages/f4/33/d6f5420252a36034bc8a3a01171bc55b4bff5df50d1c63d9caa50693662f/propcache-0.2.1-cp313-cp313-win_amd64.whl", hash = "sha256:556fc6c10989f19a179e4321e5d678db8eb2924131e64652a51fe83e4c3db0e1", size = 43363 },
    { url = "https://files.pythonhosted.org/packages/41/b6/c5319caea262f4821995dca2107483b94a3345d4607ad797c76cb9c36bcc/propcache-0.2.1-py3-none-any.whl", hash = "sha256:52277518d6aae65536e9cea52d4e7fd2f7a66f4aa2d30ed3f2fcea620ace3c54", size = 11818 },
]

[[package]]
name = "psycopg2"
version = "2.9.10"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/62/51/2007ea29e605957a17ac6357115d0c1a1b60c8c984951c19419b3474cdfd/psycopg2-2.9.10.tar.gz", hash = "sha256:12ec0b40b0273f95296233e8750441339298e6a572f7039da5b260e3c8b60e11", size = 385672 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/3d/16/4623fad6076448df21c1a870c93a9774ad8a7b4dd1660223b59082dd8fec/psycopg2-2.9.10-cp312-cp312-win32.whl", hash = "sha256:65a63d7ab0e067e2cdb3cf266de39663203d38d6a8ed97f5ca0cb315c73fe067", size = 1025113 },
    { url = "https://files.pythonhosted.org/packages/66/de/baed128ae0fc07460d9399d82e631ea31a1f171c0c4ae18f9808ac6759e3/psycopg2-2.9.10-cp312-cp312-win_amd64.whl", hash = "sha256:4a579d6243da40a7b3182e0430493dbd55950c493d8c68f4eec0b302f6bbf20e", size = 1163951 },
    { url = "https://files.pythonhosted.org/packages/ae/49/a6cfc94a9c483b1fa401fbcb23aca7892f60c7269c5ffa2ac408364f80dc/psycopg2-2.9.10-cp313-cp313-win_amd64.whl", hash = "sha256:91fd603a2155da8d0cfcdbf8ab24a2d54bca72795b90d2a3ed2b6da8d979dee2", size = 2569060 },
]

[[package]]
name = "pydantic"
version = "2.10.6"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "annotated-types" },
    { name = "pydantic-core" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b7/ae/d5220c5c52b158b1de7ca89fc5edb72f304a70a4c540c84c8844bf4008de/pydantic-2.10.6.tar.gz", hash = "sha256:ca5daa827cce33de7a42be142548b0096bf05a7e7b365aebfa5f8eeec7128236", size = 761681 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f4/3c/8cc1cc84deffa6e25d2d0c688ebb80635dfdbf1dbea3e30c541c8cf4d860/pydantic-2.10.6-py3-none-any.whl", hash = "sha256:427d664bf0b8a2b34ff5dd0f5a18df00591adcee7198fbd71981054cef37b584", size = 431696 },
]

[[package]]
name = "pydantic-core"
version = "2.27.2"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/fc/01/f3e5ac5e7c25833db5eb555f7b7ab24cd6f8c322d3a3ad2d67a952dc0abc/pydantic_core-2.27.2.tar.gz", hash = "sha256:eb026e5a4c1fee05726072337ff51d1efb6f59090b7da90d30ea58625b1ffb39", size = 413443 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d6/74/51c8a5482ca447871c93e142d9d4a92ead74de6c8dc5e66733e22c9bba89/pydantic_core-2.27.2-cp312-cp312-macosx_10_12_x86_64.whl", hash = "sha256:9e0c8cfefa0ef83b4da9588448b6d8d2a2bf1a53c3f1ae5fca39eb3061e2f0b0", size = 1893127 },
    { url = "https://files.pythonhosted.org/packages/d3/f3/c97e80721735868313c58b89d2de85fa80fe8dfeeed84dc51598b92a135e/pydantic_core-2.27.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:83097677b8e3bd7eaa6775720ec8e0405f1575015a463285a92bfdfe254529ef", size = 1811340 },
    { url = "https://files.pythonhosted.org/packages/9e/91/840ec1375e686dbae1bd80a9e46c26a1e0083e1186abc610efa3d9a36180/pydantic_core-2.27.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:172fce187655fece0c90d90a678424b013f8fbb0ca8b036ac266749c09438cb7", size = 1822900 },
    { url = "https://files.pythonhosted.org/packages/f6/31/4240bc96025035500c18adc149aa6ffdf1a0062a4b525c932065ceb4d868/pydantic_core-2.27.2-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:519f29f5213271eeeeb3093f662ba2fd512b91c5f188f3bb7b27bc5973816934", size = 1869177 },
    { url = "https://files.pythonhosted.org/packages/fa/20/02fbaadb7808be578317015c462655c317a77a7c8f0ef274bc016a784c54/pydantic_core-2.27.2-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:05e3a55d124407fffba0dd6b0c0cd056d10e983ceb4e5dbd10dda135c31071d6", size = 2038046 },
    { url = "https://files.pythonhosted.org/packages/06/86/7f306b904e6c9eccf0668248b3f272090e49c275bc488a7b88b0823444a4/pydantic_core-2.27.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:9c3ed807c7b91de05e63930188f19e921d1fe90de6b4f5cd43ee7fcc3525cb8c", size = 2685386 },
    { url = "https://files.pythonhosted.org/packages/8d/f0/49129b27c43396581a635d8710dae54a791b17dfc50c70164866bbf865e3/pydantic_core-2.27.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:6fb4aadc0b9a0c063206846d603b92030eb6f03069151a625667f982887153e2", size = 1997060 },
    { url = "https://files.pythonhosted.org/packages/0d/0f/943b4af7cd416c477fd40b187036c4f89b416a33d3cc0ab7b82708a667aa/pydantic_core-2.27.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:28ccb213807e037460326424ceb8b5245acb88f32f3d2777427476e1b32c48c4", size = 2004870 },
    { url = "https://files.pythonhosted.org/packages/35/40/aea70b5b1a63911c53a4c8117c0a828d6790483f858041f47bab0b779f44/pydantic_core-2.27.2-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:de3cd1899e2c279b140adde9357c4495ed9d47131b4a4eaff9052f23398076b3", size = 1999822 },
    { url = "https://files.pythonhosted.org/packages/f2/b3/807b94fd337d58effc5498fd1a7a4d9d59af4133e83e32ae39a96fddec9d/pydantic_core-2.27.2-cp312-cp312-musllinux_1_1_armv7l.whl", hash = "sha256:220f892729375e2d736b97d0e51466252ad84c51857d4d15f5e9692f9ef12be4", size = 2130364 },
    { url = "https://files.pythonhosted.org/packages/fc/df/791c827cd4ee6efd59248dca9369fb35e80a9484462c33c6649a8d02b565/pydantic_core-2.27.2-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:a0fcd29cd6b4e74fe8ddd2c90330fd8edf2e30cb52acda47f06dd615ae72da57", size = 2158303 },
    { url = "https://files.pythonhosted.org/packages/9b/67/4e197c300976af185b7cef4c02203e175fb127e414125916bf1128b639a9/pydantic_core-2.27.2-cp312-cp312-win32.whl", hash = "sha256:1e2cb691ed9834cd6a8be61228471d0a503731abfb42f82458ff27be7b2186fc", size = 1834064 },
    { url = "https://files.pythonhosted.org/packages/1f/ea/cd7209a889163b8dcca139fe32b9687dd05249161a3edda62860430457a5/pydantic_core-2.27.2-cp312-cp312-win_amd64.whl", hash = "sha256:cc3f1a99a4f4f9dd1de4fe0312c114e740b5ddead65bb4102884b384c15d8bc9", size = 1989046 },
    { url = "https://files.pythonhosted.org/packages/bc/49/c54baab2f4658c26ac633d798dab66b4c3a9bbf47cff5284e9c182f4137a/pydantic_core-2.27.2-cp312-cp312-win_arm64.whl", hash = "sha256:3911ac9284cd8a1792d3cb26a2da18f3ca26c6908cc434a18f730dc0db7bfa3b", size = 1885092 },
    { url = "https://files.pythonhosted.org/packages/41/b1/9bc383f48f8002f99104e3acff6cba1231b29ef76cfa45d1506a5cad1f84/pydantic_core-2.27.2-cp313-cp313-macosx_10_12_x86_64.whl", hash = "sha256:7d14bd329640e63852364c306f4d23eb744e0f8193148d4044dd3dacdaacbd8b", size = 1892709 },
    { url = "https://files.pythonhosted.org/packages/10/6c/e62b8657b834f3eb2961b49ec8e301eb99946245e70bf42c8817350cbefc/pydantic_core-2.27.2-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:82f91663004eb8ed30ff478d77c4d1179b3563df6cdb15c0817cd1cdaf34d154", size = 1811273 },
    { url = "https://files.pythonhosted.org/packages/ba/15/52cfe49c8c986e081b863b102d6b859d9defc63446b642ccbbb3742bf371/pydantic_core-2.27.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:71b24c7d61131bb83df10cc7e687433609963a944ccf45190cfc21e0887b08c9", size = 1823027 },
    { url = "https://files.pythonhosted.org/packages/b1/1c/b6f402cfc18ec0024120602bdbcebc7bdd5b856528c013bd4d13865ca473/pydantic_core-2.27.2-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:fa8e459d4954f608fa26116118bb67f56b93b209c39b008277ace29937453dc9", size = 1868888 },
    { url = "https://files.pythonhosted.org/packages/bd/7b/8cb75b66ac37bc2975a3b7de99f3c6f355fcc4d89820b61dffa8f1e81677/pydantic_core-2.27.2-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:ce8918cbebc8da707ba805b7fd0b382816858728ae7fe19a942080c24e5b7cd1", size = 2037738 },
    { url = "https://files.pythonhosted.org/packages/c8/f1/786d8fe78970a06f61df22cba58e365ce304bf9b9f46cc71c8c424e0c334/pydantic_core-2.27.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:eda3f5c2a021bbc5d976107bb302e0131351c2ba54343f8a496dc8783d3d3a6a", size = 2685138 },
    { url = "https://files.pythonhosted.org/packages/a6/74/d12b2cd841d8724dc8ffb13fc5cef86566a53ed358103150209ecd5d1999/pydantic_core-2.27.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:bd8086fa684c4775c27f03f062cbb9eaa6e17f064307e86b21b9e0abc9c0f02e", size = 1997025 },
    { url = "https://files.pythonhosted.org/packages/a0/6e/940bcd631bc4d9a06c9539b51f070b66e8f370ed0933f392db6ff350d873/pydantic_core-2.27.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:8d9b3388db186ba0c099a6d20f0604a44eabdeef1777ddd94786cdae158729e4", size = 2004633 },
    { url = "https://files.pythonhosted.org/packages/50/cc/a46b34f1708d82498c227d5d80ce615b2dd502ddcfd8376fc14a36655af1/pydantic_core-2.27.2-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:7a66efda2387de898c8f38c0cf7f14fca0b51a8ef0b24bfea5849f1b3c95af27", size = 1999404 },
    { url = "https://files.pythonhosted.org/packages/ca/2d/c365cfa930ed23bc58c41463bae347d1005537dc8db79e998af8ba28d35e/pydantic_core-2.27.2-cp313-cp313-musllinux_1_1_armv7l.whl", hash = "sha256:18a101c168e4e092ab40dbc2503bdc0f62010e95d292b27827871dc85450d7ee", size = 2130130 },
    { url = "https://files.pythonhosted.org/packages/f4/d7/eb64d015c350b7cdb371145b54d96c919d4db516817f31cd1c650cae3b21/pydantic_core-2.27.2-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:ba5dd002f88b78a4215ed2f8ddbdf85e8513382820ba15ad5ad8955ce0ca19a1", size = 2157946 },
    { url = "https://files.pythonhosted.org/packages/a4/99/bddde3ddde76c03b65dfd5a66ab436c4e58ffc42927d4ff1198ffbf96f5f/pydantic_core-2.27.2-cp313-cp313-win32.whl", hash = "sha256:1ebaf1d0481914d004a573394f4be3a7616334be70261007e47c2a6fe7e50130", size = 1834387 },
    { url = "https://files.pythonhosted.org/packages/71/47/82b5e846e01b26ac6f1893d3c5f9f3a2eb6ba79be26eef0b759b4fe72946/pydantic_core-2.27.2-cp313-cp313-win_amd64.whl", hash = "sha256:953101387ecf2f5652883208769a79e48db18c6df442568a0b5ccd8c2723abee", size = 1990453 },
    { url = "https://files.pythonhosted.org/packages/51/b2/b2b50d5ecf21acf870190ae5d093602d95f66c9c31f9d5de6062eb329ad1/pydantic_core-2.27.2-cp313-cp313-win_arm64.whl", hash = "sha256:ac4dbfd1691affb8f48c2c13241a2e3b60ff23247cbcf981759c768b6633cf8b", size = 1885186 },
]

[[package]]
name = "pydantic-settings"
version = "2.7.1"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "pydantic" },
    { name = "python-dotenv" },
]
sdist = { url = "https://files.pythonhosted.org/packages/73/7b/c58a586cd7d9ac66d2ee4ba60ca2d241fa837c02bca9bea80a9a8c3d22a9/pydantic_settings-2.7.1.tar.gz", hash = "sha256:10c9caad35e64bfb3c2fbf70a078c0e25cc92499782e5200747f942a065dec93", size = 79920 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b4/46/93416fdae86d40879714f72956ac14df9c7b76f7d41a4d68aa9f71a0028b/pydantic_settings-2.7.1-py3-none-any.whl", hash = "sha256:590be9e6e24d06db33a4262829edef682500ef008565a969c73d39d5f8bfb3fd", size = 29718 },
]

[[package]]
name = "pygments"
version = "2.19.1"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/7c/2d/c3338d48ea6cc0feb8446d8e6937e1408088a72a39937982cc6111d17f84/pygments-2.19.1.tar.gz", hash = "sha256:61c16d2a8576dc0649d9f39e089b5f02bcd27fba10d8fb4dcc28173f7a45151f", size = 4968581 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8a/0b/9fcc47d19c48b59121088dd6da2488a49d5f72dacf8262e2790a1d2c7d15/pygments-2.19.1-py3-none-any.whl", hash = "sha256:9ea1544ad55cecf4b8242fab6dd35a93bbce657034b0611ee383099054ab6d8c", size = 1225293 },
]

[[package]]
name = "pytest"
version = "8.3.4"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
    { name = "iniconfig" },
    { name = "packaging" },
    { name = "pluggy" },
]
sdist = { url = "https://files.pythonhosted.org/packages/05/35/30e0d83068951d90a01852cb1cef56e5d8a09d20c7f511634cc2f7e0372a/pytest-8.3.4.tar.gz", hash = "sha256:965370d062bce11e73868e0335abac31b4d3de0e82f4007408d242b4f8610761", size = 1445919 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/11/92/76a1c94d3afee238333bc0a42b82935dd8f9cf8ce9e336ff87ee14d9e1cf/pytest-8.3.4-py3-none-any.whl", hash = "sha256:50e16d954148559c9a74109af1eaf0c945ba2d8f30f0a3d3335edde19788b6f6", size = 343083 },
]

[[package]]
name = "pytest-asyncio"
version = "0.25.3"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "pytest" },
]
sdist = { url = "https://files.pythonhosted.org/packages/f2/a8/ecbc8ede70921dd2f544ab1cadd3ff3bf842af27f87bbdea774c7baa1d38/pytest_asyncio-0.25.3.tar.gz", hash = "sha256:fc1da2cf9f125ada7e710b4ddad05518d4cee187ae9412e9ac9271003497f07a", size = 54239 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/67/17/3493c5624e48fd97156ebaec380dcaafee9506d7e2c46218ceebbb57d7de/pytest_asyncio-0.25.3-py3-none-any.whl", hash = "sha256:9e89518e0f9bd08928f97a3482fdc4e244df17529460bc038291ccaf8f85c7c3", size = 19467 },
]

[[package]]
name = "pytest-mock"
version = "3.14.0"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "pytest" },
]
sdist = { url = "https://files.pythonhosted.org/packages/c6/90/a955c3ab35ccd41ad4de556596fa86685bf4fc5ffcc62d22d856cfd4e29a/pytest-mock-3.14.0.tar.gz", hash = "sha256:2719255a1efeceadbc056d6bf3df3d1c5015530fb40cf347c0f9afac88410bd0", size = 32814 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f2/3b/b26f90f74e2986a82df6e7ac7e319b8ea7ccece1caec9f8ab6104dc70603/pytest_mock-3.14.0-py3-none-any.whl", hash = "sha256:0b72c38033392a5f4621342fe11e9219ac11ec9d375f8e2a0c164539e0d70f6f", size = 9863 },
]

[[package]]
name = "python-dateutil"
version = "2.9.0.post0"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "six" },
]
sdist = { url = "https://files.pythonhosted.org/packages/66/c0/0c8b6ad9f17a802ee498c46e004a0eb49bc148f2fd230864601a86dcf6db/python-dateutil-2.9.0.post0.tar.gz", hash = "sha256:37dd54208da7e1cd875388217d5e00ebd4179249f90fb72437e91a35459a0ad3", size = 342432 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ec/57/56b9bcc3c9c6a792fcbaf139543cee77261f3651ca9da0c93f5c1221264b/python_dateutil-2.9.0.post0-py2.py3-none-any.whl", hash = "sha256:a8b2bc7bffae282281c8140a97d3aa9c14da0b136dfe83f850eea9a5f7470427", size = 229892 },
]

[[package]]
name = "python-dotenv"
version = "1.0.1"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/bc/57/e84d88dfe0aec03b7a2d4327012c1627ab5f03652216c63d49846d7a6c58/python-dotenv-1.0.1.tar.gz", hash = "sha256:e324ee90a023d808f1959c46bcbc04446a10ced277783dc6ee09987c37ec10ca", size = 39115 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6a/3e/b68c118422ec867fa7ab88444e1274aa40681c606d59ac27de5a5588f082/python_dotenv-1.0.1-py3-none-any.whl", hash = "sha256:f7b63ef50f1b690dddf550d03497b66d609393b40b564ed0d674909a68ebf16a", size = 19863 },
]

[[package]]
name = "realtime"
version = "2.3.0"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "aiohttp" },
    { name = "python-dateutil" },
    { name = "typing-extensions" },
    { name = "websockets" },
]
sdist = { url = "https://files.pythonhosted.org/packages/78/ae/c650a38d44df563ddc215e67adcefc5e5316d7d62c13ad3476af57182e34/realtime-2.3.0.tar.gz", hash = "sha256:4071b095d7f750fcd68ec322e05045fce067b5cd5309a7ca809fcc87e50f56a1", size = 18412 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7a/d8/b43232d64542906a89e9f7365a4aa1bf3290ceaa5a0a26ea029e8377090b/realtime-2.3.0-py3-none-any.whl", hash = "sha256:6c241681d0517a3bc5e0132842bffd8b592286131b01a68b41cf7e0be94828fc", size = 21477 },
]

[[package]]
name = "rich"
version = "13.9.4"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "markdown-it-py" },
    { name = "pygments" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ab/3a/0316b28d0761c6734d6bc14e770d85506c986c85ffb239e688eeaab2c2bc/rich-13.9.4.tar.gz", hash = "sha256:439594978a49a09530cff7ebc4b5c7103ef57baf48d5ea3184f21d9a2befa098", size = 223149 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/19/71/39c7c0d87f8d4e6c020a393182060eaefeeae6c01dab6a84ec346f2567df/rich-13.9.4-py3-none-any.whl", hash = "sha256:6049d5e6ec054bf2779ab3358186963bac2ea89175919d699e378b99738c2a90", size = 242424 },
]

[[package]]
name = "shellingham"
version = "1.5.4"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/58/15/8b3609fd3830ef7b27b655beb4b4e9c62313a4e8da8c676e142cc210d58e/shellingham-1.5.4.tar.gz", hash = "sha256:8dbca0739d487e5bd35ab3ca4b36e11c4078f3a234bfce294b0a0291363404de", size = 10310 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e0/f9/0595336914c5619e5f28a1fb793285925a8cd4b432c9da0a987836c7f822/shellingham-1.5.4-py2.py3-none-any.whl", hash = "sha256:7ecfff8f2fd72616f7481040475a65b2bf8af90a56c89140852d1120324e8686", size = 9755 },
]

[[package]]
name = "six"
version = "1.17.0"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/94/e7/b2c673351809dca68a0e064b6af791aa332cf192da575fd474ed7d6f16a2/six-1.17.0.tar.gz", hash = "sha256:ff70335d468e7eb6ec65b95b99d3a2836546063f63acc5171de367e834932a81", size = 34031 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b7/ce/149a00dd41f10bc29e5921b496af8b574d8413afcd5e30dfa0ed46c2cc5e/six-1.17.0-py2.py3-none-any.whl", hash = "sha256:4721f391ed90541fddacab5acf947aa0d3dc7d27b2e1e8eda2be8970586c3274", size = 11050 },
]

[[package]]
name = "sniffio"
version = "1.3.1"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/a2/87/a6771e1546d97e7e041b6ae58d80074f81b7d5121207425c964ddf5cfdbd/sniffio-1.3.1.tar.gz", hash = "sha256:f4324edc670a0f49750a81b895f35c3adb843cca46f0530f79fc1babb23789dc", size = 20372 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e9/44/75a9c9421471a6c4805dbf2356f7c181a29c1879239abab1ea2cc8f38b40/sniffio-1.3.1-py3-none-any.whl", hash = "sha256:2f6da418d1f1e0fddd844478f41680e794e6051915791a034ff65e5f100525a2", size = 10235 },
]

[[package]]
name = "sse-starlette"
version = "2.2.1"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "anyio" },
    { name = "starlette" },
]
sdist = { url = "https://files.pythonhosted.org/packages/71/a4/80d2a11af59fe75b48230846989e93979c892d3a20016b42bb44edb9e398/sse_starlette-2.2.1.tar.gz", hash = "sha256:54470d5f19274aeed6b2d473430b08b4b379ea851d953b11d7f1c4a2c118b419", size = 17376 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d9/e0/5b8bd393f27f4a62461c5cf2479c75a2cc2ffa330976f9f00f5f6e4f50eb/sse_starlette-2.2.1-py3-none-any.whl", hash = "sha256:6410a3d3ba0c89e7675d4c273a301d64649c03a5ef1ca101f10b47f895fd0e99", size = 10120 },
]

[[package]]
name = "starlette"
version = "0.45.3"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "anyio" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ff/fb/2984a686808b89a6781526129a4b51266f678b2d2b97ab2d325e56116df8/starlette-0.45.3.tar.gz", hash = "sha256:2cbcba2a75806f8a41c722141486f37c28e30a0921c5f6fe4346cb0dcee1302f", size = 2574076 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d9/61/f2b52e107b1fc8944b33ef56bf6ac4ebbe16d91b94d2b87ce013bf63fb84/starlette-0.45.3-py3-none-any.whl", hash = "sha256:dfb6d332576f136ec740296c7e8bb8c8a7125044e7c6da30744718880cdd059d", size = 71507 },
]

[[package]]
name = "storage3"
version = "0.11.3"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "httpx", extra = ["http2"] },
    { name = "python-dateutil" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ac/25/83eb4e4612dc07a3bb3cab96253c9c83752d4816f2cf38aa832dfb8d8813/storage3-0.11.3.tar.gz", hash = "sha256:883637132aad36d9d92b7c497a8a56dff7c51f15faf2ff7acbccefbbd5e97347", size = 9930 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c9/8d/ff89f85c4b48285ac7cddf0fafe5e55bb3742d374672b2fbd2627c213fa6/storage3-0.11.3-py3-none-any.whl", hash = "sha256:090c42152217d5d39bd94af3ddeb60c8982f3a283dcd90b53d058f2db33e6007", size = 17831 },
]

[[package]]
name = "strenum"
version = "0.4.15"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/85/ad/430fb60d90e1d112a62ff57bdd1f286ec73a2a0331272febfddd21f330e1/StrEnum-0.4.15.tar.gz", hash = "sha256:878fb5ab705442070e4dd1929bb5e2249511c0bcf2b0eeacf3bcd80875c82eff", size = 23384 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/81/69/297302c5f5f59c862faa31e6cb9a4cd74721cd1e052b38e464c5b402df8b/StrEnum-0.4.15-py3-none-any.whl", hash = "sha256:a30cda4af7cc6b5bf52c8055bc4bf4b2b6b14a93b574626da33df53cf7740659", size = 8851 },
]

[[package]]
name = "supabase"
version = "2.13.0"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "gotrue" },
    { name = "httpx" },
    { name = "postgrest" },
    { name = "realtime" },
    { name = "storage3" },
    { name = "supafunc" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a3/0e/3d2f01d465b4636deb78f102e6feff47568aae5873946184afb75ff5abe3/supabase-2.13.0.tar.gz", hash = "sha256:452574d34bd978c8d11b5f02b0182b48e8854e511c969483c83875ec01495f11", size = 14251 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/18/a7/2ffbd3bea564927e74966a1a3a512a68b491d602d77890daa67e3033bdf4/supabase-2.13.0-py3-none-any.whl", hash = "sha256:6cfccc055be21dab311afc5e9d5b37f3a4966f8394703763fbc8f8e86f36eaa6", size = 17171 },
]

[[package]]
name = "supabase-mcp-server"
source = { editable = "." }
dependencies = [
    { name = "mcp", extra = ["cli"] },
    { name = "psycopg2" },
    { name = "supabase" },
    { name = "tenacity" },
]

[package.dev-dependencies]
dev = [
    { name = "pytest" },
    { name = "pytest-asyncio" },
    { name = "pytest-mock" },
]

[package.metadata]
requires-dist = [
    { name = "mcp", extras = ["cli"], specifier = ">=1.2.1" },
    { name = "psycopg2", specifier = ">=2.9.10" },
    { name = "supabase", specifier = ">=2.13.0" },
    { name = "tenacity", specifier = ">=9.0.0" },
]

[package.metadata.requires-dev]
dev = [
    { name = "pytest", specifier = ">=8.3.4" },
    { name = "pytest-asyncio", specifier = ">=0.25.3" },
    { name = "pytest-mock", specifier = ">=3.14.0" },
]

[[package]]
name = "supafunc"
version = "0.9.3"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "httpx", extra = ["http2"] },
    { name = "strenum" },
]
sdist = { url = "https://files.pythonhosted.org/packages/72/03/2ca4dddd4a8d28f5dbe204ea0350fb3e4fbf16156ef446f12e0a73d9e718/supafunc-0.9.3.tar.gz", hash = "sha256:29a06d0dc9fe049ecc1249e53ccf3d2a80d72239200f69b510740217aca6497c", size = 4730 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/40/ec/56e3de38ee99f11c6d645ce8f2a1c29c4561adcb47e53e7781b9c073aa7e/supafunc-0.9.3-py3-none-any.whl", hash = "sha256:83e36ed5e94d2dd0484011aad0b09337d35a87992adbc97acc31c8201aca05d0", size = 7690 },
]

[[package]]
name = "tenacity"
version = "9.0.0"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/cd/94/91fccdb4b8110642462e653d5dcb27e7b674742ad68efd146367da7bdb10/tenacity-9.0.0.tar.gz", hash = "sha256:807f37ca97d62aa361264d497b0e31e92b8027044942bfa756160d908320d73b", size = 47421 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b6/cb/b86984bed139586d01532a587464b5805f12e397594f19f931c4c2fbfa61/tenacity-9.0.0-py3-none-any.whl", hash = "sha256:93de0c98785b27fcf659856aa9f54bfbd399e29969b0621bc7f762bd441b4539", size = 28169 },
]

[[package]]
name = "typer"
version = "0.15.1"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "click" },
    { name = "rich" },
    { name = "shellingham" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/cb/ce/dca7b219718afd37a0068f4f2530a727c2b74a8b6e8e0c0080a4c0de4fcd/typer-0.15.1.tar.gz", hash = "sha256:a0588c0a7fa68a1978a069818657778f86abe6ff5ea6abf472f940a08bfe4f0a", size = 99789 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d0/cc/0a838ba5ca64dc832aa43f727bd586309846b0ffb2ce52422543e6075e8a/typer-0.15.1-py3-none-any.whl", hash = "sha256:7994fb7b8155b64d3402518560648446072864beefd44aa2dc36972a5972e847", size = 44908 },
]

[[package]]
name = "typing-extensions"
version = "4.12.2"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/df/db/f35a00659bc03fec321ba8bce9420de607a1d37f8342eee1863174c69557/typing_extensions-4.12.2.tar.gz", hash = "sha256:1a7ead55c7e559dd4dee8856e3a88b41225abfe1ce8df57b7c13915fe121ffb8", size = 85321 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/26/9f/ad63fc0248c5379346306f8668cda6e2e2e9c95e01216d2b8ffd9ff037d0/typing_extensions-4.12.2-py3-none-any.whl", hash = "sha256:04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d", size = 37438 },
]

[[package]]
name = "uvicorn"
version = "0.34.0"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "click" },
    { name = "h11" },
]
sdist = { url = "https://files.pythonhosted.org/packages/4b/4d/938bd85e5bf2edeec766267a5015ad969730bb91e31b44021dfe8b22df6c/uvicorn-0.34.0.tar.gz", hash = "sha256:404051050cd7e905de2c9a7e61790943440b3416f49cb409f965d9dcd0fa73e9", size = 76568 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/61/14/33a3a1352cfa71812a3a21e8c9bfb83f60b0011f5e36f2b1399d51928209/uvicorn-0.34.0-py3-none-any.whl", hash = "sha256:023dc038422502fa28a09c7a30bf2b6991512da7dcdb8fd35fe57cfc154126f4", size = 62315 },
]

[[package]]
name = "websockets"
version = "14.2"
source = { registry = "https://pypi.org/simple/" }
sdist = { url = "https://files.pythonhosted.org/packages/94/54/8359678c726243d19fae38ca14a334e740782336c9f19700858c4eb64a1e/websockets-14.2.tar.gz", hash = "sha256:5059ed9c54945efb321f097084b4c7e52c246f2c869815876a69d1efc4ad6eb5", size = 164394 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c1/81/04f7a397653dc8bec94ddc071f34833e8b99b13ef1a3804c149d59f92c18/websockets-14.2-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:1f20522e624d7ffbdbe259c6b6a65d73c895045f76a93719aa10cd93b3de100c", size = 163096 },
    { url = "https://files.pythonhosted.org/packages/ec/c5/de30e88557e4d70988ed4d2eabd73fd3e1e52456b9f3a4e9564d86353b6d/websockets-14.2-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:647b573f7d3ada919fd60e64d533409a79dcf1ea21daeb4542d1d996519ca967", size = 160758 },
    { url = "https://files.pythonhosted.org/packages/e5/8c/d130d668781f2c77d106c007b6c6c1d9db68239107c41ba109f09e6c218a/websockets-14.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:6af99a38e49f66be5a64b1e890208ad026cda49355661549c507152113049990", size = 160995 },
    { url = "https://files.pythonhosted.org/packages/a6/bc/f6678a0ff17246df4f06765e22fc9d98d1b11a258cc50c5968b33d6742a1/websockets-14.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:091ab63dfc8cea748cc22c1db2814eadb77ccbf82829bac6b2fbe3401d548eda", size = 170815 },
    { url = "https://files.pythonhosted.org/packages/d8/b2/8070cb970c2e4122a6ef38bc5b203415fd46460e025652e1ee3f2f43a9a3/websockets-14.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:b374e8953ad477d17e4851cdc66d83fdc2db88d9e73abf755c94510ebddceb95", size = 169759 },
    { url = "https://files.pythonhosted.org/packages/81/da/72f7caabd94652e6eb7e92ed2d3da818626e70b4f2b15a854ef60bf501ec/websockets-14.2-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:a39d7eceeea35db85b85e1169011bb4321c32e673920ae9c1b6e0978590012a3", size = 170178 },
    { url = "https://files.pythonhosted.org/packages/31/e0/812725b6deca8afd3a08a2e81b3c4c120c17f68c9b84522a520b816cda58/websockets-14.2-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:0a6f3efd47ffd0d12080594f434faf1cd2549b31e54870b8470b28cc1d3817d9", size = 170453 },
    { url = "https://files.pythonhosted.org/packages/66/d3/8275dbc231e5ba9bb0c4f93144394b4194402a7a0c8ffaca5307a58ab5e3/websockets-14.2-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:065ce275e7c4ffb42cb738dd6b20726ac26ac9ad0a2a48e33ca632351a737267", size = 169830 },
    { url = "https://files.pythonhosted.org/packages/a3/ae/e7d1a56755ae15ad5a94e80dd490ad09e345365199600b2629b18ee37bc7/websockets-14.2-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:e9d0e53530ba7b8b5e389c02282f9d2aa47581514bd6049d3a7cffe1385cf5fe", size = 169824 },
    { url = "https://files.pythonhosted.org/packages/b6/32/88ccdd63cb261e77b882e706108d072e4f1c839ed723bf91a3e1f216bf60/websockets-14.2-cp312-cp312-win32.whl", hash = "sha256:20e6dd0984d7ca3037afcb4494e48c74ffb51e8013cac71cf607fffe11df7205", size = 163981 },
    { url = "https://files.pythonhosted.org/packages/b3/7d/32cdb77990b3bdc34a306e0a0f73a1275221e9a66d869f6ff833c95b56ef/websockets-14.2-cp312-cp312-win_amd64.whl", hash = "sha256:44bba1a956c2c9d268bdcdf234d5e5ff4c9b6dc3e300545cbe99af59dda9dcce", size = 164421 },
    { url = "https://files.pythonhosted.org/packages/82/94/4f9b55099a4603ac53c2912e1f043d6c49d23e94dd82a9ce1eb554a90215/websockets-14.2-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:6f1372e511c7409a542291bce92d6c83320e02c9cf392223272287ce55bc224e", size = 163102 },
    { url = "https://files.pythonhosted.org/packages/8e/b7/7484905215627909d9a79ae07070057afe477433fdacb59bf608ce86365a/websockets-14.2-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:4da98b72009836179bb596a92297b1a61bb5a830c0e483a7d0766d45070a08ad", size = 160766 },
    { url = "https://files.pythonhosted.org/packages/a3/a4/edb62efc84adb61883c7d2c6ad65181cb087c64252138e12d655989eec05/websockets-14.2-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:f8a86a269759026d2bde227652b87be79f8a734e582debf64c9d302faa1e9f03", size = 160998 },
    { url = "https://files.pythonhosted.org/packages/f5/79/036d320dc894b96af14eac2529967a6fc8b74f03b83c487e7a0e9043d842/websockets-14.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:86cf1aaeca909bf6815ea714d5c5736c8d6dd3a13770e885aafe062ecbd04f1f", size = 170780 },
    { url = "https://files.pythonhosted.org/packages/63/75/5737d21ee4dd7e4b9d487ee044af24a935e36a9ff1e1419d684feedcba71/websockets-14.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:a9b0f6c3ba3b1240f602ebb3971d45b02cc12bd1845466dd783496b3b05783a5", size = 169717 },
    { url = "https://files.pythonhosted.org/packages/2c/3c/bf9b2c396ed86a0b4a92ff4cdaee09753d3ee389be738e92b9bbd0330b64/websockets-14.2-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:669c3e101c246aa85bc8534e495952e2ca208bd87994650b90a23d745902db9a", size = 170155 },
    { url = "https://files.pythonhosted.org/packages/75/2d/83a5aca7247a655b1da5eb0ee73413abd5c3a57fc8b92915805e6033359d/websockets-14.2-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:eabdb28b972f3729348e632ab08f2a7b616c7e53d5414c12108c29972e655b20", size = 170495 },
    { url = "https://files.pythonhosted.org/packages/79/dd/699238a92761e2f943885e091486378813ac8f43e3c84990bc394c2be93e/websockets-14.2-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:2066dc4cbcc19f32c12a5a0e8cc1b7ac734e5b64ac0a325ff8353451c4b15ef2", size = 169880 },
    { url = "https://files.pythonhosted.org/packages/c8/c9/67a8f08923cf55ce61aadda72089e3ed4353a95a3a4bc8bf42082810e580/websockets-14.2-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:ab95d357cd471df61873dadf66dd05dd4709cae001dd6342edafc8dc6382f307", size = 169856 },
    { url = "https://files.pythonhosted.org/packages/17/b1/1ffdb2680c64e9c3921d99db460546194c40d4acbef999a18c37aa4d58a3/websockets-14.2-cp313-cp313-win32.whl", hash = "sha256:a9e72fb63e5f3feacdcf5b4ff53199ec8c18d66e325c34ee4c551ca748623bbc", size = 163974 },
    { url = "https://files.pythonhosted.org/packages/14/13/8b7fc4cb551b9cfd9890f0fd66e53c18a06240319915533b033a56a3d520/websockets-14.2-cp313-cp313-win_amd64.whl", hash = "sha256:b439ea828c4ba99bb3176dc8d9b933392a2413c0f6b149fdcba48393f573377f", size = 164420 },
    { url = "https://files.pythonhosted.org/packages/7b/c8/d529f8a32ce40d98309f4470780631e971a5a842b60aec864833b3615786/websockets-14.2-py3-none-any.whl", hash = "sha256:7a6ceec4ea84469f15cf15807a747e9efe57e369c384fa86e022b3bea679b79b", size = 157416 },
]

[[package]]
name = "yarl"
version = "1.18.3"
source = { registry = "https://pypi.org/simple/" }
dependencies = [
    { name = "idna" },
    { name = "multidict" },
    { name = "propcache" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b7/9d/4b94a8e6d2b51b599516a5cb88e5bc99b4d8d4583e468057eaa29d5f0918/yarl-1.18.3.tar.gz", hash = "sha256:ac1801c45cbf77b6c99242eeff4fffb5e4e73a800b5c4ad4fc0be5def634d2e1", size = 181062 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/33/85/bd2e2729752ff4c77338e0102914897512e92496375e079ce0150a6dc306/yarl-1.18.3-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:1dd4bdd05407ced96fed3d7f25dbbf88d2ffb045a0db60dbc247f5b3c5c25d50", size = 142644 },
    { url = "https://files.pythonhosted.org/packages/ff/74/1178322cc0f10288d7eefa6e4a85d8d2e28187ccab13d5b844e8b5d7c88d/yarl-1.18.3-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:7c33dd1931a95e5d9a772d0ac5e44cac8957eaf58e3c8da8c1414de7dd27c576", size = 94962 },
    { url = "https://files.pythonhosted.org/packages/be/75/79c6acc0261e2c2ae8a1c41cf12265e91628c8c58ae91f5ff59e29c0787f/yarl-1.18.3-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:25b411eddcfd56a2f0cd6a384e9f4f7aa3efee14b188de13048c25b5e91f1640", size = 92795 },
    { url = "https://files.pythonhosted.org/packages/6b/32/927b2d67a412c31199e83fefdce6e645247b4fb164aa1ecb35a0f9eb2058/yarl-1.18.3-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:436c4fc0a4d66b2badc6c5fc5ef4e47bb10e4fd9bf0c79524ac719a01f3607c2", size = 332368 },
    { url = "https://files.pythonhosted.org/packages/19/e5/859fca07169d6eceeaa4fde1997c91d8abde4e9a7c018e371640c2da2b71/yarl-1.18.3-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:e35ef8683211db69ffe129a25d5634319a677570ab6b2eba4afa860f54eeaf75", size = 342314 },
    { url = "https://files.pythonhosted.org/packages/08/75/76b63ccd91c9e03ab213ef27ae6add2e3400e77e5cdddf8ed2dbc36e3f21/yarl-1.18.3-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:84b2deecba4a3f1a398df819151eb72d29bfeb3b69abb145a00ddc8d30094512", size = 341987 },
    { url = "https://files.pythonhosted.org/packages/1a/e1/a097d5755d3ea8479a42856f51d97eeff7a3a7160593332d98f2709b3580/yarl-1.18.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:00e5a1fea0fd4f5bfa7440a47eff01d9822a65b4488f7cff83155a0f31a2ecba", size = 336914 },
    { url = "https://files.pythonhosted.org/packages/0b/42/e1b4d0e396b7987feceebe565286c27bc085bf07d61a59508cdaf2d45e63/yarl-1.18.3-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d0e883008013c0e4aef84dcfe2a0b172c4d23c2669412cf5b3371003941f72bb", size = 325765 },
    { url = "https://files.pythonhosted.org/packages/7e/18/03a5834ccc9177f97ca1bbb245b93c13e58e8225276f01eedc4cc98ab820/yarl-1.18.3-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:5a3f356548e34a70b0172d8890006c37be92995f62d95a07b4a42e90fba54272", size = 344444 },
    { url = "https://files.pythonhosted.org/packages/c8/03/a713633bdde0640b0472aa197b5b86e90fbc4c5bc05b727b714cd8a40e6d/yarl-1.18.3-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:ccd17349166b1bee6e529b4add61727d3f55edb7babbe4069b5764c9587a8cc6", size = 340760 },
    { url = "https://files.pythonhosted.org/packages/eb/99/f6567e3f3bbad8fd101886ea0276c68ecb86a2b58be0f64077396cd4b95e/yarl-1.18.3-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:b958ddd075ddba5b09bb0be8a6d9906d2ce933aee81100db289badbeb966f54e", size = 346484 },
    { url = "https://files.pythonhosted.org/packages/8e/a9/84717c896b2fc6cb15bd4eecd64e34a2f0a9fd6669e69170c73a8b46795a/yarl-1.18.3-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:c7d79f7d9aabd6011004e33b22bc13056a3e3fb54794d138af57f5ee9d9032cb", size = 359864 },
    { url = "https://files.pythonhosted.org/packages/1e/2e/d0f5f1bef7ee93ed17e739ec8dbcb47794af891f7d165fa6014517b48169/yarl-1.18.3-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:4891ed92157e5430874dad17b15eb1fda57627710756c27422200c52d8a4e393", size = 364537 },
    { url = "https://files.pythonhosted.org/packages/97/8a/568d07c5d4964da5b02621a517532adb8ec5ba181ad1687191fffeda0ab6/yarl-1.18.3-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:ce1af883b94304f493698b00d0f006d56aea98aeb49d75ec7d98cd4a777e9285", size = 357861 },
    { url = "https://files.pythonhosted.org/packages/7d/e3/924c3f64b6b3077889df9a1ece1ed8947e7b61b0a933f2ec93041990a677/yarl-1.18.3-cp312-cp312-win32.whl", hash = "sha256:f91c4803173928a25e1a55b943c81f55b8872f0018be83e3ad4938adffb77dd2", size = 84097 },
    { url = "https://files.pythonhosted.org/packages/34/45/0e055320daaabfc169b21ff6174567b2c910c45617b0d79c68d7ab349b02/yarl-1.18.3-cp312-cp312-win_amd64.whl", hash = "sha256:7e2ee16578af3b52ac2f334c3b1f92262f47e02cc6193c598502bd46f5cd1477", size = 90399 },
    { url = "https://files.pythonhosted.org/packages/30/c7/c790513d5328a8390be8f47be5d52e141f78b66c6c48f48d241ca6bd5265/yarl-1.18.3-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:90adb47ad432332d4f0bc28f83a5963f426ce9a1a8809f5e584e704b82685dcb", size = 140789 },
    { url = "https://files.pythonhosted.org/packages/30/aa/a2f84e93554a578463e2edaaf2300faa61c8701f0898725842c704ba5444/yarl-1.18.3-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:913829534200eb0f789d45349e55203a091f45c37a2674678744ae52fae23efa", size = 94144 },
    { url = "https://files.pythonhosted.org/packages/c6/fc/d68d8f83714b221a85ce7866832cba36d7c04a68fa6a960b908c2c84f325/yarl-1.18.3-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:ef9f7768395923c3039055c14334ba4d926f3baf7b776c923c93d80195624782", size = 91974 },
    { url = "https://files.pythonhosted.org/packages/56/4e/d2563d8323a7e9a414b5b25341b3942af5902a2263d36d20fb17c40411e2/yarl-1.18.3-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:88a19f62ff30117e706ebc9090b8ecc79aeb77d0b1f5ec10d2d27a12bc9f66d0", size = 333587 },
    { url = "https://files.pythonhosted.org/packages/25/c9/cfec0bc0cac8d054be223e9f2c7909d3e8442a856af9dbce7e3442a8ec8d/yarl-1.18.3-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:e17c9361d46a4d5addf777c6dd5eab0715a7684c2f11b88c67ac37edfba6c482", size = 344386 },
    { url = "https://files.pythonhosted.org/packages/ab/5d/4c532190113b25f1364d25f4c319322e86232d69175b91f27e3ebc2caf9a/yarl-1.18.3-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:1a74a13a4c857a84a845505fd2d68e54826a2cd01935a96efb1e9d86c728e186", size = 345421 },
    { url = "https://files.pythonhosted.org/packages/23/d1/6cdd1632da013aa6ba18cee4d750d953104a5e7aac44e249d9410a972bf5/yarl-1.18.3-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:41f7ce59d6ee7741af71d82020346af364949314ed3d87553763a2df1829cc58", size = 339384 },
    { url = "https://files.pythonhosted.org/packages/9a/c4/6b3c39bec352e441bd30f432cda6ba51681ab19bb8abe023f0d19777aad1/yarl-1.18.3-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:f52a265001d830bc425f82ca9eabda94a64a4d753b07d623a9f2863fde532b53", size = 326689 },
    { url = "https://files.pythonhosted.org/packages/23/30/07fb088f2eefdc0aa4fc1af4e3ca4eb1a3aadd1ce7d866d74c0f124e6a85/yarl-1.18.3-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:82123d0c954dc58db301f5021a01854a85bf1f3bb7d12ae0c01afc414a882ca2", size = 345453 },
    { url = "https://files.pythonhosted.org/packages/63/09/d54befb48f9cd8eec43797f624ec37783a0266855f4930a91e3d5c7717f8/yarl-1.18.3-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:2ec9bbba33b2d00999af4631a3397d1fd78290c48e2a3e52d8dd72db3a067ac8", size = 341872 },
    { url = "https://files.pythonhosted.org/packages/91/26/fd0ef9bf29dd906a84b59f0cd1281e65b0c3e08c6aa94b57f7d11f593518/yarl-1.18.3-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:fbd6748e8ab9b41171bb95c6142faf068f5ef1511935a0aa07025438dd9a9bc1", size = 347497 },
    { url = "https://files.pythonhosted.org/packages/d9/b5/14ac7a256d0511b2ac168d50d4b7d744aea1c1aa20c79f620d1059aab8b2/yarl-1.18.3-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:877d209b6aebeb5b16c42cbb377f5f94d9e556626b1bfff66d7b0d115be88d0a", size = 359981 },
    { url = "https://files.pythonhosted.org/packages/ca/b3/d493221ad5cbd18bc07e642894030437e405e1413c4236dd5db6e46bcec9/yarl-1.18.3-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:b464c4ab4bfcb41e3bfd3f1c26600d038376c2de3297760dfe064d2cb7ea8e10", size = 366229 },
    { url = "https://files.pythonhosted.org/packages/04/56/6a3e2a5d9152c56c346df9b8fb8edd2c8888b1e03f96324d457e5cf06d34/yarl-1.18.3-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:8d39d351e7faf01483cc7ff7c0213c412e38e5a340238826be7e0e4da450fdc8", size = 360383 },
    { url = "https://files.pythonhosted.org/packages/fd/b7/4b3c7c7913a278d445cc6284e59b2e62fa25e72758f888b7a7a39eb8423f/yarl-1.18.3-cp313-cp313-win32.whl", hash = "sha256:61ee62ead9b68b9123ec24bc866cbef297dd266175d53296e2db5e7f797f902d", size = 310152 },
    { url = "https://files.pythonhosted.org/packages/f5/d5/688db678e987c3e0fb17867970700b92603cadf36c56e5fb08f23e822a0c/yarl-1.18.3-cp313-cp313-win_amd64.whl", hash = "sha256:578e281c393af575879990861823ef19d66e2b1d0098414855dd367e234f5b3c", size = 315723 },
    { url = "https://files.pythonhosted.org/packages/f5/4b/a06e0ec3d155924f77835ed2d167ebd3b211a7b0853da1cf8d8414d784ef/yarl-1.18.3-py3-none-any.whl", hash = "sha256:b57f4f58099328dfb26c6a771d09fb20dbbae81d20cfb66141251ea063bd101b", size = 45109 },
]



================================================================
End of Codebase
================================================================
